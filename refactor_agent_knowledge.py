#!/usr/bin/env python3
"""
MVP Script –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ agent knowledge —Ñ–∞–π–ª–æ–≤.

–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ knowledge —Ñ–∞–π–ª—ã –≤ –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
- –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ (~130 —Å—Ç—Ä–æ–∫)
- –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ä–æ–ª–∏
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
- –°–æ–∑–¥–∞—ë—Ç backup –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
"""

import os
import re
import shutil
from pathlib import Path
from datetime import datetime
from typing import Tuple, Optional


# –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π
COMMON_RULES_MARKERS = [
    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í –†–û–õ–¨",
    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–ê–ü–†–ï–¢ –¢–û–ö–ï–ù-–≠–ö–û–ù–û–ú–ò–ò",
    "–û–ë–û–í'–Ø–ó–ö–û–í–Ü –§–Ü–ù–ê–õ–¨–ù–Ü –ü–£–ù–ö–¢–ò TodoWrite",
    "–û–ë–û–í'–Ø–ó–ö–û–í–ï –ü–†–ê–í–ò–õ–û: –ù–ï–ì–ê–ô–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–î–ê–ß–Ü",
    "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ claude code"
]

SYSTEM_PROMPT_MARKERS = [
    "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
    "—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ä–æ–ª–∏",
    "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç",
    "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞–≥–µ–Ω—Ç"
]


def find_agent_knowledge_files(agents_dir: Path) -> list[Path]:
    """
    –ù–∞–π—Ç–∏ –≤—Å–µ knowledge —Ñ–∞–π–ª—ã –∞–≥–µ–Ω—Ç–æ–≤.

    Args:
        agents_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agents

    Returns:
        list[Path]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ knowledge —Ñ–∞–π–ª–∞–º
    """
    knowledge_files = []

    for agent_dir in agents_dir.iterdir():
        if not agent_dir.is_dir():
            continue

        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å _shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if agent_dir.name == "_shared":
            continue

        # –ù–∞–π—Ç–∏ knowledge —Ñ–∞–π–ª –≤ knowledge/ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        knowledge_dir = agent_dir / "knowledge"
        if knowledge_dir.exists():
            for file in knowledge_dir.iterdir():
                if file.suffix == ".md" and "knowledge" in file.stem:
                    knowledge_files.append(file)

    return sorted(knowledge_files)


def extract_agent_name(file_path: Path) -> str:
    """
    –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ knowledge —Ñ–∞–π–ª—É

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    """
    # –ü—Ä–∏–º–µ—Ä: .../payment_integration_agent/knowledge/payment_integration_knowledge.md
    agent_dir_name = file_path.parent.parent.name

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å payment_integration_agent -> Payment Integration Agent
    name = agent_dir_name.replace("_agent", "").replace("_", " ").title()
    return f"{name} Agent"


def count_lines_with_common_rules(content: str) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    """
    lines = content.split('\n')
    common_rules_lines = 0
    in_common_section = False

    for line in lines:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ –æ–±—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        for marker in COMMON_RULES_MARKERS:
            if marker.lower() in line.lower():
                in_common_section = True
                break

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ (–Ω–∞—á–∞–ª–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)
        for marker in SYSTEM_PROMPT_MARKERS:
            if marker.lower() in line.lower() and in_common_section:
                in_common_section = False
                break

        if in_common_section:
            common_rules_lines += 1

    return common_rules_lines


def extract_system_prompt(content: str, agent_name: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ—á—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ä–æ–ª–∏ –∏–∑ content.

    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞

    Returns:
        Optional[str]: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ None
    """
    lines = content.split('\n')
    prompt_lines = []
    in_prompt_section = False

    for line in lines:
        # –ù–∞—á–∞–ª–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        for marker in SYSTEM_PROMPT_MARKERS:
            if marker.lower() in line.lower():
                in_prompt_section = True
                break

        if in_prompt_section:
            prompt_lines.append(line)

            # –ö–æ–Ω–µ—Ü —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–Ω–∞—á–∞–ª–æ –¥–æ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π)
            if "## –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã" in line or "## –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–æ–º–µ–Ω–∞" in line:
                break

    if prompt_lines:
        return '\n'.join(prompt_lines)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å –∑–∞–≥–ª—É—à–∫—É
    return f"""## –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç

–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞–≥–µ–Ω—Ç {agent_name} —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ [–û–ë–õ–ê–°–¢–¨].

### –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç:
- [–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è 1]
- [–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è 2]
- [–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è 3]
"""


def extract_domain_knowledge(content: str) -> str:
    """
    –ò–∑–≤–ª–µ—á—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è (–±–µ–∑ –æ–±—â–∏—Ö –ø—Ä–∞–≤–∏–ª).

    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞

    Returns:
        str: –î–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
    """
    lines = content.split('\n')
    domain_lines = []
    skip_common_rules = False

    for line in lines:
        # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–µ–∫—Ü–∏–∏ –æ–±—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        for marker in COMMON_RULES_MARKERS:
            if marker.lower() in line.lower():
                skip_common_rules = True
                break

        # –ù–∞—á–∞–ª–æ –¥–æ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
        for marker in SYSTEM_PROMPT_MARKERS:
            if marker.lower() in line.lower() and skip_common_rules:
                skip_common_rules = False
                break

        # –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
        if not skip_common_rules and any(marker in line for marker in [
            "## –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            "## –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–æ–º–µ–Ω–∞",
            "### 1.", "### 2.", "### 3.",
            "```python", "```javascript", "```typescript"
        ]):
            domain_lines.append(line)

    return '\n'.join(domain_lines) if domain_lines else "[–î–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞]"


def create_backup(file_path: Path) -> Path:
    """
    –°–æ–∑–¥–∞—Ç—å backup –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

    Returns:
        Path: –ü—É—Ç—å –∫ backup —Ñ–∞–π–ª—É
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = file_path.with_suffix(f".backup_{timestamp}.md")
    shutil.copy2(file_path, backup_path)

    print(f"[BACKUP] {backup_path.name}")
    return backup_path


def generate_refactored_content(
    agent_name: str,
    system_prompt: str,
    domain_knowledge: str
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π content –Ω–∞ –æ—Å–Ω–æ–≤–µ template.

    Args:
        agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        domain_knowledge: –î–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è

    Returns:
        str: –ù–æ–≤—ã–π content
    """
    template = f"""# {agent_name} - Knowledge Base

## üìö –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤

**–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –†–ê–ë–û–¢–´:** –ü—Ä–æ—á–∏—Ç–∞–π [–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≥–µ–Ω—Ç–æ–≤](../_shared/agent_common_rules.md)

–í—Å–µ –∞–≥–µ–Ω—Ç—ã —Å–ª–µ–¥—É—é—Ç –µ–¥–∏–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º workflow, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç:
- ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–æ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- ‚úÖ Workflow –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (Archon + TodoWrite)
- ‚úÖ Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
- ‚úÖ Post-Task Checklist (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏)
- ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
- ‚úÖ –ó–∞–±–æ—Ä–æ–Ω–∞ —è—Ä–ª–∏–∫—ñ–≤ —Ç–∞ —Ç–æ–∫–µ–Ω-–µ–∫–æ–Ω–æ–º—ñ—ó

---

## üé≠ –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –†–û–õ–ò: {agent_name}

**–¢—ã - {agent_name}**, —ç–∫—Å–ø–µ—Ä—Ç –≤ [–û–ë–õ–ê–°–¢–¨ –≠–ö–°–ü–ï–†–¢–ò–ó–´].

### ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –†–ê–ë–û–¢–´:
**–ü–†–û–ß–ò–¢–ê–ô:** [`agent_common_rules.md`](../_shared/agent_common_rules.md) - —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ workflow, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏.

{system_prompt}

---

## üîç –î–û–ú–ï–ù–ù–´–ï –ó–ù–ê–ù–ò–Ø: [–û–ë–õ–ê–°–¢–¨]

{domain_knowledge}

---

**–í–µ—Ä—Å–∏—è:** 2.0 (–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
**–î–∞—Ç–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:** {datetime.now().strftime("%Y-%m-%d")}
**–ê–≤—Ç–æ—Ä —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:** Archon Blueprint Architect
"""
    return template


def refactor_agent_knowledge(
    file_path: Path,
    dry_run: bool = False
) -> Tuple[bool, str]:
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –æ–¥–∏–Ω knowledge —Ñ–∞–π–ª –∞–≥–µ–Ω—Ç–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ knowledge —Ñ–∞–π–ª—É
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏

    Returns:
        Tuple[bool, str]: (success, message)
    """
    agent_name = extract_agent_name(file_path)

    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            original_content = f.read()
    except Exception as e:
        return False, f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}"

    # –ê–Ω–∞–ª–∏–∑
    original_lines = original_content.count('\n')
    common_rules_lines = count_lines_with_common_rules(original_content)

    print(f"\n[PROCESSING] {agent_name}")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª: {original_lines} —Å—Ç—Ä–æ–∫")
    print(f"  –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ (–¥—É–±–ª–∏–∫–∞—Ç—ã): ~{common_rules_lines} —Å—Ç—Ä–æ–∫")

    # –ò–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    system_prompt = extract_system_prompt(original_content, agent_name)
    domain_knowledge = extract_domain_knowledge(original_content)

    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π content
    new_content = generate_refactored_content(
        agent_name=agent_name,
        system_prompt=system_prompt,
        domain_knowledge=domain_knowledge
    )

    new_lines = new_content.count('\n')
    saved_lines = original_lines - new_lines

    print(f"  –ù–æ–≤—ã–π: {new_lines} —Å—Ç—Ä–æ–∫")
    print(f"  –≠–∫–æ–Ω–æ–º–∏—è: {saved_lines} —Å—Ç—Ä–æ–∫ ({saved_lines / original_lines * 100:.1f}%)")

    if dry_run:
        print(f"  [DRY RUN] –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        return True, "Dry run successful"

    # –°–æ–∑–¥–∞—Ç—å backup
    backup_path = create_backup(file_path)

    # –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π content
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)

        print(f"  [SUCCESS] –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω")
        return True, f"Refactored successfully (saved {saved_lines} lines)"

    except Exception as e:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup –ø—Ä–∏ –æ—à–∏–±–∫–µ
        shutil.copy2(backup_path, file_path)
        return False, f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e} (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ backup)"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    PROJECT_ROOT = Path(__file__).parent
    AGENTS_DIR = PROJECT_ROOT / "agent-factory" / "use-cases" / "agent-factory-with-subagents" / "agents"
    DRY_RUN = False  # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ False –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

    print("=" * 70)
    print("AGENT KNOWLEDGE REFACTORING SCRIPT (MVP)")
    print("=" * 70)
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {AGENTS_DIR}")
    print(f"–†–µ–∂–∏–º: {'DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' if DRY_RUN else 'PRODUCTION (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)'}")
    print("=" * 70)

    # –ù–∞–π—Ç–∏ –≤—Å–µ knowledge —Ñ–∞–π–ª—ã
    knowledge_files = find_agent_knowledge_files(AGENTS_DIR)
    print(f"\n[INFO] –ù–∞–π–¥–µ–Ω–æ {len(knowledge_files)} knowledge —Ñ–∞–π–ª–æ–≤")

    if not knowledge_files:
        print("[ERROR] Knowledge —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    success_count = 0
    failed_count = 0
    total_saved_lines = 0

    for file_path in knowledge_files:
        success, message = refactor_agent_knowledge(file_path, dry_run=DRY_RUN)

        if success:
            success_count += 1
        else:
            failed_count += 1
            print(f"[FAILED] {message}")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 70)
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(knowledge_files)}")
    print(f"–û—à–∏–±–∫–∏: {failed_count}/{len(knowledge_files)}")

    if success_count > 0:
        print(f"\n[SUCCESS] –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ {success_count} –∞–≥–µ–Ω—Ç–∞–º!")
        print(f"[INFO] Backup —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"[INFO] –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: git commit + push")


if __name__ == "__main__":
    main()
