"""
–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É–±–∞–≥–µ–Ω—Ç–æ–≤.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å—É–±–∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.
"""

import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from orchestration import (
    AgentOrchestrator, Task, Agent, TaskPriority, AgentStatus,
    OrchestrationConfig, TaskDependency
)


async def basic_orchestration_example():
    """
    –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
    - –û—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –±–∞–∑–æ–≤–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏...")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    config = OrchestrationConfig(
        max_concurrent_tasks=3,
        max_queue_size=50,
        default_task_timeout=60,
        enable_parallel_execution=True,
        enable_load_balancing=True
    )

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = AgentOrchestrator(config)
    await orchestrator.start()

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        agents = await register_sample_agents(orchestrator)
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")

        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        tasks = await create_and_submit_tasks(orchestrator)
        print(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await monitor_execution(orchestrator, tasks)

    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        await orchestrator.shutdown()
        print("üõë –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def register_sample_agents(orchestrator: AgentOrchestrator) -> List[Agent]:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    agents = [
        Agent(
            id="data-processor-1",
            name="Data Processing Agent",
            type="data-processor",
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            capabilities=["data-processing", "analytics", "csv", "json"],
            supported_tasks=["process-data", "analyze-data", "transform-data"],
            max_concurrent_tasks=2
        ),
        Agent(
            id="web-scraper-1",
            name="Web Scraping Agent",
            type="web-scraper",
            description="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
            capabilities=["web-scraping", "http-requests", "html-parsing"],
            supported_tasks=["scrape-website", "download-content", "extract-data"],
            max_concurrent_tasks=3
        ),
        Agent(
            id="api-client-1",
            name="API Client Agent",
            type="api-client",
            description="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API",
            capabilities=["api-calls", "rest", "json", "authentication"],
            supported_tasks=["api-request", "data-sync", "webhook"],
            max_concurrent_tasks=4
        )
    ]

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    for agent in agents:
        await orchestrator.register_agent(agent)

    return agents


async def create_and_submit_tasks(orchestrator: AgentOrchestrator) -> List[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á."""
    tasks = [
        Task(
            id="task-001",
            name="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ–±-—Å–∞–π—Ç–∞",
            description="–°–æ–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å tech-—Å–∞–π—Ç–æ–≤",
            priority=TaskPriority.HIGH,
            agent_type="web-scraper",
            input_data={
                "urls": ["https://techcrunch.com", "https://arstechnica.com"],
                "selectors": ["article", ".news-item"]
            },
            estimated_duration=30,
            context={"department": "research"}
        ),
        Task(
            id="task-002",
            name="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            description="–ê–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
            priority=TaskPriority.NORMAL,
            agent_type="data-processor",
            input_data={
                "data_source": "task-001-output",
                "operations": ["clean", "deduplicate", "sentiment_analysis"]
            },
            estimated_duration=45,
            context={"depends_on": "task-001"}
        ),
        Task(
            id="task-003",
            name="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API",
            description="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CRM",
            priority=TaskPriority.NORMAL,
            agent_type="api-client",
            input_data={
                "api_endpoint": "https://api.example.com/data",
                "method": "POST",
                "auth_type": "bearer"
            },
            estimated_duration=15,
            context={"depends_on": "task-002"}
        ),
        Task(
            id="task-004",
            name="–ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö",
            description="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            priority=TaskPriority.LOW,
            agent_type="data-processor",
            input_data={
                "backup_location": "/backup/daily/",
                "compression": "gzip"
            },
            estimated_duration=20
        ),
        Task(
            id="task-005",
            name="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞",
            description="–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ",
            priority=TaskPriority.NORMAL,
            agent_type="data-processor",
            input_data={
                "report_type": "summary",
                "format": "pdf",
                "include_charts": True
            },
            estimated_duration=25,
            context={"depends_on": "task-002,task-003"}
        )
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    task_ids = []
    for task in tasks:
        task_id = await orchestrator.submit_task(task)
        task_ids.append(task_id)

    return task_ids


async def monitor_execution(orchestrator: AgentOrchestrator, task_ids: List[str]):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")

    monitoring_duration = 30  # —Å–µ–∫—É–Ω–¥
    start_time = datetime.now()

    while (datetime.now() - start_time).total_seconds() < monitoring_duration:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        system_status = await orchestrator.get_system_status()

        print(f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {system_status['execution']['active_executions']}")
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {system_status['metrics']['tasks_completed']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {system_status['metrics']['tasks_failed']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        for task_id in task_ids:
            status = await orchestrator.get_task_status(task_id)
            if status:
                print(f"   üìã {task_id}: {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
        queue_stats = system_status.get('task_queue', {})
        if queue_stats:
            print(f"üì• –í –æ—á–µ—Ä–µ–¥–∏: {queue_stats.get('total_tasks', 0)}")

        await asyncio.sleep(5)

    print("\n‚ú® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


async def dependency_example():
    """
    –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - –£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    """
    print("\nüîó –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏...")

    config = OrchestrationConfig(max_concurrent_tasks=2)
    orchestrator = AgentOrchestrator(config)
    await orchestrator.start()

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        universal_agent = Agent(
            id="universal-agent",
            name="Universal Agent",
            type="universal",
            capabilities=["any"],
            supported_tasks=["any"],
            max_concurrent_tasks=5
        )
        await orchestrator.register_agent(universal_agent)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        tasks_with_deps = [
            Task(
                id="step-1",
                name="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                priority=TaskPriority.HIGH,
                agent_type="universal"
            ),
            Task(
                id="step-2",
                name="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                priority=TaskPriority.NORMAL,
                agent_type="universal"
            ),
            Task(
                id="step-3",
                name="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                priority=TaskPriority.NORMAL,
                agent_type="universal"
            ),
            Task(
                id="step-4",
                name="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                priority=TaskPriority.HIGH,
                agent_type="universal"
            )
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        # step-2 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç step-1
        await orchestrator.dependency_manager.add_dependency("step-2", "step-1")
        # step-3 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç step-2
        await orchestrator.dependency_manager.add_dependency("step-3", "step-2")
        # step-4 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç step-3
        await orchestrator.dependency_manager.add_dependency("step-4", "step-3")

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_plan = await orchestrator.create_execution_plan(tasks_with_deps)
        print(f"üìã –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω —Å {len(execution_plan.parallel_groups)} –≥—Ä—É–ø–ø–∞–º–∏")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for task in tasks_with_deps:
            await orchestrator.submit_task(task)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await asyncio.sleep(10)

        system_status = await orchestrator.get_system_status()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –°—Ç–∞—Ç—É—Å: {system_status['orchestrator']['is_running']}")

    finally:
        await orchestrator.shutdown()


async def load_balancing_example():
    """
    –ü—Ä–∏–º–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏
    """
    print("\n‚öñÔ∏è –ü—Ä–∏–º–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏...")

    config = OrchestrationConfig(
        max_concurrent_tasks=10,
        enable_load_balancing=True
    )
    orchestrator = AgentOrchestrator(config)
    await orchestrator.start()

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
        for i in range(3):
            agent = Agent(
                id=f"worker-{i+1}",
                name=f"Worker Agent {i+1}",
                type="worker",
                capabilities=["processing"],
                supported_tasks=["work-task"],
                max_concurrent_tasks=2
            )
            await orchestrator.register_agent(agent)

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        tasks = []
        for i in range(10):
            task = Task(
                id=f"work-task-{i+1}",
                name=f"Work Task {i+1}",
                agent_type="worker",
                priority=TaskPriority.NORMAL,
                estimated_duration=5
            )
            tasks.append(task)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        task_ids = await orchestrator.submit_tasks(tasks)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        for _ in range(5):
            await asyncio.sleep(2)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
            system_status = await orchestrator.get_system_status()
            balancer_stats = system_status.get('load_balancer', {})

            print(f"‚öñÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞: {balancer_stats.get('total_assignments', 0)} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")

    finally:
        await orchestrator.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É–±–∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 50)

    try:
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        await basic_orchestration_example()

        # –ü—Ä–∏–º–µ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        await dependency_example()

        # –ü—Ä–∏–º–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
        await load_balancing_example()

        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())