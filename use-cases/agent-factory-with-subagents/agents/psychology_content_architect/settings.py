"""
Settings for Psychology Content Architect Agent
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
"""

from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional
from pydantic_settings import BaseSettings
from pydantic import Field, ConfigDict
from dotenv import load_dotenv
import os

load_dotenv()

class ContentArchitectSettings(BaseSettings):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Psychology Content Architect
    """
    
    model_config = ConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        extra="ignore"
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã LLM
    llm_provider: str = Field(default="openai", description="–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM")
    llm_api_key: str = Field(..., description="API-–∫–ª—é—á –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    llm_model: str = Field(default="qwen2.5-coder-32b-instruct", description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    llm_base_url: str = Field(
        default="https://dashscope.aliyuncs.com/compatible-mode/v1",
        description="–ë–∞–∑–æ–≤—ã–π URL API"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤
    test_domain: str = Field(default="mental_health", description="–î–æ–º–µ–Ω —Ç–µ—Å—Ç–∞")
    test_type: str = Field(default="diagnostic", description="–¢–∏–ø —Ç–µ—Å—Ç–∞")
    target_language: str = Field(default="ukrainian", description="–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫")
    question_count: int = Field(default=16, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    scoring_system: str = Field(default="3_point_scale", description="–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏")
    result_levels: int = Field(default=4, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è PatternShift
    methodology_level: str = Field(default="patternshift_full", description="–£—Ä–æ–≤–µ–Ω—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏")
    enable_vak_adaptation: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å VAK –∞–¥–∞–ø—Ç–∞—Ü–∏—é")
    enable_age_adaptation: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é")
    enable_language_adaptation: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫–æ–≤—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é")
    
    # –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    clinical_accuracy_required: bool = Field(default=True, description="–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    enable_urgent_marking: bool = Field(default=True, description="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    # Archon –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    archon_project_id: str = Field(
        default="c75ef8e3-6f4d-4da2-9e81-8d38d04a341a",
        description="ID –ø—Ä–æ–µ–∫—Ç–∞ Archon"
    )
    enable_rag_search: bool = Field(default=True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG –ø–æ–∏—Å–∫")
    rag_match_count: int = Field(default=5, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RAG")
    
    def get_language_tone(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫–æ–≤–æ–π —Ç–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞"""
        tone_map = {
            "ukrainian": "conversational_empathetic",
            "russian": "literary_supportive",
            "english": "clear_professional"
        }
        return tone_map.get(self.target_language, "neutral")
    
    def get_clinical_references(self, topic: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –¥–ª—è —Ç–µ–º—ã"""
        clinical_map = {
            "depression": "PHQ-9, Beck Depression Inventory",
            "anxiety": "GAD-7, Hamilton Anxiety Scale",
            "stress": "PSS-10, DASS-21",
            "trauma": "PCL-5, IES-R",
            "personality": "Big Five, MMPI-2",
            "cognitive": "MMSE, MoCA",
            "emotional": "EQ-i 2.0, Bar-On EQ"
        }
        return clinical_map.get(topic.lower(), "Custom Clinical Assessment")
    
    def get_vak_templates(self) -> Dict[str, Dict[str, List[str]]]:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã VAK –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        if not self.enable_vak_adaptation:
            return {}
        
        if self.target_language == "ukrainian":
            return {
                "visual": {
                    "keywords": ["–ø–æ–±–∞—á–∏—à", "—è—Å–∫—Ä–∞–≤–æ", "–æ–±—Ä–∞–∑", "–∫–∞—Ä—Ç–∏–Ω–∞"],
                    "metaphors": ["—Å–≤—ñ—Ç–ª–æ", "–∫–æ–ª—å–æ—Ä–∏", "—Ç—ñ–Ω—ñ"]
                },
                "auditory": {
                    "keywords": ["–ø–æ—á—É—î—à", "–≥–æ–ª–æ—Å", "–º–µ–ª–æ–¥—ñ—è", "—Ä–∏—Ç–º"],
                    "metaphors": ["–º—É–∑–∏–∫–∞", "—Ç–∏—à–∞", "–µ—Ö–æ"]
                },
                "kinesthetic": {
                    "keywords": ["–≤—ñ–¥—á—É–≤–∞—î—à", "—Ç–µ–ø–ª–æ", "–ª–µ–≥–∫–æ", "–≤–∞–∂–∫–æ"],
                    "metaphors": ["–¥–æ—Ç–∏–∫", "—Ä—É—Ö", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]
                }
            }
        else:
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
            return {
                "visual": {
                    "keywords": ["see", "bright", "picture", "image"],
                    "metaphors": ["light", "colors", "shadows"]
                },
                "auditory": {
                    "keywords": ["hear", "voice", "melody", "rhythm"],
                    "metaphors": ["music", "silence", "echo"]
                },
                "kinesthetic": {
                    "keywords": ["feel", "warm", "light", "heavy"],
                    "metaphors": ["touch", "movement", "temperature"]
                }
            }
    
    def get_age_adaptations(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        if not self.enable_age_adaptation:
            return {}
        
        if self.target_language == "ukrainian":
            return {
                "youth": {  # 18-25
                    "tone": "informal",
                    "slang": ["—á–µ–ª–ª–µ–Ω–¥–∂", "—Ç–æ–ø–æ–≤–æ", "–∫–∞–π—Ñ"],
                    "references": ["social_media", "trends", "gaming"]
                },
                "friendly": {  # 26-35
                    "tone": "conversational",
                    "slang": ["–∫—Ä—É—Ç–æ", "–¥–∞–≤–∞–π —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è"],
                    "references": ["work_life", "relationships", "goals"]
                },
                "professional": {  # 36+
                    "tone": "respectful",
                    "slang": ["—Ü—ñ–∫–∞–≤–æ", "–≤–∞—Ä—Ç–æ –∑–∞—É–≤–∞–∂–∏—Ç–∏"],
                    "references": ["experience", "wisdom", "stability"]
                }
            }
        else:
            return {
                "youth": {
                    "tone": "informal",
                    "slang": ["cool", "awesome", "vibe"],
                    "references": ["social_media", "trends", "gaming"]
                },
                "friendly": {
                    "tone": "conversational",
                    "slang": ["great", "let's figure it out"],
                    "references": ["work_life", "relationships", "goals"]
                },
                "professional": {
                    "tone": "respectful",
                    "slang": ["interesting", "worth noting"],
                    "references": ["experience", "wisdom", "stability"]
                }
            }
    
    def get_scoring_templates(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–∏—Å—Ç–µ–º –æ—Ü–µ–Ω–∫–∏"""
        scoring_templates = {
            "3_point_scale": {
                "values": [1, 2, 3],
                "labels": ["–Ω–∏–∫–æ–ª–∏", "–∏–Ω–æ–¥–∏", "—á–∞—Å—Ç–æ"] if self.target_language == "ukrainian" else ["never", "sometimes", "often"],
                "max_score": self.question_count * 3
            },
            "likert_5": {
                "values": [1, 2, 3, 4, 5],
                "labels": ["–ø–æ–≤–Ω—ñ—Å—Ç—é –Ω–µ –∑–≥–æ–¥–µ–Ω", "–Ω–µ –∑–≥–æ–¥–µ–Ω", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "–∑–≥–æ–¥–µ–Ω", "–ø–æ–≤–Ω—ñ—Å—Ç—é –∑–≥–æ–¥–µ–Ω"] if self.target_language == "ukrainian" else ["strongly disagree", "disagree", "neutral", "agree", "strongly agree"],
                "max_score": self.question_count * 5
            },
            "binary": {
                "values": [0, 1],
                "labels": ["–Ω—ñ", "—Ç–∞–∫"] if self.target_language == "ukrainian" else ["no", "yes"],
                "max_score": self.question_count
            }
        }
        return scoring_templates.get(self.scoring_system, scoring_templates["3_point_scale"])
    
    def get_result_level_templates(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã —É—Ä–æ–≤–Ω–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        max_score = self.get_scoring_templates()["max_score"]
        
        if self.result_levels == 2:
            return [
                {
                    "level": "low",
                    "range": [0, max_score // 2],
                    "color": "#10B981",
                    "emoji": "üòä"
                },
                {
                    "level": "high",
                    "range": [max_score // 2 + 1, max_score],
                    "color": "#EF4444",
                    "emoji": "üòî"
                }
            ]
        elif self.result_levels == 3:
            third = max_score // 3
            return [
                {
                    "level": "low",
                    "range": [0, third],
                    "color": "#10B981",
                    "emoji": "üòä"
                },
                {
                    "level": "moderate",
                    "range": [third + 1, third * 2],
                    "color": "#F59E0B",
                    "emoji": "üòê"
                },
                {
                    "level": "high",
                    "range": [third * 2 + 1, max_score],
                    "color": "#EF4444",
                    "emoji": "üòî"
                }
            ]
        else:  # 4 —É—Ä–æ–≤–Ω—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            quarter = max_score // 4
            return [
                {
                    "level": "minimal",
                    "range": [0, quarter],
                    "color": "#10B981",
                    "emoji": "üòä"
                },
                {
                    "level": "mild",
                    "range": [quarter + 1, quarter * 2],
                    "color": "#F59E0B",
                    "emoji": "üòê"
                },
                {
                    "level": "moderate",
                    "range": [quarter * 2 + 1, quarter * 3],
                    "color": "#EF4444",
                    "emoji": "üòî"
                },
                {
                    "level": "severe",
                    "range": [quarter * 3 + 1, max_score],
                    "color": "#DC2626",
                    "emoji": "üò¢",
                    "urgent": True
                }
            ]
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "test_domain": self.test_domain,
            "test_type": self.test_type,
            "target_language": self.target_language,
            "question_count": self.question_count,
            "scoring_system": self.scoring_system,
            "result_levels": self.result_levels,
            "methodology_level": self.methodology_level,
            "vak_enabled": self.enable_vak_adaptation,
            "age_enabled": self.enable_age_adaptation,
            "language_enabled": self.enable_language_adaptation
        }

def load_content_settings() -> ContentArchitectSettings:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    """
    try:
        return ContentArchitectSettings()
    except Exception as e:
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}"
        if "llm_api_key" in str(e).lower():
            error_msg += "\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LLM_API_KEY —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env"
        raise ValueError(error_msg) from e