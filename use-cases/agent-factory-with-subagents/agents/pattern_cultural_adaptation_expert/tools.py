"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Pattern Cultural Adaptation Expert Agent.

–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π
—Å —É—á–µ—Ç–æ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω—é–∞–Ω—Å–æ–≤.
"""

from typing import Dict, List, Any, Optional
from pydantic import BaseModel, Field
from pydantic_ai import RunContext

from .dependencies import (
    PatternCulturalAdaptationExpertDependencies,
    CultureType,
    ReligiousContext,
    CommunicationStyle,
    ValueSystem
)


class CulturalAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    content: str = Field(description="–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    target_culture: str = Field(description="–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
    content_type: str = Field(default="general", description="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    sensitivity_level: str = Field(default="moderate", description="–£—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


class AdaptationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    original_content: str = Field(description="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    target_culture: str = Field(description="–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
    adaptation_type: str = Field(description="–¢–∏–ø –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
    preserve_elements: List[str] = Field(default_factory=list, description="–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


class CulturalValidationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏."""
    adapted_content: str = Field(description="–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    target_culture: str = Field(description="–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
    validation_criteria: List[str] = Field(default_factory=list, description="–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")


class MetaphorAdaptationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –º–µ—Ç–∞—Ñ–æ—Ä."""
    original_metaphors: List[str] = Field(description="–ò—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã")
    target_culture: str = Field(description="–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞")
    context: str = Field(description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    emotional_tone: str = Field(default="neutral", description="–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω")


async def search_agent_knowledge(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    query: str,
    match_count: int = 5
) -> str:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        match_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Returns:
        –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP Archon –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        from ..common.mcp_tools import mcp_archon_rag_search_knowledge_base

        # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ–≥–∞–º–∏ –∞–≥–µ–Ω—Ç–∞
        enhanced_query = f"{query} {' '.join(ctx.deps.knowledge_tags)}"

        result = await mcp_archon_rag_search_knowledge_base(
            query=enhanced_query,
            match_count=match_count
        )

        if result["success"] and result["results"]:
            knowledge = "\n".join([
                f"**{r['metadata']['title']}:**\n{r['content']}"
                for r in result["results"]
            ])
            return f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:\n{knowledge}"
        else:
            # Fallback –ø–æ–∏—Å–∫
            fallback_result = await mcp_archon_rag_search_knowledge_base(
                query=f"cultural adaptation expert knowledge",
                match_count=3
            )

            if fallback_result["success"] and fallback_result["results"]:
                knowledge = "\n".join([
                    f"**{r['metadata']['title']}:**\n{r['content']}"
                    for r in fallback_result["results"]
                ])
                return f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (fallback –ø–æ–∏—Å–∫):\n{knowledge}"

            return """
‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –° –ü–û–ò–°–ö–û–ú –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô**

üîç **–ê–≥–µ–Ω—Ç:** Pattern Cultural Adaptation Expert
üìã **–¢–µ–≥–∏:** cultural_adaptation, cross_cultural_psychology, agent_knowledge
üéØ **–ó–∞–ø—Ä–æ—Å:** {query}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: "–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è", "–∫—Ä–æ—Å—Å-–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–º–µ—Ç–∞—Ñ–æ—Ä—ã", "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏"
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ Archon Knowledge Base

üõ†Ô∏è **–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
- –£–≤–∞–∂–µ–Ω–∏–µ –∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º —Ä–∞–∑–ª–∏—á–∏—è–º
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–µ—Ç–∞—Ñ–æ—Ä –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
- –£—á–µ—Ç —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}"


async def analyze_cultural_context(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    request: CulturalAnalysisRequest
) -> str:
    """
    –ê–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑

    Returns:
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        cultural_context = ctx.deps.get_cultural_context()
        target_culture = CultureType(request.target_culture)

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        analysis = {
            "cultural_elements": [],
            "potential_issues": [],
            "adaptation_needs": [],
            "recommendations": []
        }

        # –ü–æ–∏—Å–∫ –∫—É–ª—å—Ç—É—Ä–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        content_lower = request.content.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º
        if ctx.deps.cultural_profile:
            sensitive_topics = ctx.deps.cultural_profile.sensitive_topics
            for topic in sensitive_topics:
                if topic.lower() in content_lower:
                    analysis["potential_issues"].append(f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞: {topic}")

        # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞—Ñ–æ—Ä
        common_metaphors = ["–¥–æ—Ä–æ–≥–∞", "–¥–æ–º", "—Å–µ–º—å—è", "–¥–µ—Ä–µ–≤–æ", "—Ä–µ–∫–∞", "–≥–æ—Ä–∞"]
        found_metaphors = [m for m in common_metaphors if m in content_lower]
        if found_metaphors:
            analysis["cultural_elements"].extend(found_metaphors)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if target_culture == CultureType.UKRAINIAN:
            analysis["recommendations"].extend([
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –ø—Ä–∏—Ä–æ–¥—ã (–ø–æ–ª–µ, –¥—É–±, —Ä–µ–∫–∞)",
                "–£—á–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–π–Ω—ã –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            ])
        elif target_culture == CultureType.POLISH:
            analysis["recommendations"].extend([
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
                "–£—á–µ—Å—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å–µ–º–µ–π–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π",
                "–í–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç–∏"
            ])
        elif target_culture == CultureType.ENGLISH:
            analysis["recommendations"].extend([
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–µ—Ç—Å–∫–∏–µ, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã",
                "–§–æ–∫—É—Å –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö",
                "–ü—Ä—è–º–∞—è, –Ω–∏–∑–∫–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"
            ])

        return f"""
üìä **–ê–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞**

üéØ **–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞:** {request.target_culture}
üìù **–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {request.content_type}
‚ö° **–£—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {request.sensitivity_level}

üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:**
{chr(10).join(['- ' + element for element in analysis["cultural_elements"]]) if analysis["cultural_elements"] else "- –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"}

‚ö†Ô∏è **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
{chr(10).join(['- ' + issue for issue in analysis["potential_issues"]]) if analysis["potential_issues"] else "- –ü—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
{chr(10).join(['- ' + rec for rec in analysis["recommendations"]])}

üìã **–ü—Ä–æ—Ñ–∏–ª—å –∫—É–ª—å—Ç—É—Ä—ã:**
- –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {cultural_context.get('religious_context', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
- –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {cultural_context.get('communication_style', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
- –°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π: {cultural_context.get('value_system', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}"


async def adapt_content_culturally(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    request: AdaptationRequest
) -> str:
    """
    –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.

    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é

    Returns:
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
    """
    try:
        target_culture = CultureType(request.target_culture)
        cultural_context = ctx.deps.get_cultural_context()

        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        adaptation_principles = {
            CultureType.UKRAINIAN: {
                "metaphors": ["–ø–æ–ª–µ", "–¥—É–±", "–¥–æ–º–∞—à–Ω–∏–π –æ—á–∞–≥", "–¥–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π"],
                "values": ["—Å—Ç–æ–π–∫–æ—Å—Ç—å", "—Å–µ–º—å—è", "—Å–≤–æ–±–æ–¥–∞", "–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ"],
                "communication": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –æ–±—Ä–∞–∑–Ω—ã–π —Å—Ç–∏–ª—å",
                "examples": "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Ä–µ–∞–ª–∏–∏, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã"
            },
            CultureType.POLISH: {
                "metaphors": ["–∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã", "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è", "—Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏"],
                "values": ["—Ç—Ä–∞–¥–∏—Ü–∏—è", "–≤–µ—Ä–∞", "—Å–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç—å", "–≥–æ—Ä–¥–æ—Å—Ç—å"],
                "communication": "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
                "examples": "–ø–æ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –≥–µ—Ä–æ–∏"
            },
            CultureType.ENGLISH: {
                "metaphors": ["—Å–≤–µ—Ç—Å–∫–∏–µ", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏—Å—Ç—Å–∫–∏–µ"],
                "values": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
                "communication": "–ø—Ä—è–º–æ–π, –Ω–∏–∑–∫–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å",
                "examples": "–≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ"
            }
        }

        principles = adaptation_principles.get(target_culture, adaptation_principles[CultureType.ENGLISH])

        # –ü—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        adapted_content = request.original_content
        adaptation_notes = []

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–µ—Ç–∞—Ñ–æ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è)
        if "–¥–æ—Ä–æ–≥–∞" in request.original_content.lower():
            if target_culture == CultureType.UKRAINIAN:
                adapted_content = adapted_content.replace("–¥–æ—Ä–æ–≥–∞", "–¥–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π")
                adaptation_notes.append("–ú–µ—Ç–∞—Ñ–æ—Ä–∞ '–¥–æ—Ä–æ–≥–∞' –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ '–¥–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π' –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        if "—É—Å–ø–µ—Ö" in request.original_content.lower():
            if target_culture == CultureType.POLISH:
                adaptation_notes.append("–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —É—Å–ø–µ—Ö–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–º–µ–π–Ω—ã–º–∏ –∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏")

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if target_culture == CultureType.ENGLISH:
            adaptation_notes.append("–°—Ç–∏–ª—å —Å–¥–µ–ª–∞–Ω –±–æ–ª–µ–µ –ø—Ä—è–º—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–ª—è –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        elif target_culture == CultureType.UKRAINIAN:
            adaptation_notes.append("–î–æ–±–∞–≤–ª–µ–Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

        return f"""
üéØ **–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞**

üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**
{request.original_content}

‚ú® **–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**
{adapted_content}

üîß **–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
- –ú–µ—Ç–∞—Ñ–æ—Ä—ã: {', '.join(principles['metaphors'])}
- –¶–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(principles['values'])}
- –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {principles['communication']}
- –ü—Ä–∏–º–µ—Ä—ã: {principles['examples']}

üìã **–í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
{chr(10).join(['- ' + note for note in adaptation_notes]) if adaptation_notes else "- –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"}

‚úÖ **–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã:**
{', '.join(request.preserve_elements) if request.preserve_elements else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}

üéØ **–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞:** {request.target_culture}
üìä **–¢–∏–ø –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:** {request.adaptation_type}
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}"


async def validate_cultural_appropriateness(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    request: CulturalValidationRequest
) -> str:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        target_culture = CultureType(request.target_culture)
        cultural_context = ctx.deps.get_cultural_context()

        validation_results = {
            "cultural_sensitivity": True,
            "religious_appropriateness": True,
            "language_appropriateness": True,
            "stereotype_avoidance": True,
            "overall_score": 0.0,
            "issues": [],
            "recommendations": []
        }

        content_lower = request.adapted_content.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º
        if ctx.deps.cultural_profile:
            sensitive_topics = ctx.deps.cultural_profile.sensitive_topics
            for topic in sensitive_topics:
                if topic.lower() in content_lower:
                    validation_results["issues"].append(f"–°–æ–¥–µ—Ä–∂–∏—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º—É: {topic}")
                    validation_results["cultural_sensitivity"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏
        religious_context = ctx.deps.cultural_profile.religious_context if ctx.deps.cultural_profile else None
        if religious_context == ReligiousContext.ORTHODOX:
            if any(word in content_lower for word in ["–∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–π", "–ø—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç—Å–∫–∏–π"]):
                validation_results["issues"].append("–í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
                validation_results["religious_appropriateness"] = False
        elif religious_context == ReligiousContext.CATHOLIC:
            if any(word in content_lower for word in ["–ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π", "–ø—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç—Å–∫–∏–π"]):
                validation_results["issues"].append("–í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
                validation_results["religious_appropriateness"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤
        stereotype_words = ["–≤—Å–µ —É–∫—Ä–∞–∏–Ω—Ü—ã", "–≤—Å–µ –ø–æ–ª—è–∫–∏", "—Ç–∏–ø–∏—á–Ω—ã–π", "–æ–±—ã—á–Ω–æ –æ–Ω–∏"]
        for word in stereotype_words:
            if word in content_lower:
                validation_results["issues"].append(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø: {word}")
                validation_results["stereotype_avoidance"] = False

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
        scores = [
            validation_results["cultural_sensitivity"],
            validation_results["religious_appropriateness"],
            validation_results["language_appropriateness"],
            validation_results["stereotype_avoidance"]
        ]
        validation_results["overall_score"] = sum(scores) / len(scores)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if not validation_results["cultural_sensitivity"]:
            validation_results["recommendations"].append("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º")

        if not validation_results["religious_appropriateness"]:
            validation_results["recommendations"].append("–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–¥ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é")

        if not validation_results["stereotype_avoidance"]:
            validation_results["recommendations"].append("–ò–∑–±–µ–≥–∞—Ç—å –æ–±–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤")

        if validation_results["overall_score"] == 1.0:
            validation_results["recommendations"].append("–ö–æ–Ω—Ç–µ–Ω—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

        return f"""
‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏**

üéØ **–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞:** {request.target_culture}
üìä **–û–±—â–∏–π –±–∞–ª–ª:** {validation_results["overall_score"]:.1%}

üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:**
- –ö—É–ª—å—Ç—É—Ä–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if validation_results["cultural_sensitivity"] else '‚ùå'}
- –†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç—å: {'‚úÖ' if validation_results["religious_appropriateness"] else '‚ùå'}
- –Ø–∑—ã–∫–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if validation_results["language_appropriateness"] else '‚úÖ'}
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤: {'‚úÖ' if validation_results["stereotype_avoidance"] else '‚ùå'}

‚ö†Ô∏è **–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
{chr(10).join(['- ' + issue for issue in validation_results["issues"]]) if validation_results["issues"] else "- –ü—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join(['- ' + rec for rec in validation_results["recommendations"]])}

üìã **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**
{', '.join(request.validation_criteria) if request.validation_criteria else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏"}

üéØ **–°—Ç–∞—Ç—É—Å:** {'–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é' if validation_results["overall_score"] >= 0.8 else '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏: {e}"


async def adapt_metaphors_culturally(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    request: MetaphorAdaptationRequest
) -> str:
    """
    –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–µ—Ç–∞—Ñ–æ—Ä –ø–æ–¥ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.

    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –º–µ—Ç–∞—Ñ–æ—Ä

    Returns:
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    """
    try:
        target_culture = CultureType(request.target_culture)

        # –ö—É–ª—å—Ç—É—Ä–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
        cultural_metaphors = {
            CultureType.UKRAINIAN: {
                "–ø—Ä–∏—Ä–æ–¥–∞": ["–ø–æ–ª–µ", "–¥—É–±", "—Ä–µ–∫–∞", "—Å—Ç–µ–ø—å", "–∑–µ–º–ª—è"],
                "–¥–æ–º": ["–¥–æ–º–∞—à–Ω–∏–π –æ—á–∞–≥", "—Ä–æ–¥–Ω–∞—è —Ö–∞—Ç–∞", "–ø–æ—Ä–æ–≥"],
                "–ø—É—Ç—å": ["–¥–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π", "—Ç—Ä–æ–ø–∏–Ω–∫–∞", "–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫"],
                "—Å–∏–ª–∞": ["–∫–æ–∑–∞—Ü–∫–∞—è —Å–∏–ª–∞", "—Å—Ç–æ–π–∫–æ—Å—Ç—å –¥—É–±–∞", "—Ç–µ—á–µ–Ω–∏–µ —Ä–µ–∫–∏"],
                "—Ä–æ—Å—Ç": ["–∫–æ–ª–æ—Å–æ–∫", "—Ä–æ—Å—Ç–æ–∫", "—Ü–≤–µ—Ç–µ–Ω–∏–µ"]
            },
            CultureType.POLISH: {
                "–ø—Ä–∏—Ä–æ–¥–∞": ["–±–µ–ª—ã–π –æ—Ä–µ–ª", "–≤–∏—Å–ª–∞", "–ª–µ—Å–∞", "–ø–æ–ª—è"],
                "–¥–æ–º": ["—Ä–æ–¥–Ω–æ–π –¥–æ–º", "—Å–µ–º–µ–π–Ω—ã–π –æ—á–∞–≥", "–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ"],
                "–ø—É—Ç—å": ["–ø–∞–ª–æ–º–Ω–∏—á–µ—Å—Ç–≤–æ", "–∫—Ä–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å", "–¥–æ—Ä–æ–≥–∞ –∫ —É—Å–ø–µ—Ö—É"],
                "—Å–∏–ª–∞": ["—Å–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç—å", "–µ–¥–∏–Ω—Å—Ç–≤–æ", "–≤–µ—Ä–∞"],
                "—Ä–æ—Å—Ç": ["–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–¥—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç"]
            },
            CultureType.ENGLISH: {
                "–ø—Ä–∏—Ä–æ–¥–∞": ["mountain", "ocean", "forest", "garden"],
                "–¥–æ–º": ["home", "foundation", "cornerstone"],
                "–ø—É—Ç—å": ["journey", "pathway", "road to success"],
                "—Å–∏–ª–∞": ["inner strength", "resilience", "empowerment"],
                "—Ä–æ—Å—Ç": ["growth", "development", "evolution"]
            }
        }

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –º–µ—Ç–∞—Ñ–æ—Ä—ã
        adaptations = []
        culture_metaphors = cultural_metaphors.get(target_culture, cultural_metaphors[CultureType.ENGLISH])

        for original_metaphor in request.original_metaphors:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã
            category = "–æ–±—â–∞—è"
            for cat, metaphors in culture_metaphors.items():
                if any(m in original_metaphor.lower() for m in metaphors):
                    category = cat
                    break

            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞–º–µ–Ω—ã
            if category in culture_metaphors:
                suitable_metaphors = culture_metaphors[category]
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                adapted = suitable_metaphors[0] if suitable_metaphors else original_metaphor
            else:
                adapted = original_metaphor

            adaptations.append({
                "original": original_metaphor,
                "adapted": adapted,
                "category": category,
                "reason": f"–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {target_culture.value} –∫—É–ª—å—Ç—É—Ä—ã"
            })

        return f"""
üé® **–ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–µ—Ç–∞—Ñ–æ—Ä**

üéØ **–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞:** {request.target_culture}
üìù **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {request.context}
üí≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:** {request.emotional_tone}

üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**

{chr(10).join([
    f"- **{a['original']}** ‚Üí **{a['adapted']}**" + chr(10) +
    f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {a['category']}" + chr(10) +
    f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {a['reason']}" + chr(10)
    for a in adaptations
])}

üí° **–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤–æ–≥–æ —è–¥—Ä–∞ –º–µ—Ç–∞—Ñ–æ—Ä—ã
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–±–ª–∏–∑–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤
- –£—á–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
- –£—á–µ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫—É–ª—å—Ç—É—Ä—ã
- –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–µ—Ç–∞—Ñ–æ—Ä: {e}"


async def generate_cultural_examples(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    topic: str,
    target_culture: str,
    context: str = "general",
    example_count: int = 3
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä–Ω–æ-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.

    Args:
        topic: –¢–µ–º–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        example_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤

    Returns:
        –ö—É–ª—å—Ç—É—Ä–Ω–æ-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    """
    try:
        culture_type = CultureType(target_culture)

        # –ö—É–ª—å—Ç—É—Ä–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        cultural_examples = {
            CultureType.UKRAINIAN: {
                "—Å—Ç—Ä–µ—Å—Å": [
                    "–ö–∞–∫ –∫–æ–∑–∞–∫ –ø–µ—Ä–µ–¥ –±–∏—Ç–≤–æ–π —Å–æ–±–∏—Ä–∞–ª —Å–∏–ª—ã",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–∞–∂–Ω–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–º—å–∏ –≤ —Ç—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞"
                ],
                "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è": [
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞ –≤ –ö–∏–µ–≤—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ",
                    "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤–æ –õ—å–≤–æ–≤–µ",
                    "–í–æ—Å—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ–º—å–µ–π –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π —Ä–∞–∑–ª—É–∫–∏"
                ],
                "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": [
                    "–ö—Ä–µ–ø–∫–∞—è –¥—Ä—É–∂–±–∞, –∫–∞–∫ –º–µ–∂–¥—É –ø–æ–±—Ä–∞—Ç–∏–º–∞–º–∏",
                    "–ó–∞–±–æ—Ç–∞ –æ –ø–æ–∂–∏–ª—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è—Ö –≤ —Å–µ–ª–µ",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Å–µ–¥–µ–π –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É"
                ]
            },
            CultureType.POLISH: {
                "—Å—Ç—Ä–µ—Å—Å": [
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–∞–∂–Ω–æ–º—É —Å–µ–º–µ–π–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é",
                    "–°–¥–∞—á–∞ —ç–∫–∑–∞–º–µ–Ω–∞ –≤ –∫—Ä–∞–∫–æ–≤—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ",
                    "–ü—Ä–∏–Ω—è—Ç–∏–µ –≤–∞–∂–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"
                ],
                "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è": [
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
                    "–ü–æ–∫—É–ø–∫–∞ –ø–µ—Ä–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –í–∞—Ä—à–∞–≤–µ",
                    "–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
                ],
                "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": [
                    "–ö—Ä–µ–ø–∫–∏–µ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ –≤–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –æ–±–µ–¥—ã",
                    "–î—Ä—É–∂–±–∞ —Å–æ —à–∫–æ–ª—å–Ω—ã—Ö –ª–µ—Ç",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ—Ä–∫–æ–≤–Ω–æ–π –æ–±—â–∏–Ω—ã"
                ]
            },
            CultureType.ENGLISH: {
                "—Å—Ç—Ä–µ—Å—Å": [
                    "Preparing for a job interview",
                    "Managing work-life balance",
                    "Dealing with social media pressure"
                ],
                "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è": [
                    "Getting promoted at work",
                    "Completing a marathon",
                    "Learning a new skill online"
                ],
                "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": [
                    "Building professional networks",
                    "Maintaining long-distance friendships",
                    "Dating in the digital age"
                ]
            }
        }

        examples = cultural_examples.get(culture_type, cultural_examples[CultureType.ENGLISH])
        topic_examples = examples.get(topic.lower(), [f"–ü—Ä–∏–º–µ—Ä {i+1} –¥–ª—è —Ç–µ–º—ã '{topic}'" for i in range(example_count)])

        # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        selected_examples = topic_examples[:example_count]

        return f"""
üí° **–ö—É–ª—å—Ç—É—Ä–Ω–æ-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã**

üéØ **–¢–µ–º–∞:** {topic}
üåç **–ö—É–ª—å—Ç—É—Ä–∞:** {target_culture}
üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}

üìù **–ü—Ä–∏–º–µ—Ä—ã:**

{chr(10).join([f"{i+1}. {example}" for i, example in enumerate(selected_examples)])}

üîç **–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–¥–±–æ—Ä–∞:**
- –ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –Ω–æ—Ä–º–∞–º –∫—É–ª—å—Ç—É—Ä—ã
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
- –ò–∑–±–µ–≥–∞–Ω–∏–µ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤ –∏ –æ–±–æ–±—â–µ–Ω–∏–π

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –£—á–∏—Ç—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
- –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {e}"