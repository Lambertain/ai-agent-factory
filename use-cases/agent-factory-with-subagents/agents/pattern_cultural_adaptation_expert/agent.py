"""
Pattern Cultural Adaptation Expert Agent.

–ê–≥–µ–Ω—Ç –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π —Å —É—á–µ—Ç–æ–º
–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω—é–∞–Ω—Å–æ–≤.
"""

import asyncio
from typing import Dict, Any, Optional, Union
from pydantic_ai import Agent, RunContext
from pydantic_ai.providers.openai import OpenAIProvider
from pydantic_ai.models.openai import OpenAIModel

from .dependencies import (
    PatternCulturalAdaptationExpertDependencies,
    PatternShiftCulture,
    PatternShiftReligion,
    PatternShiftPhase,
    ModuleType,
    PATTERNSHIFT_UKRAINIAN_CONFIG,
    PATTERNSHIFT_POLISH_CONFIG,
    PATTERNSHIFT_ENGLISH_CONFIG
)
from .settings import load_settings, get_settings
from .prompts import get_system_prompt
from .tools import (
    search_agent_knowledge,
    analyze_cultural_context,
    adapt_content_culturally,
    validate_cultural_appropriateness,
    adapt_metaphors_culturally,
    generate_cultural_examples,
    delegate_to_pattern_agent,
    # –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    process_user_registration,
    get_registration_questionnaire,
    update_user_cultural_profile,
    validate_cultural_assignment,
    # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    CulturalAnalysisRequest,
    AdaptationRequest,
    CulturalValidationRequest,
    MetaphorAdaptationRequest,
    UserRegistrationData,
    CulturalProfileUpdateRequest
)


def get_llm_model():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å LLM."""
    settings = get_settings()
    provider = OpenAIProvider(
        base_url=settings.llm_base_url,
        api_key=settings.llm_api_key
    )
    return OpenAIModel(settings.llm_model, provider=provider)


# –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
agent = Agent(
    get_llm_model(),
    deps_type=PatternCulturalAdaptationExpertDependencies,
    system_prompt=get_system_prompt()
)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
agent.tool(search_agent_knowledge)
agent.tool(analyze_cultural_context)
agent.tool(adapt_content_culturally)
agent.tool(validate_cultural_appropriateness)
agent.tool(adapt_metaphors_culturally)
agent.tool(generate_cultural_examples)
agent.tool(delegate_to_pattern_agent)

# –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
agent.tool(process_user_registration)
agent.tool(get_registration_questionnaire)
agent.tool(update_user_cultural_profile)
agent.tool(validate_cultural_assignment)


@agent.tool
async def set_target_patternshift_culture(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    culture: str,
    phase: str = "beginning",
    update_profile: bool = True
) -> str:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É PatternShift –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

    Args:
        culture: –ö–æ–¥ –∫—É–ª—å—Ç—É—Ä—ã PatternShift (ukrainian, polish, english)
        phase: –§–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã (beginning, development, integration)
        update_profile: –û–±–Ω–æ–≤–∏—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å

    Returns:
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    try:
        culture_type = PatternShiftCulture(culture.lower())
        phase_type = PatternShiftPhase(phase.lower())

        if culture_type not in ctx.deps.supported_cultures:
            return f"‚ùå –ö—É–ª—å—Ç—É—Ä–∞ '{culture}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ PatternShift. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {[c.value for c in ctx.deps.supported_cultures]}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ —Ñ–∞–∑—É
        ctx.deps.target_culture = culture_type
        if update_profile and ctx.deps.cultural_profile:
            ctx.deps.cultural_profile.culture = culture_type
            ctx.deps.cultural_profile.phase = phase_type

        return f"""
‚úÖ **PatternShift –∫—É–ª—å—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {culture_type.value}**
üìÖ **–§–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {phase_type.value}**

üìã **PatternShift –ø—Ä–æ—Ñ–∏–ª—å:**
- –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {ctx.deps.cultural_profile.religion.value if ctx.deps.cultural_profile else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- –ü—Ä–æ–≥—Ä–∞–º–º–∞: 21-–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Program‚ÜíPhase‚ÜíDay‚ÜíSession‚ÜíActivity‚ÜíModule

‚ö†Ô∏è **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã:**
{chr(10).join(['- ' + topic for topic in ctx.deps.cultural_profile.sensitive_topics]) if ctx.deps.cultural_profile else '- –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}

üéØ **–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã:**
{chr(10).join(['- ' + metaphor for metaphor in ctx.deps.cultural_profile.preferred_metaphors]) if ctx.deps.cultural_profile else '- –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}

‚ú® **–ì–æ—Ç–æ–≤ –∫ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ PatternShift –º–æ–¥—É–ª–µ–π –¥–ª—è {culture_type.value} –∞—É–¥–∏—Ç–æ—Ä–∏–∏!**
"""

    except ValueError as e:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—É–ª—å—Ç—É—Ä—ã –∏–ª–∏ —Ñ–∞–∑—ã: {culture}/{phase}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã: ukrainian, polish, english. –§–∞–∑—ã: beginning, development, integration"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã: {e}"


@agent.tool
async def get_adaptation_recommendations(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    content_type: str,
    target_audience: str = "general",
    sensitivity_level: str = "moderate"
) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Args:
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (therapy, education, self_help, training)
        target_audience: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (adults, teens, elderly, professionals)
        sensitivity_level: –£—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (low, moderate, high)

    Returns:
        –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    """
    try:
        cultural_context = ctx.deps.get_patternshift_cultural_context()
        target_culture = ctx.deps.target_culture

        recommendations = {
            "metaphor_guidelines": [],
            "communication_style": [],
            "content_adjustments": [],
            "cultural_elements": [],
            "avoidance_list": []
        }

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º
        if target_culture == PatternShiftCulture.UKRAINIAN:
            recommendations["metaphor_guidelines"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã: –ø–æ–ª–µ, –¥—É–±, —Ä–µ–∫–∞",
                "–í–∫–ª—é—á–∞–π—Ç–µ –æ–±—Ä–∞–∑—ã –¥–æ–º–∞ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—á–∞–≥–∞",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –ø—É—Ç–∏ –∏ –¥–æ—Ä–æ–≥–∏ –¥–æ–º–æ–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑—ã —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏"
            ])
        elif target_culture == PatternShiftCulture.POLISH:
            recommendations["metaphor_guidelines"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏ —Å–∏–º–≤–æ–ª—ã",
                "–í–∫–ª—é—á–∞–π—Ç–µ —Å–µ–º–µ–π–Ω—ã–µ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑—ã —Å–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –µ–¥–∏–Ω—Å—Ç–≤–∞"
            ])
        elif target_culture == PatternShiftCulture.ENGLISH:
            recommendations["metaphor_guidelines"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ—Ç—Å–∫–∏–µ, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã",
                "–í–∫–ª—é—á–∞–π—Ç–µ –æ–±—Ä–∞–∑—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –±–∏–∑–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã"
            ])

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if cultural_context.get('communication_style') == 'high_context':
            recommendations["communication_style"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–ø—Ä—è–º—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é",
                "–í–∫–ª—é—á–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∏—Ç—á–∏"
            ])
        elif cultural_context.get('communication_style') == 'low_context':
            recommendations["communication_style"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é",
                "–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ —Ç–æ—á–Ω—ã",
                "–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ"
            ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
        if target_audience == "elderly":
            recommendations["content_adjustments"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑—ã",
                "–í–∫–ª—é—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã",
                "–ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–µ–Ω–≥–∞",
                "–£–≤–∞–∂–∞–π—Ç–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç"
            ])
        elif target_audience == "teens":
            recommendations["content_adjustments"].extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã",
                "–í–∫–ª—é—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã",
                "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –º–µ–∂–ø–æ–∫–æ–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è"
            ])

        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è
        sensitive_topics = cultural_context.get('sensitive_topics', [])
        if sensitive_topics:
            recommendations["avoidance_list"].extend([
                f"–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {', '.join(sensitive_topics)}",
                "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏",
                "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "–ò–∑–±–µ–≥–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤"
            ])

        return f"""
üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏**

üìã **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target_audience}
- –£—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {sensitivity_level}
- –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {target_culture.value}

üé® **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º:**
{chr(10).join(['- ' + rec for rec in recommendations["metaphor_guidelines"]])}

üí¨ **–°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:**
{chr(10).join(['- ' + rec for rec in recommendations["communication_style"]])}

üìù **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
{chr(10).join(['- ' + rec for rec in recommendations["content_adjustments"]])}

‚ö†Ô∏è **–ß—Ç–æ –∏–∑–±–µ–≥–∞—Ç—å:**
{chr(10).join(['- ' + rec for rec in recommendations["avoidance_list"]])}

‚úÖ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
4. –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}"


@agent.tool
async def comprehensive_cultural_analysis(
    ctx: RunContext[PatternCulturalAdaptationExpertDependencies],
    content: str,
    target_culture: str,
    include_suggestions: bool = True
) -> str:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

    Args:
        content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        include_suggestions: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

    Returns:
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        # –ê–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        analysis_request = CulturalAnalysisRequest(
            content=content,
            target_culture=target_culture,
            content_type="comprehensive",
            sensitivity_level="high"
        )

        analysis_result = await analyze_cultural_context(ctx, analysis_request)

        result = f"üîç **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n{analysis_result}"

        if include_suggestions:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            adaptation_recs = await get_adaptation_recommendations(
                ctx,
                content_type="comprehensive",
                target_audience="general",
                sensitivity_level="high"
            )

            result += f"\n\n{adaptation_recs}"

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            if "—Å—Ç—Ä–µ—Å—Å" in content.lower() or "—Ç—Ä–µ–≤–æ–≥–∞" in content.lower():
                examples = await generate_cultural_examples(
                    ctx,
                    topic="—Å—Ç—Ä–µ—Å—Å",
                    target_culture=target_culture,
                    context="therapy"
                )
                result += f"\n\nüìö **–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–º—ã —Å—Ç—Ä–µ—Å—Å–∞:**\n{examples}"

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}"


async def run_pattern_cultural_adaptation_expert(
    user_message: str,
    target_culture: str = "universal",
    api_key: Optional[str] = None,
    **kwargs
) -> str:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        api_key: API –∫–ª—é—á (–µ—Å–ª–∏ –Ω–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if api_key:
            deps = create_pattern_cultural_adaptation_dependencies(
                api_key=api_key,
                target_culture=PatternShiftCulture(target_culture),
                **kwargs
            )
        else:
            settings = get_settings()
            deps = create_pattern_cultural_adaptation_dependencies(
                api_key=settings.llm_api_key,
                target_culture=PatternShiftCulture(target_culture),
                **kwargs
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–¥ –∫—É–ª—å—Ç—É—Ä—É
        culture_type = PatternShiftCulture(target_culture)
        system_prompt = get_system_prompt()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        cultural_agent = Agent(
            get_llm_model(),
            deps_type=PatternCulturalAdaptationExpertDependencies,
            system_prompt=system_prompt
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        cultural_agent.tool(search_agent_knowledge)
        cultural_agent.tool(analyze_cultural_context)
        cultural_agent.tool(adapt_content_culturally)
        cultural_agent.tool(validate_cultural_appropriateness)
        cultural_agent.tool(adapt_metaphors_culturally)
        cultural_agent.tool(generate_cultural_examples)
        cultural_agent.tool(set_target_patternshift_culture)
        cultural_agent.tool(get_adaptation_recommendations)
        cultural_agent.tool(comprehensive_cultural_analysis)
        cultural_agent.tool(delegate_to_pattern_agent)

        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        result = await cultural_agent.run(user_message, deps=deps)
        return result.data

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}"


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def analyze_content_for_culture(
    content: str,
    target_culture: str = "universal",
    api_key: Optional[str] = None
) -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã.

    Args:
        content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        api_key: API –∫–ª—é—á

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    message = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {target_culture} –∫—É–ª—å—Ç—É—Ä—ã:\n\n{content}"
    return await run_pattern_cultural_adaptation_expert(
        message,
        target_culture=target_culture,
        api_key=api_key
    )


async def adapt_content_for_culture(
    content: str,
    target_culture: str = "universal",
    adaptation_type: str = "moderate",
    api_key: Optional[str] = None
) -> str:
    """
    –ë—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –∫—É–ª—å—Ç—É—Ä—É.

    Args:
        content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        adaptation_type: –¢–∏–ø –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        api_key: API –∫–ª—é—á

    Returns:
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    """
    message = f"–ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {target_culture} –∫—É–ª—å—Ç—É—Ä—ã (—É—Ä–æ–≤–µ–Ω—å: {adaptation_type}):\n\n{content}"
    return await run_pattern_cultural_adaptation_expert(
        message,
        target_culture=target_culture,
        api_key=api_key
    )


async def validate_cultural_content(
    content: str,
    target_culture: str = "universal",
    api_key: Optional[str] = None
) -> str:
    """
    –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏.

    Args:
        content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        target_culture: –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        api_key: API –∫–ª—é—á

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    message = f"–ü—Ä–æ–≤–µ–¥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏ –¥–ª—è {target_culture} –∫—É–ª—å—Ç—É—Ä—ã:\n\n{content}"
    return await run_pattern_cultural_adaptation_expert(
        message,
        target_culture=target_culture,
        api_key=api_key
    )


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "agent",
    "run_pattern_cultural_adaptation_expert",
    "analyze_content_for_culture",
    "adapt_content_for_culture",
    "validate_cultural_content",
    "PatternCulturalAdaptationExpertDependencies",
    "CultureType",
    "CulturalAnalysisRequest",
    "AdaptationRequest",
    "CulturalValidationRequest",
    "MetaphorAdaptationRequest"
]