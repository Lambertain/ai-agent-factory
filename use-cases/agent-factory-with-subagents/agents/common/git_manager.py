# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Git –∫–æ–º–º–∏—Ç–∞–º–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ —Ñ–∞–±—Ä–∏–∫–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –≤ –∫–æ–Ω—Ü–µ –∑–∞–¥–∞—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π push
"""

import os
import sys
import subprocess
import logging
import json
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class GitCommitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git –∫–æ–º–º–∏—Ç–æ–≤"""
    auto_commit_enabled: bool = True
    auto_push_enabled: bool = True
    commits_until_push: int = 5  # –ê–≤—Ç–æ–ø—É—à –∫–∞–∂–¥—ã–µ 5 –∫–æ–º–º–∏—Ç–æ–≤
    backup_enabled: bool = True
    backup_dir: str = ""  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
    commit_message_template: str = "feat: {task_description}\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"

    def __post_init__(self):
        if not self.backup_dir:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            project_root = Path.cwd()
            self.backup_dir = str(project_root / ".git_backups")

@dataclass
class GitCommitStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Git –∫–æ–º–º–∏—Ç–æ–≤"""
    total_commits: int = 0
    commits_since_push: int = 0
    last_commit_hash: str = ""
    last_push_time: datetime = field(default_factory=datetime.now)
    last_backup_time: datetime = field(default_factory=datetime.now)
    failed_commits: List[str] = field(default_factory=list)
    failed_pushes: List[str] = field(default_factory=list)

class GitManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö Git –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ —Ñ–∞–±—Ä–∏–∫–∏

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π push –∫–∞–∂–¥—ã–µ N –∫–æ–º–º–∏—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –ø–µ—Ä–µ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∏–∫—Ä–æ–∑–∞–¥–∞—á
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–º–∏—Ç–æ–≤
    """

    def __init__(self, config: Optional[GitCommitConfig] = None):
        self.config = config or GitCommitConfig()
        self.stats = GitCommitStats()
        self.stats_file = Path.cwd() / ".git_stats.json"
        self.load_stats()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.repo_root = self._find_git_repo()
        if not self.repo_root:
            logger.warning("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            self.config.auto_commit_enabled = False

    def _find_git_repo(self) -> Optional[Path]:
        """–ù–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        current = Path.cwd()

        while current != current.parent:
            if (current / ".git").exists():
                return current
            current = current.parent

        return None

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.stats_file.exists():
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                self.stats.total_commits = data.get('total_commits', 0)
                self.stats.commits_since_push = data.get('commits_since_push', 0)
                self.stats.last_commit_hash = data.get('last_commit_hash', '')

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                last_push_str = data.get('last_push_time')
                if last_push_str:
                    self.stats.last_push_time = datetime.fromisoformat(last_push_str)

                last_backup_str = data.get('last_backup_time')
                if last_backup_str:
                    self.stats.last_backup_time = datetime.fromisoformat(last_backup_str)

                self.stats.failed_commits = data.get('failed_commits', [])
                self.stats.failed_pushes = data.get('failed_pushes', [])

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Git: {e}")

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'total_commits': self.stats.total_commits,
                'commits_since_push': self.stats.commits_since_push,
                'last_commit_hash': self.stats.last_commit_hash,
                'last_push_time': self.stats.last_push_time.isoformat(),
                'last_backup_time': self.stats.last_backup_time.isoformat(),
                'failed_commits': self.stats.failed_commits,
                'failed_pushes': self.stats.failed_pushes
            }

            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Git: {e}")

    def _run_git_command(self, command: List[str], cwd: Optional[Path] = None) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å git –∫–æ–º–∞–Ω–¥—É"""
        try:
            if cwd is None:
                cwd = self.repo_root

            result = subprocess.run(
                command,
                cwd=cwd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=30
            )

            if result.returncode == 0:
                return True, result.stdout.strip()
            else:
                return False, result.stderr.strip()

        except subprocess.TimeoutExpired:
            return False, "Git –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç"
        except Exception as e:
            return False, str(e)

    def check_git_status(self) -> Tuple[bool, Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not self.repo_root:
            return False, {"error": "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        success, output = self._run_git_command(['git', 'status', '--porcelain'])
        if not success:
            return False, {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {output}"}

        # –ü–∞—Ä—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = []
        if output:
            for line in output.split('\n'):
                if line.strip():
                    status = line[:2]
                    filename = line[3:].strip()
                    changes.append({"status": status, "file": filename})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        success, branch = self._run_git_command(['git', 'branch', '--show-current'])
        if not success:
            branch = "unknown"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, remote_status = self._run_git_command(['git', 'status', '-sb'])

        return True, {
            "branch": branch,
            "changes": changes,
            "has_changes": len(changes) > 0,
            "commits_since_push": self.stats.commits_since_push,
            "remote_status": remote_status if success else "unknown"
        }

    def create_backup(self, backup_name: str = "") -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not self.config.backup_enabled or not self.repo_root:
            return False, "–ë—ç–∫–∞–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            backup_dir = Path(self.config.backup_dir)
            backup_dir.mkdir(exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –±—ç–∫–∞–ø–∞
            if not backup_name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"auto_backup_{timestamp}"

            backup_path = backup_dir / f"{backup_name}.zip"

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
            success, output = self._run_git_command([
                'git', 'archive',
                '--format=zip',
                f'--output={backup_path}',
                'HEAD'
            ])

            if success:
                self.stats.last_backup_time = datetime.now()
                self.save_stats()
                return True, f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}"
            else:
                return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {output}"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}"

    def auto_commit_task_completion(self, task_description: str, files_changed: Optional[List[str]] = None) -> Tuple[bool, str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏

        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            files_changed: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ)

        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if not self.config.auto_commit_enabled or not self.repo_root:
            return False, "–ê–≤—Ç–æ–∫–æ–º–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            status_ok, status_info = self.check_git_status()
            if not status_ok:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {status_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

            if not status_info.get('has_changes', False):
                return False, "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"

            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
            if self.config.backup_enabled:
                backup_success, backup_msg = self.create_backup(f"before_commit_{datetime.now().strftime('%H%M%S')}")
                if backup_success:
                    logger.info(backup_msg)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            if files_changed:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
                for file_path in files_changed:
                    success, output = self._run_git_command(['git', 'add', file_path])
                    if not success:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_path}: {output}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                success, output = self._run_git_command(['git', 'add', '.'])
                if not success:
                    return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã: {output}"

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            commit_message = self.config.commit_message_template.format(
                task_description=task_description
            )

            success, output = self._run_git_command(['git', 'commit', '-m', commit_message])
            if not success:
                error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {output}"
                self.stats.failed_commits.append(f"{datetime.now().isoformat()}: {error_msg}")
                self.save_stats()
                return False, error_msg

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.total_commits += 1
            self.stats.commits_since_push += 1

            # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∫–æ–º–º–∏—Ç–∞
            success, commit_hash = self._run_git_command(['git', 'rev-parse', 'HEAD'])
            if success:
                self.stats.last_commit_hash = commit_hash[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à

            self.save_stats()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–ø—É—à
            commit_info = f"–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {self.stats.last_commit_hash}"
            if self.stats.commits_since_push >= self.config.commits_until_push:
                push_success, push_msg = self.auto_push()
                if push_success:
                    commit_info += f"\n–ê–≤—Ç–æ–ø—É—à –≤—ã–ø–æ–ª–Ω–µ–Ω: {push_msg}"
                else:
                    commit_info += f"\n–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É—à–∞: {push_msg}"
            else:
                remaining = self.config.commits_until_push - self.stats.commits_since_push
                commit_info += f"\n–î–æ –∞–≤—Ç–æ–ø—É—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–º–∏—Ç–æ–≤: {remaining}"

            return True, commit_info

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞: {e}"
            self.stats.failed_commits.append(f"{datetime.now().isoformat()}: {error_msg}")
            self.save_stats()
            return False, error_msg

    def auto_push(self) -> Tuple[bool, str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π push –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if not self.config.auto_push_enabled or not self.repo_root:
            return False, "–ê–≤—Ç–æ–ø—É—à –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            success, branch = self._run_git_command(['git', 'branch', '--show-current'])
            if not success:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É: {branch}"

            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            success, output = self._run_git_command(['git', 'push', 'origin', branch])
            if not success:
                error_msg = f"–û—à–∏–±–∫–∞ push: {output}"
                self.stats.failed_pushes.append(f"{datetime.now().isoformat()}: {error_msg}")
                self.save_stats()
                return False, error_msg

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.commits_since_push = 0
            self.stats.last_push_time = datetime.now()
            self.save_stats()

            return True, f"Push –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –≤–µ—Ç–∫—É {branch}"

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É—à–∞: {e}"
            self.stats.failed_pushes.append(f"{datetime.now().isoformat()}: {error_msg}")
            self.save_stats()
            return False, error_msg

    def get_commit_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–∏—Ç–æ–≤"""
        return {
            "total_commits": self.stats.total_commits,
            "commits_since_push": self.stats.commits_since_push,
            "last_commit_hash": self.stats.last_commit_hash,
            "last_push_time": self.stats.last_push_time.isoformat(),
            "last_backup_time": self.stats.last_backup_time.isoformat(),
            "failed_commits_count": len(self.stats.failed_commits),
            "failed_pushes_count": len(self.stats.failed_pushes),
            "config": {
                "auto_commit_enabled": self.config.auto_commit_enabled,
                "auto_push_enabled": self.config.auto_push_enabled,
                "commits_until_push": self.config.commits_until_push,
                "backup_enabled": self.config.backup_enabled
            }
        }

    def format_commit_summary(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–º–∏—Ç–∞–º"""
        stats = self.get_commit_stats()

        summary = []
        summary.append("GIT –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        summary.append("=" * 25)
        summary.append(f"–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: {stats['total_commits']}")
        summary.append(f"–ö–æ–º–º–∏—Ç–æ–≤ –¥–æ push: {stats['commits_since_push']}/{self.config.commits_until_push}")

        if stats['last_commit_hash']:
            summary.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {stats['last_commit_hash']}")

        if stats['failed_commits_count'] > 0:
            summary.append(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤: {stats['failed_commits_count']}")

        if stats['failed_pushes_count'] > 0:
            summary.append(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö push: {stats['failed_pushes_count']}")

        summary.append("")
        summary.append("–ù–ê–°–¢–†–û–ô–ö–ò:")
        summary.append(f"–ê–≤—Ç–æ–∫–æ–º–º–∏—Ç—ã: {'ON' if stats['config']['auto_commit_enabled'] else 'OFF'}")
        summary.append(f"–ê–≤—Ç–æ–ø—É—à: {'ON' if stats['config']['auto_push_enabled'] else 'OFF'}")
        summary.append(f"–ë—ç–∫–∞–ø—ã: {'ON' if stats['config']['backup_enabled'] else 'OFF'}")

        return "\n".join(summary)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_git_manager = None

def get_git_manager() -> GitManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Git –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _global_git_manager
    if _global_git_manager is None:
        _global_git_manager = GitManager()
    return _global_git_manager

# –§—É–Ω–∫—Ü–∏–∏-—É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∞–≥–µ–Ω—Ç—ã

async def auto_commit_on_task_completion(task_description: str, files_changed: Optional[List[str]] = None) -> str:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (async wrapper)

    Args:
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        files_changed: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    git_manager = get_git_manager()
    success, message = git_manager.auto_commit_task_completion(task_description, files_changed)

    if success:
        return f"‚úì Git –∫–æ–º–º–∏—Ç: {message}"
    else:
        return f"‚úó –û—à–∏–±–∫–∞ Git –∫–æ–º–º–∏—Ç–∞: {message}"

def should_create_commit() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–º–∏—Ç"""
    git_manager = get_git_manager()
    if not git_manager.config.auto_commit_enabled:
        return False

    status_ok, status_info = git_manager.check_git_status()
    return status_ok and status_info.get('has_changes', False)

def get_git_status_summary() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç—É—Å–∞ Git"""
    git_manager = get_git_manager()
    return git_manager.format_commit_summary()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
__all__ = [
    'GitManager',
    'GitCommitConfig',
    'GitCommitStats',
    'get_git_manager',
    'auto_commit_on_task_completion',
    'should_create_commit',
    'get_git_status_summary'
]