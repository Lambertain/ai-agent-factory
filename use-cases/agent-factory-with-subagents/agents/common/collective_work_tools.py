# -*- coding: utf-8 -*-
"""
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö Pydantic AI –∞–≥–µ–Ω—Ç–æ–≤

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
–¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.
"""

import asyncio
import logging
from typing import Dict, List, Any, Optional
from pydantic_ai import RunContext

logger = logging.getLogger(__name__)

# –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
AGENT_COMPETENCIES = {
    "security_audit": [
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—É—è–∑–≤–∏–º–æ—Å—Ç–∏", "compliance", "–∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "secrets detection", "penetration testing", "OWASP", "CVE"
    ],
    "rag_agent": [
        "–ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "knowledge base",
        "document retrieval", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", "—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
    ],
    "uiux_enhancement": [
        "–¥–∏–∑–∞–π–Ω", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "accessibility", "UX/UI",
        "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º—ã", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç"
    ],
    "performance_optimization": [
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "—Å–∫–æ—Ä–æ—Å—Ç—å", "memory usage",
        "cpu optimization", "caching", "load testing", "–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ],
    "typescript_architecture": [
        "—Ç–∏–ø–∏–∑–∞—Ü–∏—è", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "TypeScript", "type safety",
        "–∫–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "architectural patterns"
    ],
    "prisma_database": [
        "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "SQL", "Prisma", "—Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö",
        "migrations", "query optimization", "database design"
    ],
    "pwa_mobile": [
        "PWA", "–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "service workers", "offline",
        "mobile UX", "app manifest", "–º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è"
    ],
    "analytics_tracking": [
        "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Ç—Ä–µ–∫–∏–Ω–≥", "–º–µ—Ç—Ä–∏–∫–∏", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è",
        "Google Analytics", "—Å–æ–±—ã—Ç–∏—è", "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    ],
    "mcp_configuration": [
        "MCP", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "Claude Desktop", "—Å–µ—Ä–≤–µ—Ä—ã",
        "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "MCP protocol"
    ]
}

AGENT_ASSIGNEE_MAP = {
    "security_audit": "Security Audit Agent",
    "rag_agent": "Archon Analysis Lead",
    "uiux_enhancement": "Archon UI/UX Designer",
    "performance_optimization": "Performance Optimization Agent",
    "typescript_architecture": "Archon Blueprint Architect",
    "prisma_database": "Archon Implementation Engineer",
    "pwa_mobile": "Archon Implementation Engineer",
    "analytics_tracking": "Analytics Tracking Agent",
    "mcp_configuration": "Mcp Configuration Agent"
}

async def break_down_to_microtasks(
    ctx: RunContext,
    main_task: str,
    complexity_level: str = "medium"
) -> str:
    """
    –†–∞–∑–±–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        main_task: –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
        complexity_level: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (simple, medium, complex)

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        microtasks = []

        if complexity_level == "simple":
            microtasks = [
                f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è: {main_task}",
                f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è",
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
            ]
        elif complexity_level == "medium":
            microtasks = [
                f"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏: {main_task}",
                f"–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ",
                f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏",
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                f"–£–ª—É—á—à–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
            ]
        else:  # complex
            microtasks = [
                f"–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {main_task}",
                f"–ü–æ–∏—Å–∫ –≤ RAG –∏ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö",
                f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                f"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π",
                f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏",
                f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤",
                f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ"
            ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        output = "üìã **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
        for i, task in enumerate(microtasks, 1):
            output += f"{i}. {task}\n"
        output += "\n‚úÖ –ë—É–¥—É –æ—Ç—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏"

        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –∏–∑ {len(microtasks)} –º–∏–∫—Ä–æ–∑–∞–¥–∞—á –¥–ª—è: {main_task}")
        return output

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ–∑–∞–¥–∞—á: {e}")
        return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á: {e}"

async def report_microtask_progress(
    ctx: RunContext,
    microtask_number: int,
    microtask_description: str,
    status: str = "completed",
    details: str = ""
) -> str:
    """
    –û—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        microtask_number: –ù–æ–º–µ—Ä –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
        microtask_description: –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
        status: –°—Ç–∞—Ç—É—Å (started, in_progress, completed, blocked)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    """
    try:
        status_emoji = {
            "started": "üîÑ",
            "in_progress": "‚è≥",
            "completed": "‚úÖ",
            "blocked": "üö´"
        }

        report = f"{status_emoji.get(status, 'üìù')} **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ {microtask_number}** ({status}): {microtask_description}"
        if details:
            report += f"\n   –î–µ—Ç–∞–ª–∏: {details}"

        logger.info(f"–û—Ç—á–µ—Ç –æ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–µ {microtask_number}: {status}")
        return report

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}"

async def reflect_and_improve(
    ctx: RunContext,
    completed_work: str,
    work_type: str = "implementation",
    quality_criteria: List[str] = None
) -> str:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed_work: –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        work_type: –¢–∏–ø —Ä–∞–±–æ—Ç—ã (analysis, implementation, testing, documentation)
        quality_criteria: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞

    Returns:
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        from .reflection_system import advanced_reflection, format_reflection_report

        logger.info(f"–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–∏–ø–∞: {work_type}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        reflection_result = await advanced_reflection(
            ctx=ctx,
            completed_work=completed_work,
            work_type=work_type,
            quality_criteria=quality_criteria
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_report = format_reflection_report(reflection_result)

        logger.info(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {reflection_result.final_score}/10.0")

        return formatted_report

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        return f"""
üîç **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:**

**–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {work_type}
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {completed_work[:200]}...

‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:** {e}

**–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:**
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏**
"""

async def check_delegation_need(
    ctx: RunContext,
    current_task: str,
    current_agent_type: str
) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–∞–º.

    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        current_task: –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
        current_agent_type: –¢–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞

    Returns:
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
    """
    try:
        keywords = current_task.lower().split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        delegation_suggestions = []

        for agent_type, competencies in AGENT_COMPETENCIES.items():
            if agent_type != current_agent_type:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏
                matching_keywords = []
                for keyword in keywords:
                    for competency in competencies:
                        if keyword in competency.lower() or competency.lower() in keyword:
                            matching_keywords.append(competency)

                if matching_keywords:
                    assignee = AGENT_ASSIGNEE_MAP.get(agent_type, "Archon Analysis Lead")
                    delegation_suggestions.append(
                        f"{assignee} - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å: {', '.join(set(matching_keywords))}"
                    )

        if delegation_suggestions:
            result = "ü§ù **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
            for suggestion in delegation_suggestions:
                result += f"- {suggestion}\n"
            result += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ delegate_task_to_agent() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á."
        else:
            result = "‚úÖ –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –±–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(delegation_suggestions)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

async def delegate_task_to_agent(
    ctx: RunContext,
    target_agent: str,
    task_title: str,
    task_description: str,
    priority: str = "medium",
    context_data: Dict[str, Any] = None
) -> str:
    """
    –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Archon.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        target_agent: –¶–µ–ª–µ–≤–æ–π –∞–≥–µ–Ω—Ç (security_audit, rag_agent, etc.)
        task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low, medium, high, critical)
        context_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        try:
            from ...common.archon_integrations import create_archon_task
        except ImportError:
            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ archon_integrations –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.warning("–ú–æ–¥—É–ª—å archon_integrations –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
            return f"‚ö†Ô∏è –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task_title}' –∞–≥–µ–Ω—Ç—É {target_agent} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ Archon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º assignee –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –∞–≥–µ–Ω—Ç—É
        assignee = AGENT_ASSIGNEE_MAP.get(target_agent, "Archon Analysis Lead")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        full_description = task_description
        if context_data:
            full_description += f"\n\n**–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞:**\n{context_data}"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Archon
        task_result = await create_archon_task(
            title=task_title,
            description=full_description,
            assignee=assignee,
            priority=priority,
            feature=f"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç {target_agent}"
        )

        result = f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∞–≥–µ–Ω—Ç—É {target_agent}:\n"
        result += f"- Assignee: {assignee}\n"
        result += f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
        result += f"- –°—Ç–∞—Ç—É—Å: —Å–æ–∑–¥–∞–Ω–∞ –≤ Archon"

        if "task_id" in task_result:
            result += f"\n- –ó–∞–¥–∞—á–∞ ID: {task_result['task_id']}"

        logger.info(f"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_title}' –∞–≥–µ–Ω—Ç—É {target_agent}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã

def get_agent_competencies(agent_type: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞."""
    return AGENT_COMPETENCIES.get(agent_type, [])

def find_best_agent_for_task(task_keywords: List[str], exclude_agent: str = None) -> Optional[str]:
    """
    –ù–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.

    Args:
        task_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á–∏
        exclude_agent: –ê–≥–µ–Ω—Ç –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞

    Returns:
        –¢–∏–ø –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ None
    """
    best_match = None
    best_score = 0

    for agent_type, competencies in AGENT_COMPETENCIES.items():
        if exclude_agent and agent_type == exclude_agent:
            continue

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        score = 0
        for keyword in task_keywords:
            for competency in competencies:
                if keyword.lower() in competency.lower():
                    score += 1

        if score > best_score:
            best_score = score
            best_match = agent_type

    return best_match

def should_delegate_task(task_description: str, current_agent_type: str, threshold: int = 2) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É–µ—Ç –ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É –∞–≥–µ–Ω—Ç—É.

    Args:
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        current_agent_type: –¢–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ —Å–ª–µ–¥—É–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å
    """
    keywords = task_description.lower().split()
    current_competencies = get_agent_competencies(current_agent_type)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    current_matches = 0
    for keyword in keywords:
        for competency in current_competencies:
            if keyword in competency.lower():
                current_matches += 1

    # –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –º–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    return current_matches < threshold