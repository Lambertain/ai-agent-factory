"""
MCP Configuration Agent

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
—Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–µ–∫–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude Desktop
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã:
- Frontend (React, Vue, Angular)
- Backend (API, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã)
- Fullstack (–ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
- AI/ML (–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
- Security (–∞—É–¥–∏—Ç –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
- Mobile (–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
- DevOps (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
- Data Science (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è ML –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è backend API
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
"""

from .agent import MCPConfigurationAgent
from .dependencies import (
    MCPConfigurationDeps,
    create_mcp_deps,
    create_domain_specific_deps,
    create_frontend_deps,
    create_backend_deps,
    create_fullstack_deps,
    create_ai_deps,
    EXAMPLE_DEPS
)
from .tools import (
    install_mcp_server,
    configure_claude_desktop_server,
    validate_mcp_server,
    get_recommended_servers,
    list_installed_servers,
    remove_mcp_server,
    search_agent_knowledge,
    configure_filesystem_server,
    configure_search_server
)
from .prompts import (
    MAIN_SYSTEM_PROMPT,
    PROJECT_ANALYSIS_PROMPT,
    VALIDATION_PROMPT,
    TROUBLESHOOTING_PROMPT,
    DOMAIN_SPECIFIC_PROMPTS,
    get_adaptive_system_prompt,
    get_validation_checklist,
    get_troubleshooting_guide,
    TASK_PROMPTS
)
from .settings import (
    MCPAgentSettings,
    DomainType,
    ProjectType,
    PackageManager,
    load_settings,
    get_domain_config,
    get_server_config,
    create_adaptive_config,
    get_recommended_package_manager,
    validate_env_vars,
    create_env_template,
    DOMAIN_CONFIGURATIONS,
    MCP_SERVER_CONFIGS,
    EXAMPLE_CONFIGS
)

# –í–µ—Ä—Å–∏—è –∞–≥–µ–Ω—Ç–∞
__version__ = "2.0.0"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
__agent_info__ = {
    "name": "MCP Configuration Agent",
    "version": __version__,
    "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    "domain": "mcp, configuration, claude-desktop",
    "framework": "Python",
    "capabilities": [
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ npm/pip/uv",
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop",
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤",
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–º–µ–Ω–∞–º",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
    ],
    "supported_domains": [
        "frontend", "backend", "fullstack", "ai_ml",
        "security", "mobile", "devops", "data_science", "general"
    ],
    "supported_package_managers": ["npm", "yarn", "pnpm", "pip", "uv", "conda"],
    "supported_servers": [
        "filesystem", "brave-search", "github", "postgres",
        "slack", "linear", "figma", "docker", "kubernetes"
    ],
    "integration": ["Claude Desktop", "MCP Protocol", "Package Managers"]
}

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
    "MCPConfigurationAgent",

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    "MCPConfigurationDeps",
    "create_mcp_deps",
    "create_domain_specific_deps",
    "create_frontend_deps",
    "create_backend_deps",
    "create_fullstack_deps",
    "create_ai_deps",
    "EXAMPLE_DEPS",

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    "install_mcp_server",
    "configure_claude_desktop_server",
    "validate_mcp_server",
    "get_recommended_servers",
    "list_installed_servers",
    "remove_mcp_server",
    "search_agent_knowledge",
    "configure_filesystem_server",
    "configure_search_server",

    # –ü—Ä–æ–º–ø—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "MAIN_SYSTEM_PROMPT",
    "PROJECT_ANALYSIS_PROMPT",
    "VALIDATION_PROMPT",
    "TROUBLESHOOTING_PROMPT",
    "DOMAIN_SPECIFIC_PROMPTS",
    "get_adaptive_system_prompt",
    "get_validation_checklist",
    "get_troubleshooting_guide",
    "TASK_PROMPTS",

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    "MCPAgentSettings",
    "DomainType",
    "ProjectType",
    "PackageManager",
    "load_settings",
    "get_domain_config",
    "get_server_config",
    "create_adaptive_config",
    "get_recommended_package_manager",
    "validate_env_vars",
    "create_env_template",
    "DOMAIN_CONFIGURATIONS",
    "MCP_SERVER_CONFIGS",
    "EXAMPLE_CONFIGS",

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    "__version__",
    "__agent_info__"
]


def get_agent_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≥–µ–Ω—Ç–µ."""
    return __agent_info__


def print_agent_capabilities():
    """–í—ã–≤–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞."""
    info = __agent_info__

    print(f"\n‚öôÔ∏è {info['name']} v{info['version']}")
    print(f"üìù {info['description']}")
    print(f"üîß Framework: {info['framework']}")

    print(f"\n‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    for capability in info['capabilities']:
        print(f"  ‚Ä¢ {capability}")

    print(f"\nüéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã:")
    for domain in info['supported_domains']:
        print(f"  ‚Ä¢ {domain}")

    print(f"\nüì¶ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:")
    for pm in info['supported_package_managers']:
        print(f"  ‚Ä¢ {pm}")

    print(f"\nüîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:")
    for server in info['supported_servers']:
        print(f"  ‚Ä¢ {server}")


def create_quick_config(
    domain: str = "general",
    project_type: str = "web_application",
    package_manager: str = "npm"
) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞.

    Args:
        domain: –î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
        package_manager: –ü–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

    Returns:
        –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –µ–Ω—É–º—ã
    domain_mapping = {
        "frontend": DomainType.FRONTEND,
        "backend": DomainType.BACKEND,
        "fullstack": DomainType.FULLSTACK,
        "ai": DomainType.AI_ML,
        "ml": DomainType.AI_ML,
        "security": DomainType.SECURITY,
        "mobile": DomainType.MOBILE,
        "devops": DomainType.DEVOPS,
        "data": DomainType.DATA_SCIENCE,
        "general": DomainType.GENERAL
    }

    project_mapping = {
        "web": ProjectType.WEB_APPLICATION,
        "web_application": ProjectType.WEB_APPLICATION,
        "api": ProjectType.API_SERVICE,
        "api_service": ProjectType.API_SERVICE,
        "mobile": ProjectType.MOBILE_APP,
        "mobile_app": ProjectType.MOBILE_APP,
        "desktop": ProjectType.DESKTOP_APP,
        "desktop_app": ProjectType.DESKTOP_APP,
        "ml": ProjectType.ML_PROJECT,
        "ml_project": ProjectType.ML_PROJECT,
        "data": ProjectType.DATA_PIPELINE,
        "data_pipeline": ProjectType.DATA_PIPELINE,
        "microservice": ProjectType.MICROSERVICE,
        "library": ProjectType.LIBRARY,
        "cli": ProjectType.CLI_TOOL,
        "cli_tool": ProjectType.CLI_TOOL,
        "research": ProjectType.RESEARCH
    }

    pm_mapping = {
        "npm": PackageManager.NPM,
        "yarn": PackageManager.YARN,
        "pnpm": PackageManager.PNPM,
        "pip": PackageManager.PIP,
        "uv": PackageManager.UV,
        "conda": PackageManager.CONDA
    }

    domain_enum = domain_mapping.get(domain.lower(), DomainType.GENERAL)
    project_enum = project_mapping.get(project_type.lower(), ProjectType.WEB_APPLICATION)
    pm_enum = pm_mapping.get(package_manager.lower(), PackageManager.NPM)

    config = create_adaptive_config(domain_enum, project_enum)
    config["package_manager"] = pm_enum

    return config


# –ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
QUICK_CONFIGS = {
    "frontend_react": create_quick_config("frontend", "web_application", "npm"),
    "backend_fastapi": create_quick_config("backend", "api_service", "pip"),
    "fullstack_nextjs": create_quick_config("fullstack", "web_application", "npm"),
    "ai_research": create_quick_config("ai", "ml_project", "pip"),
    "mobile_reactnative": create_quick_config("mobile", "mobile_app", "npm"),
    "devops_kubernetes": create_quick_config("devops", "microservice", "pip"),
    "data_jupyter": create_quick_config("data", "data_pipeline", "conda"),
    "security_audit": create_quick_config("security", "cli_tool", "pip")
}


async def quick_setup(domain: str, project_path: str = None) -> MCPConfigurationAgent:
    """
    –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MCP Configuration Agent –¥–ª—è –¥–æ–º–µ–Ω–∞.

    Args:
        domain: –î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (frontend, backend, ai, etc.)
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
    """
    config = create_quick_config(domain)

    if project_path:
        from pathlib import Path
        config["project_root_path"] = Path(project_path)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    deps = create_domain_specific_deps(domain, project_path)

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç
    agent = MCPConfigurationAgent(
        config_domain=domain,
        project_type=config.get("project_type", "web_application")
    )

    return agent


def get_domain_info(domain: str) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–æ–º–µ–Ω–µ.

    Args:
        domain: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
    """
    domain_mapping = {
        "frontend": DomainType.FRONTEND,
        "backend": DomainType.BACKEND,
        "fullstack": DomainType.FULLSTACK,
        "ai": DomainType.AI_ML,
        "ml": DomainType.AI_ML,
        "security": DomainType.SECURITY,
        "mobile": DomainType.MOBILE,
        "devops": DomainType.DEVOPS,
        "data": DomainType.DATA_SCIENCE,
        "general": DomainType.GENERAL
    }

    domain_enum = domain_mapping.get(domain.lower())
    if not domain_enum:
        return {"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}"}

    config = get_domain_config(domain_enum)
    return {
        "domain": domain_enum.value,
        "description": config["description"],
        "recommended_servers": config["recommended_servers"],
        "optional_servers": config["optional_servers"],
        "required_env_vars": config.get("required_env_vars", []),
        "filesystem_paths": config.get("filesystem_paths", []),
        "package_managers": [pm.value for pm in config.get("package_managers", [])]
    }


if __name__ == "__main__":
    print_agent_capabilities()

    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for name, config in QUICK_CONFIGS.items():
        domain_desc = get_domain_config(config['domain_type'])['description']
        print(f"  ‚Ä¢ {name}: {domain_desc}")

    print(f"\nüéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–∞—Ö:")
    for domain in ["frontend", "backend", "ai", "security", "mobile"]:
        info = get_domain_info(domain)
        if "error" not in info:
            print(f"  ‚Ä¢ {domain}: {info['description']}")
            print(f"    –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {', '.join(info['recommended_servers'])}")