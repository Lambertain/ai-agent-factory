#!/usr/bin/env python3
"""
MCP Configuration Agent - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
–¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–µ–∫–æ–≤.

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ npm/pip/uv
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ (STDIO, HTTP)
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, subprocess, JSON, MCP Protocol
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Claude Desktop, MCP Servers, Package Managers
"""

import asyncio
import json
import os
import subprocess
import sys
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime

from pydantic_ai import Agent, RunContext
from .dependencies import MCPConfigurationDeps
from .providers import get_llm_model
from .tools import (
    install_mcp_server,
    configure_claude_desktop,
    validate_server_config,
    get_recommended_servers_for_domain,
    create_server_from_template,
    break_down_to_microtasks,
    report_microtask_progress,
    reflect_and_improve,
    check_delegation_need,
    search_mcp_knowledge
)
from .prompts import get_mcp_system_prompt

# –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent.parent.parent))
from MCP_SERVERS_FINAL_CONFIG import WORKING_MCP_SERVERS, get_mcp_config_for_agent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Pydantic AI –∞–≥–µ–Ω—Ç–∞ (–ø—Ä—è–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
mcp_agent = Agent(
    get_llm_model(),
    deps_type=MCPConfigurationDeps,
    system_prompt=get_mcp_system_prompt()
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
mcp_agent.tool(install_mcp_server)
mcp_agent.tool(configure_claude_desktop)
mcp_agent.tool(validate_server_config)
mcp_agent.tool(get_recommended_servers_for_domain)
mcp_agent.tool(create_server_from_template)
mcp_agent.tool(search_mcp_knowledge)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
mcp_agent.tool(break_down_to_microtasks)
mcp_agent.tool(report_microtask_progress)
mcp_agent.tool(reflect_and_improve)
mcp_agent.tool(check_delegation_need)


@dataclass
class MCPServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    name: str
    command: str
    args: List[str]
    env: Dict[str, str] = None
    transport: str = "stdio"  # stdio –∏–ª–∏ http
    description: str = ""
    install_command: Optional[str] = None
    package_manager: str = "npm"  # npm, pip, uv, git


async def run_mcp_configuration(
    task_description: str,
    domain: str = "general",
    project_type: str = "web",
    session_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞.

    Args:
        task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        domain: –î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (frontend, backend, fullstack, ai, security)
        project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (web, mobile, desktop, etc.)
        session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    start_time = asyncio.get_event_loop().time()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = MCPConfigurationDeps()
    deps.domain_type = domain
    deps.project_type = project_type

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é Pydantic AI –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        result = await mcp_agent.run(
            task_description,
            deps=deps
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        config_duration = asyncio.get_event_loop().time() - start_time

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        config_results = {
            "configuration_summary": {
                "task": task_description,
                "domain": domain,
                "project_type": project_type,
                "session_id": session_id,
                "start_time": start_time,
                "duration_seconds": config_duration,
                "status": "completed"
            },
            "agent_response": result.data,
            "recommendations": _extract_mcp_recommendations(result.data),
            "next_steps": _generate_mcp_next_steps(result.data)
        }

        logger.info(f"MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {config_duration:.2f} —Å–µ–∫—É–Ω–¥")
        return config_results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {
            "error": str(e),
            "configuration_summary": {
                "task": task_description,
                "status": "failed"
            }
        }

def _extract_mcp_recommendations(response: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
    recommendations = []
    lines = response.split('\n')

    for line in lines:
        line = line.strip()
        if line.startswith(('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', 'Recommendation:', '‚úÖ', 'üí°')):
            recommendations.append(line)

    return recommendations

def _generate_mcp_next_steps(response: str) -> List[str]:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞."""
    next_steps = []

    if "install" in response.lower():
        next_steps.append("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    if "configure" in response.lower():
        next_steps.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    if "validate" in response.lower():
        next_steps.append("–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    if "test" in response.lower():
        next_steps.append("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

    return next_steps

async def run_mcp_task(user_message: str, domain: str = "general") -> str:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É MCP —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏.

    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        domain: –î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = MCPConfigurationDeps()
    deps.domain_type = domain

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        from ..common.pydantic_ai_integrations import run_with_integrations

        result = await run_with_integrations(
            agent=mcp_agent,
            user_message=user_message,
            deps=deps,
            agent_type="mcp_configuration_agent"
        )
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∑–∞–¥–∞—á–∏: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MCP –∑–∞–ø—Ä–æ—Å–∞: {e}"

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–µ–∫–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –º–æ–¥—É–ª—å)
DOMAIN_CONFIGURATIONS = {
    "frontend": {
        "recommended": ["brave-search", "github", "filesystem"],
        "optional": ["figma", "linear", "slack"],
        "description": "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (React, Vue, Angular)"
    },
    "backend": {
        "recommended": ["postgres", "github", "filesystem"],
        "optional": ["docker", "kubernetes", "redis"],
        "description": "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (API, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã)"
    },
    "fullstack": {
        "recommended": ["postgres", "github", "filesystem", "brave-search"],
        "optional": ["docker", "slack", "linear"],
        "description": "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    },
    "ai": {
        "recommended": ["brave-search", "github", "filesystem"],
        "optional": ["postgres", "vector-db", "jupyter"],
        "description": "AI/ML —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    },
    "security": {
        "recommended": ["github", "filesystem"],
        "optional": ["kubernetes", "docker", "slack"],
        "description": "Security –∞—É–¥–∏—Ç –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    }
}

def _get_claude_config_path() -> Path:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop."""
    if sys.platform == "win32":
        return Path.home() / "AppData" / "Roaming" / "Claude" / "claude_desktop_config.json"
    elif sys.platform == "darwin":
        return Path.home() / "Library" / "Application Support" / "Claude" / "claude_desktop_config.json"
    else:  # Linux
        return Path.home() / ".config" / "claude" / "claude_desktop_config.json"


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    import argparse

    parser = argparse.ArgumentParser(description="Universal MCP Configuration Agent")
    parser.add_argument("--domain", default="general",
                       help="–î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (frontend, backend, fullstack, ai, security)")
    parser.add_argument("--message", help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--interactive", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    args = parser.parse_args()

    print(f"üîß MCP Configuration Agent –∑–∞–ø—É—â–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: {args.domain}")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(DOMAIN_CONFIGURATIONS.keys())}")
    print("-" * 50)

    if args.message:
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º
        response = await run_mcp_task(args.message, args.domain)
        print(f"–û—Ç–≤–µ—Ç: {response}")

    elif args.interactive:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        while True:
            try:
                user_input = input("\nüë§ –í—ã: ")

                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    break

                if user_input.strip():
                    response = await run_mcp_task(user_input, args.domain)
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {response}")

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        domain_info = DOMAIN_CONFIGURATIONS.get(args.domain, {})
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ:")
        print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {domain_info.get('description', '–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')}")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {', '.join(domain_info.get('recommended', []))}")
        print(f"  –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {', '.join(domain_info.get('optional', []))}")


if __name__ == "__main__":
    asyncio.run(main())