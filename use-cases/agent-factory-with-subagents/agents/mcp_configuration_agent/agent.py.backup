#!/usr/bin/env python3
"""
MCP Configuration Agent - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
–¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–µ–∫–æ–≤.

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ npm/pip/uv
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ (STDIO, HTTP)
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, subprocess, JSON, MCP Protocol
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Claude Desktop, MCP Servers, Package Managers
"""

import asyncio
import json
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
sys.path.append(str(Path(__file__).parent.parent.parent.parent.parent))
from MCP_SERVERS_FINAL_CONFIG import WORKING_MCP_SERVERS, get_mcp_config_for_agent

@dataclass
class MCPServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    name: str
    command: str
    args: List[str]
    env: Dict[str, str] = None
    transport: str = "stdio"  # stdio –∏–ª–∏ http
    description: str = ""
    install_command: Optional[str] = None
    package_manager: str = "npm"  # npm, pip, uv, git

class MCPConfigurationAgent:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π MCP Configuration Agent

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - install_mcp_server() - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
    - configure_claude_desktop() - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop
    - validate_server_config() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    - manage_server_lifecycle() - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    - get_recommended_servers() - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–µ–∫—É
    """

    def __init__(self, config_domain: str = "general", project_type: str = "web"):
        self.name = "MCP Configuration Agent"
        self.version = "2.0.0"
        self.config_domain = config_domain
        self.project_type = project_type

        # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop
        self.claude_config_path = self._get_claude_config_path()

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–µ–∫–æ–≤
        self.domain_configurations = {
            "frontend": {
                "recommended": ["brave-search", "github", "filesystem"],
                "optional": ["figma", "linear", "slack"],
                "description": "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (React, Vue, Angular)"
            },
            "backend": {
                "recommended": ["postgres", "github", "filesystem"],
                "optional": ["docker", "kubernetes", "redis"],
                "description": "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (API, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã)"
            },
            "fullstack": {
                "recommended": ["postgres", "github", "filesystem", "brave-search"],
                "optional": ["docker", "slack", "linear"],
                "description": "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            },
            "ai": {
                "recommended": ["brave-search", "github", "filesystem"],
                "optional": ["postgres", "vector-db", "jupyter"],
                "description": "AI/ML —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            },
            "security": {
                "recommended": ["github", "filesystem"],
                "optional": ["kubernetes", "docker", "slack"],
                "description": "Security –∞—É–¥–∏—Ç –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            }
        }

    def _get_claude_config_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop."""
        if sys.platform == "win32":
            return Path.home() / "AppData" / "Roaming" / "Claude" / "claude_desktop_config.json"
        elif sys.platform == "darwin":
            return Path.home() / "Library" / "Application Support" / "Claude" / "claude_desktop_config.json"
        else:  # Linux
            return Path.home() / ".config" / "claude" / "claude_desktop_config.json"

    async def install_mcp_server(self, server_name: str, install_method: str = "auto") -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.

        Args:
            server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            install_method: –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (auto, npm, pip, uv, git)

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        print(f"üîß {self.name}: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é MCP —Å–µ—Ä–≤–µ—Ä {server_name}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        available_servers = self._load_available_servers()

        if server_name not in available_servers:
            return {
                "success": False,
                "error": f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö",
                "available": list(available_servers.keys())
            }

        server_config = available_servers[server_name]

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if install_method == "auto":
                install_method = server_config.get("package_manager", "npm")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            install_command = server_config.get("install_command")
            if not install_command:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                package_name = server_config.get("package", server_name)
                if install_method == "npm":
                    install_command = f"npm install -g {package_name}"
                elif install_method == "pip":
                    install_command = f"pip install {package_name}"
                elif install_method == "uv":
                    install_command = f"uv add {package_name}"

            if install_command:
                result = await self._run_command(install_command)
                if result["success"]:
                    print(f"‚úÖ {server_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {
                        "success": True,
                        "server_name": server_name,
                        "install_method": install_method,
                        "command": install_command
                    }
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {server_name}: {result['error']}")
                    return {
                        "success": False,
                        "error": result["error"],
                        "command": install_command
                    }
            else:
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è {server_name}"
                }

        except Exception as e:
            return {
                "success": False,
                "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {server_name}: {str(e)}"
            }

    async def configure_claude_desktop(self, servers_config: Dict[str, MCPServerConfig]) -> Dict[str, Any]:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.

        Args:
            servers_config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        print(f"‚öôÔ∏è {self.name}: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if self.claude_config_path.exists():
                with open(self.claude_config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
            else:
                config = {}

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ–∫—Ü–∏—è mcpServers —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if "mcpServers" not in config:
                config["mcpServers"] = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            for server_name, server_config in servers_config.items():
                mcp_config = {
                    "command": server_config.command,
                    "args": server_config.args
                }

                if server_config.env:
                    mcp_config["env"] = server_config.env

                config["mcpServers"][server_name] = mcp_config
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server_name}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.claude_config_path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.claude_config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)

            print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {self.claude_config_path}")

            return {
                "success": True,
                "config_path": str(self.claude_config_path),
                "servers_added": list(servers_config.keys()),
                "total_servers": len(config["mcpServers"])
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop: {str(e)}"
            }

    async def validate_server_config(self, server_config: MCPServerConfig) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞.

        Args:
            server_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {server_config.name}")

        validation_results = {
            "valid": True,
            "errors": [],
            "warnings": []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not server_config.name:
            validation_results["errors"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞")
            validation_results["valid"] = False

        if not server_config.command:
            validation_results["errors"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞")
            validation_results["valid"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        try:
            result = await self._run_command(f"which {server_config.command}")
            if not result["success"]:
                validation_results["warnings"].append(f"–ö–æ–º–∞–Ω–¥–∞ {server_config.command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH")
        except Exception:
            validation_results["warnings"].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É {server_config.command}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if server_config.args:
            for arg in server_config.args:
                if not isinstance(arg, str):
                    validation_results["errors"].append(f"–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {arg}")
                    validation_results["valid"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if server_config.env:
            for key, value in server_config.env.items():
                if not isinstance(key, str) or not isinstance(value, str):
                    validation_results["errors"].append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {key}={value}")
                    validation_results["valid"] = False

        return validation_results

    def get_recommended_servers_for_domain(self, domain: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞.

        Args:
            domain: –î–æ–º–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (frontend, backend, fullstack, ai, security)

        Returns:
            dict: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        """
        if domain not in self.domain_configurations:
            return {
                "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}",
                "available_domains": list(self.domain_configurations.keys())
            }

        config = self.domain_configurations[domain]
        return {
            "domain": domain,
            "description": config["description"],
            "recommended": config["recommended"],
            "optional": config["optional"]
        }

    def _load_available_servers(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–∏—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
            servers_config = {}

            for server_name, server_status in WORKING_MCP_SERVERS.items():
                if server_status.status == "connected":
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                    command_parts = server_status.command.split()
                    if command_parts[0] == "npx":
                        package = command_parts[-1] if len(command_parts) > 1 else server_name
                        servers_config[server_name] = {
                            "package": package,
                            "command": command_parts[0],
                            "args": command_parts[1:],
                            "package_manager": "npm",
                            "description": server_status.description,
                            "status": "working",
                            "functions_count": len(server_status.functions)
                        }
                    elif server_status.command.startswith("http://"):
                        # HTTP —Å–µ—Ä–≤–µ—Ä (Archon)
                        servers_config[server_name] = {
                            "type": "http",
                            "url": server_status.command,
                            "description": server_status.description,
                            "status": "working",
                            "functions_count": len(server_status.functions)
                        }

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(servers_config)} —Ä–∞–±–æ—á–∏—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return servers_config

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_default_servers()

    def _get_default_servers(self) -> Dict[str, Dict[str, Any]]:
        """–ë–∞–∑–æ–≤—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        return {
            "filesystem": {
                "package": "@modelcontextprotocol/server-filesystem",
                "command": "npx",
                "args": ["@modelcontextprotocol/server-filesystem", "/path/to/allowed/files"],
                "package_manager": "npm",
                "description": "–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"
            },
            "brave-search": {
                "package": "@modelcontextprotocol/server-brave-search",
                "command": "npx",
                "args": ["@modelcontextprotocol/server-brave-search"],
                "package_manager": "npm",
                "description": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Brave Search",
                "env_required": ["BRAVE_API_KEY"]
            },
            "postgres": {
                "package": "@modelcontextprotocol/server-postgres",
                "command": "npx",
                "args": ["@modelcontextprotocol/server-postgres"],
                "package_manager": "npm",
                "description": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "env_required": ["POSTGRES_CONNECTION_STRING"]
            },
            "github": {
                "package": "@modelcontextprotocol/server-github",
                "command": "npx",
                "args": ["@modelcontextprotocol/server-github"],
                "package_manager": "npm",
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub API",
                "env_required": ["GITHUB_PERSONAL_ACCESS_TOKEN"]
            }
        }

    async def _run_command(self, command: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ subprocess."""
        try:
            process = await asyncio.create_subprocess_shell(
                command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()

            return {
                "success": process.returncode == 0,
                "stdout": stdout.decode('utf-8', errors='ignore').strip(),
                "stderr": stderr.decode('utf-8', errors='ignore').strip(),
                "returncode": process.returncode
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "stdout": "",
                "stderr": "",
                "returncode": -1
            }

    async def create_server_from_template(self, server_name: str, template_type: str = "python") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞.

        Args:
            server_name: –ò–º—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            template_type: –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ (python, typescript, etc.)

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        """
        print(f"üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_type}")

        try:
            if template_type == "python":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Python —à–∞–±–ª–æ–Ω
                command = f"npx @modelcontextprotocol/create-server {server_name} --template python"
            elif template_type == "typescript":
                command = f"npx @modelcontextprotocol/create-server {server_name} --template typescript"
            else:
                return {
                    "success": False,
                    "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞: {template_type}"
                }

            result = await self._run_command(command)

            if result["success"]:
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return {
                    "success": True,
                    "server_name": server_name,
                    "template_type": template_type,
                    "path": f"./{server_name}"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {result['stderr']}",
                    "command": command
                }

        except Exception as e:
            return {
                "success": False,
                "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã MCP Configuration Agent"""
    agent = MCPConfigurationAgent(config_domain="fullstack", project_type="web")

    print("üöÄ MCP Configuration Agent - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

    # 1. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    print("1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
    recommendations = agent.get_recommended_servers_for_domain("fullstack")
    print(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {recommendations['recommended']}")

    # 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    print("\n2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:")
    install_result = await agent.install_mcp_server("brave-search")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_result}")

    # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:")
    test_config = MCPServerConfig(
        name="test-server",
        command="npx",
        args=["@modelcontextprotocol/server-filesystem", "/tmp"],
        description="–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"
    )
    validation = await agent.validate_server_config(test_config)
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: {validation}")

if __name__ == "__main__":
    asyncio.run(main())