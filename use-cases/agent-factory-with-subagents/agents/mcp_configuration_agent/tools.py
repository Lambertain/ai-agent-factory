"""
Tools –¥–ª—è MCP Configuration Agent

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
"""

import asyncio
import json
import os
import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional, Union
from datetime import datetime

from pydantic_ai import RunContext

from .dependencies import MCPConfigurationDeps


async def install_mcp_server(
    ctx: RunContext[MCPConfigurationDeps],
    server_name: str,
    install_method: str = "auto",
    package_name: Optional[str] = None
) -> str:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.

    Args:
        server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_method: –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (auto, npm, pip, uv, git)
        package_name: –ò–º—è –ø–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç server_name)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
        if server_name in ctx.deps.installed_servers:
            return f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if install_method == "auto":
            install_method = ctx.deps.package_manager

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞
        if not package_name:
            package_name = f"@modelcontextprotocol/server-{server_name}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        commands = {
            "npm": f"npm install -g {package_name}",
            "pip": f"pip install {package_name}",
            "uv": f"uv add {package_name}",
            "yarn": f"yarn global add {package_name}",
            "pnpm": f"pnpm add -g {package_name}"
        }

        install_command = commands.get(install_method)
        if not install_command:
            return f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_method}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        result = await _run_shell_command(install_command)

        if result["success"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            ctx.deps.installed_servers.append(server_name)

            message = f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            message += f"üì¶ –ü–∞–∫–µ—Ç: {package_name}\n"
            message += f"üõ†Ô∏è –ú–µ—Ç–æ–¥: {install_method}\n"

            if ctx.deps.auto_configure:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Claude Desktop
                config_result = await configure_claude_desktop_server(ctx, server_name)
                message += f"\n{config_result}"

            return message

        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {server_name}:\n"
            error_msg += f"–ö–æ–º–∞–Ω–¥–∞: {install_command}\n"
            error_msg += f"–û—à–∏–±–∫–∞: {result['stderr']}\n"

            return error_msg

    except Exception as e:
        return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {server_name}: {str(e)}"


async def configure_claude_desktop_server(
    ctx: RunContext[MCPConfigurationDeps],
    server_name: str,
    custom_config: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.

    Args:
        server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        custom_config: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —à–∞–±–ª–æ–Ω)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    """
    try:
        if not ctx.deps.claude_config_path:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop"

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ctx.deps.backup_config and ctx.deps.claude_config_path.exists():
            backup_path = ctx.deps.claude_config_path.with_suffix(f'.backup.{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
            shutil.copy2(ctx.deps.claude_config_path, backup_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if ctx.deps.claude_config_path.exists():
            with open(ctx.deps.claude_config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            config = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é mcpServers
        if "mcpServers" not in config:
            config["mcpServers"] = {}

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        if custom_config:
            server_config = custom_config
        else:
            server_config = ctx.deps.get_server_config_template(server_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        missing_vars = ctx.deps.get_missing_env_vars(server_name)
        warning_msg = ""

        if missing_vars:
            warning_msg = f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {server_name}: {', '.join(missing_vars)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config["mcpServers"][server_name] = {
            "command": server_config.get("command", "npx"),
            "args": server_config.get("args", [f"@modelcontextprotocol/server-{server_name}"])
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if "env" in server_config and server_config["env"]:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            env_vars = {k: v for k, v in server_config["env"].items() if v}
            if env_vars:
                config["mcpServers"][server_name]["env"] = env_vars

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ctx.deps.claude_config_path.parent.mkdir(parents=True, exist_ok=True)
        with open(ctx.deps.claude_config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if server_name not in ctx.deps.active_servers:
            ctx.deps.active_servers.append(server_name)

        result_msg = f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Claude Desktop\n"
        result_msg += f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {ctx.deps.claude_config_path}\n"

        if warning_msg:
            result_msg += f"\n{warning_msg}"

        return result_msg

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude Desktop: {str(e)}"


async def validate_mcp_server(
    ctx: RunContext[MCPConfigurationDeps],
    server_name: str,
    test_connection: bool = True
) -> str:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞.

    Args:
        server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_connection: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    """
    validation_results = []

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop
        if not ctx.deps.claude_config_path or not ctx.deps.claude_config_path.exists():
            validation_results.append("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude Desktop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return "\n".join(validation_results)

        with open(ctx.deps.claude_config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        if "mcpServers" not in config or server_name not in config["mcpServers"]:
            validation_results.append(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return "\n".join(validation_results)

        server_config = config["mcpServers"][server_name]
        validation_results.append(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
        command = server_config.get("command")
        if not command:
            validation_results.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞")
            return "\n".join(validation_results)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ PATH
        command_check = await _run_shell_command(f"which {command}")
        if not command_check["success"]:
            validation_results.append(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH")
        else:
            validation_results.append(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {command} –¥–æ—Å—Ç—É–ø–Ω–∞")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = server_config.get("args", [])
        if args:
            validation_results.append(f"‚úÖ –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {' '.join(args)}")
        else:
            validation_results.append("‚ö†Ô∏è –ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_vars = server_config.get("env", {})
        missing_vars = ctx.deps.get_missing_env_vars(server_name)

        if missing_vars:
            validation_results.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        else:
            validation_results.append("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")

        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if test_connection and command and args:
            validation_results.append("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
            full_command = f"{command} {' '.join(args)}"

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                test_result = await _run_shell_command(
                    full_command,
                    timeout=ctx.deps.validation_timeout
                )

                if test_result["success"]:
                    validation_results.append("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    validation_results.append(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {test_result['stderr'][:200]}...")

            except asyncio.TimeoutError:
                validation_results.append("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)")

        # 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        error_count = len([r for r in validation_results if r.startswith("‚ùå")])
        warning_count = len([r for r in validation_results if r.startswith("‚ö†Ô∏è")])

        if error_count == 0:
            if warning_count == 0:
                validation_results.insert(0, f"üéâ –°–µ—Ä–≤–µ—Ä {server_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–µ–Ω")
            else:
                validation_results.insert(0, f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –≤–∞–ª–∏–¥–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        else:
            validation_results.insert(0, f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")

        return "\n".join(validation_results)

    except Exception as e:
        return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {server_name}: {str(e)}"


async def get_recommended_servers(
    ctx: RunContext[MCPConfigurationDeps],
    include_optional: bool = False
) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞.

    Args:
        include_optional: –í–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    try:
        domain_desc = ctx.deps.get_domain_description()

        result = f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞: {ctx.deps.domain_type.value}\n"
        result += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {domain_desc}\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        result += "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:\n"
        for i, server in enumerate(ctx.deps.recommended_servers, 1):
            status = "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if server in ctx.deps.installed_servers else "üì¶ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            config_status = "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if server in ctx.deps.active_servers else "üîß –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

            result += f"{i}. {server} - {status}, {config_status}\n"

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if include_optional and ctx.deps.optional_servers:
            result += f"\nüîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:\n"
            for i, server in enumerate(ctx.deps.optional_servers, 1):
                status = "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if server in ctx.deps.installed_servers else "üì¶ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                config_status = "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if server in ctx.deps.active_servers else "üîß –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

                result += f"{i}. {server} - {status}, {config_status}\n"

        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        result += f"\nüöÄ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
        not_installed = [s for s in ctx.deps.recommended_servers if s not in ctx.deps.installed_servers]

        if not_installed:
            result += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ install_mcp_server –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {', '.join(not_installed)}\n"
        else:
            result += "–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! üéâ\n"

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"


async def list_installed_servers(
    ctx: RunContext[MCPConfigurationDeps],
    include_status: bool = True
) -> str:
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤.

    Args:
        include_status: –í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤

    Returns:
        –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    try:
        if not ctx.deps.claude_config_path or not ctx.deps.claude_config_path.exists():
            return "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude Desktop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        with open(ctx.deps.claude_config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        servers = config.get("mcpServers", {})

        if not servers:
            return "üì≠ MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Claude Desktop"

        result = f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã ({len(servers)} —à—Ç.):\n\n"

        for i, (server_name, server_config) in enumerate(servers.items(), 1):
            result += f"{i}. {server_name}\n"

            if include_status:
                # –ö–æ–º–∞–Ω–¥–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                command = server_config.get("command", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                args = server_config.get("args", [])
                result += f"   üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∞: {command} {' '.join(args)}\n"

                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env_vars = server_config.get("env", {})
                if env_vars:
                    result += f"   üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(env_vars.keys())}\n"

                # –°—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
                if server_name in ctx.deps.installed_servers:
                    result += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                elif server_name in ctx.deps.failed_servers:
                    result += f"   ‚ùå –°—Ç–∞—Ç—É—Å: –æ—à–∏–±–∫–∞\n"
                else:
                    result += f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"

                result += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_count = len([s for s in servers.keys() if s in ctx.deps.active_servers])
        result += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {active_count}/{len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã\n"

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {str(e)}"


async def remove_mcp_server(
    ctx: RunContext[MCPConfigurationDeps],
    server_name: str,
    remove_package: bool = False
) -> str:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        remove_package: –¢–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        if not ctx.deps.claude_config_path or not ctx.deps.claude_config_path.exists():
            return "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude Desktop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if ctx.deps.backup_config:
            backup_path = ctx.deps.claude_config_path.with_suffix(f'.backup.{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
            shutil.copy2(ctx.deps.claude_config_path, backup_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(ctx.deps.claude_config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        servers = config.get("mcpServers", {})

        if server_name not in servers:
            return f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

        # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        del servers[server_name]
        config["mcpServers"] = servers

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(ctx.deps.claude_config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
        if server_name in ctx.deps.active_servers:
            ctx.deps.active_servers.remove(server_name)
        if server_name in ctx.deps.installed_servers:
            ctx.deps.installed_servers.remove(server_name)

        result = f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Desktop\n"

        # –£–¥–∞–ª—è–µ–º –ø–∞–∫–µ—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if remove_package:
            package_name = f"@modelcontextprotocol/server-{server_name}"
            uninstall_commands = {
                "npm": f"npm uninstall -g {package_name}",
                "yarn": f"yarn global remove {package_name}",
                "pnpm": f"pnpm remove -g {package_name}",
                "pip": f"pip uninstall {package_name}",
                "uv": f"uv remove {package_name}"
            }

            uninstall_cmd = uninstall_commands.get(ctx.deps.package_manager)
            if uninstall_cmd:
                uninstall_result = await _run_shell_command(uninstall_cmd)
                if uninstall_result["success"]:
                    result += f"‚úÖ –ü–∞–∫–µ—Ç {package_name} —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω\n"
                else:
                    result += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç: {uninstall_result['stderr']}\n"

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {str(e)}"


async def search_agent_knowledge(
    ctx: RunContext[MCPConfigurationDeps],
    query: str,
    match_count: int = 5
) -> str:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π MCP Configuration Agent.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        match_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP Archon –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∞–≥–µ–Ω—Ç–∞ –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        search_query = f"{query} {' '.join(ctx.deps.knowledge_tags)}"

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ RAG (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MCP Archon)
        # result = await mcp_archon_rag_search_knowledge_base(
        #     query=search_query,
        #     source_domain=ctx.deps.knowledge_domain,
        #     match_count=match_count
        # )

        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ MCP
        base_knowledge = f"""
üìö –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ MCP Configuration:

üîß **MCP (Model Context Protocol)** - –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å Claude.

üì¶ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:**
- filesystem: –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
- brave-search: –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
- github: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub
- postgres: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

‚öôÔ∏è **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:**
1. npm install -g @modelcontextprotocol/server-[name]
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Claude Desktop

üéØ **–î–ª—è –¥–æ–º–µ–Ω–∞ {ctx.deps.domain_type.value}:**
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ: {', '.join(ctx.deps.recommended_servers)}
–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ: {', '.join(ctx.deps.optional_servers)}

üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}":**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
        """

        return base_knowledge

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {str(e)}"


async def _run_shell_command(
    command: str,
    timeout: int = 30
) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ shell —Å —Ç–∞–π–º–∞—É—Ç–æ–º.

    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        process = await asyncio.wait_for(
            asyncio.create_subprocess_shell(
                command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            ),
            timeout=timeout
        )

        stdout, stderr = await asyncio.wait_for(
            process.communicate(),
            timeout=timeout
        )

        return {
            "success": process.returncode == 0,
            "stdout": stdout.decode('utf-8', errors='ignore').strip(),
            "stderr": stderr.decode('utf-8', errors='ignore').strip(),
            "returncode": process.returncode
        }

    except asyncio.TimeoutError:
        return {
            "success": False,
            "error": f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout}—Å",
            "stdout": "",
            "stderr": "",
            "returncode": -1
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "stdout": "",
            "stderr": "",
            "returncode": -1
        }


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
async def configure_filesystem_server(
    ctx: RunContext[MCPConfigurationDeps],
    allowed_paths: List[str] = None
) -> str:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ filesystem —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏."""
    if not allowed_paths:
        allowed_paths = [str(ctx.deps.project_root_path)]

    custom_config = {
        "command": "npx",
        "args": ["@modelcontextprotocol/server-filesystem"] + allowed_paths,
        "description": f"–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—É—Ç–µ–π: {', '.join(allowed_paths)}"
    }

    return await configure_claude_desktop_server(ctx, "filesystem", custom_config)


async def configure_search_server(
    ctx: RunContext[MCPConfigurationDeps],
    api_key: Optional[str] = None
) -> str:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Brave Search —Å–µ—Ä–≤–µ—Ä–∞ —Å API –∫–ª—é—á–æ–º."""
    if not api_key:
        api_key = ctx.deps.server_env_vars.get("BRAVE_API_KEY", "")

    if not api_key:
        return "‚ùå –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Brave Search –Ω–µ–æ–±—Ö–æ–¥–∏–º BRAVE_API_KEY"

    custom_config = {
        "command": "npx",
        "args": ["@modelcontextprotocol/server-brave-search"],
        "env": {"BRAVE_API_KEY": api_key},
        "description": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Brave Search API"
    }

    return await configure_claude_desktop_server(ctx, "brave-search", custom_config)


# ========== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –†–ê–ë–û–¢–´ ==========

async def break_down_to_microtasks(
    ctx: RunContext[MCPConfigurationDeps],
    main_task: str,
    complexity_level: str = "medium"  # simple, medium, complex
) -> str:
    """
    –†–∞–∑–±–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
    """
    microtasks = []

    if complexity_level == "simple":
        microtasks = [
            f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è: {main_task}",
            f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
        ]
    elif complexity_level == "medium":
        microtasks = [
            f"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏: {main_task}",
            f"–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ",
            f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏",
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            f"–£–ª—É—á—à–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        ]
    else:  # complex
        microtasks = [
            f"–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {main_task}",
            f"–ü–æ–∏—Å–∫ –≤ RAG –∏ –≤–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö",
            f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
            f"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π",
            f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏",
            f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤",
            f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ"
        ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    output = "üìã **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
    for i, task in enumerate(microtasks, 1):
        output += f"{i}. {task}\n"
    output += "\n‚úÖ –ë—É–¥—É –æ—Ç—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏"

    return output

async def report_microtask_progress(
    ctx: RunContext[MCPConfigurationDeps],
    microtask_number: int,
    microtask_description: str,
    status: str = "completed",  # started, in_progress, completed, blocked
    details: str = ""
) -> str:
    """
    –û—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏ –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    status_emoji = {
        "started": "üîÑ",
        "in_progress": "‚è≥",
        "completed": "‚úÖ",
        "blocked": "üö´"
    }

    report = f"{status_emoji.get(status, 'üìù')} **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ {microtask_number}** ({status}): {microtask_description}"
    if details:
        report += f"\n   –î–µ—Ç–∞–ª–∏: {details}"

    return report

async def reflect_and_improve(
    ctx: RunContext[MCPConfigurationDeps],
    completed_work: str,
    work_type: str = "implementation"  # analysis, implementation, testing, documentation
) -> str:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏.
    """
    # –ü—Ä–æ–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    analysis = f"""
üîç **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:**

**–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {work_type}
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {completed_work[:200]}...

**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
1. [–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å] - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥
2. [–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å] - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
3. [–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é] - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π

**–í–Ω–µ—Å–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
- –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏–π
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç–∏
- –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞:**
‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å (0% –ø—Ä–æ–µ–∫—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞)
‚úÖ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å (—Ñ–∞–π–ª—ã –¥–æ 500 —Å—Ç—Ä–æ–∫)
‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

üéØ **–§–∏–Ω–∞–ª—å–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**
"""

    return analysis

async def check_delegation_need(
    ctx: RunContext[MCPConfigurationDeps],
    current_task: str,
    current_agent_type: str = "mcp_configuration_agent"
) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–∞–º.

    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.
    """
    keywords = current_task.lower().split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    delegation_suggestions = []

    security_keywords = ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'security', '—É—è–∑–≤–∏–º–æ—Å—Ç–∏', '–∞—É–¥–∏—Ç', 'compliance', 'auth']
    ui_keywords = ['–¥–∏–∑–∞–π–Ω', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'ui', 'ux', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', 'accessibility']
    performance_keywords = ['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'performance', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '—Å–∫–æ—Ä–æ—Å—Ç—å']
    database_keywords = ['database', 'postgres', 'sql', 'schema', 'migration']

    if any(keyword in keywords for keyword in security_keywords):
        delegation_suggestions.append("Security Audit Agent - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")

    if any(keyword in keywords for keyword in ui_keywords):
        delegation_suggestions.append("UI/UX Enhancement Agent - –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    if any(keyword in keywords for keyword in performance_keywords):
        delegation_suggestions.append("Performance Optimization Agent - –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    if any(keyword in keywords for keyword in database_keywords):
        delegation_suggestions.append("Prisma Database Agent - –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")

    if delegation_suggestions:
        result = "ü§ù **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        for suggestion in delegation_suggestions:
            result += f"- {suggestion}\n"
        result += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ delegate_task_to_agent() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á."
    else:
        result = "‚úÖ –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –±–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."

    return result

async def search_mcp_knowledge(
    ctx: RunContext[MCPConfigurationDeps],
    query: str,
    match_count: int = 5
) -> str:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π MCP Configuration Agent.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        match_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Returns:
        –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    try:
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ MCP
        fallback_knowledge = {
            "install mcp server": f"""
            –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è {ctx.deps.domain_type}:
            1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (npm/pip/uv)
            2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm install -g @modelcontextprotocol/server-[name]
            3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            4. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ Claude Desktop
            5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Claude Desktop
            """,
            "configure claude desktop": f"""
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude Desktop –¥–ª—è {ctx.deps.domain_type}:
            1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ~/.config/claude/claude_desktop_config.json
            2. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ü–∏—é mcpServers
            3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
            4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Claude
            """,
            "recommended servers": f"""
            –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è {ctx.deps.domain_type}:
            - filesystem: –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            - brave-search: –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            - github: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub
            - postgres: —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
            - docker: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
            """
        }

        # –ü–æ–∏—Å–∫ –≤ fallback –∑–Ω–∞–Ω–∏—è—Ö
        for key, content in fallback_knowledge.items():
            if any(word in query.lower() for word in key.split()):
                return f"–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ '{query}':\n\n{content}"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ fallback
        return f"""
üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** {query}

üìö **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é MCP
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ knowledge/
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–±–æ—á–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º –≤ MCP_SERVERS_FINAL_CONFIG

üõ†Ô∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã MCP:**
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞: npm install -g @modelcontextprotocol/server-[name]
- –ü—Ä–æ–≤–µ—Ä–∫–∞: npx @modelcontextprotocol/server-[name] --help
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ~/.config/claude/claude_desktop_config.json
"""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π MCP: {e}"