"""
Prompts для Psychology Test Generator Agent
"""

from typing import Dict, Any

def get_test_generator_prompt(
    psychological_domain: str = "general",
    target_population: str = "adults",
    test_type: str = "assessment",
    measurement_purpose: str = "screening"
) -> str:
    """
    Генерация системного промпта для генератора психологических тестов

    Args:
        psychological_domain: Психологический домен
        target_population: Целевая популяция
        test_type: Тип теста
        measurement_purpose: Цель измерения

    Returns:
        Системный промпт для агента
    """

    base_prompt = f"""Ты - эксперт по созданию психологических тестов с глубокой специализацией в психометрике и тест-дизайне для {_get_domain_name(psychological_domain)}.

Твоя роль: создавать научно обоснованные, валидные и надежные психологические тесты и диагностические инструменты.

ЭКСПЕРТИЗА:
• Психометрическая теория и практика создания тестов
• Валидация и стандартизация психологических инструментов
• Адаптация тестов под различные популяции и культуры
• Этические принципы психологического тестирования
• Современные подходы к цифровому тестированию

ПРИНЦИПЫ РАБОТЫ:
1. НАУЧНАЯ ОБОСНОВАННОСТЬ: опора на актуальные теоретические модели
2. ПСИХОМЕТРИЧЕСКОЕ КАЧЕСТВО: высокие стандарты валидности и надежности
3. ЭТИЧЕСКАЯ КОРРЕКТНОСТЬ: соблюдение принципов справедливого тестирования
4. ПОПУЛЯЦИОННАЯ АДАПТАЦИЯ: учет особенностей {_get_population_description(target_population)}
5. ПРАКТИЧЕСКАЯ ПРИМЕНИМОСТЬ: создание инструментов для реального использования

СПЕЦИАЛИЗАЦИЯ: {_get_test_type_description(test_type)}
ЦЕЛЬ ИЗМЕРЕНИЯ: {_get_measurement_purpose_description(measurement_purpose)}
ЦЕЛЕВАЯ ПОПУЛЯЦИЯ: {_get_population_considerations(target_population)}

{_get_domain_specific_guidance(psychological_domain)}

АЛГОРИТМ СОЗДАНИЯ ТЕСТОВ:
1. Анализ конструкта и определение подшкал
2. Разработка пула тестовых вопросов
3. Создание системы оценки и интерпретации
4. Валидация содержания и психометрических свойств
5. Адаптация под целевую популяцию
6. Документирование и создание руководства по использованию

ФОРМАТ ВЫХОДНЫХ ДАННЫХ:
• Структурированный тест с вопросами и системой оценки
• Психометрические характеристики и валидационные заметки
• Руководство по администрированию и интерпретации
• Этические рекомендации и ограничения использования

Создавай тесты, которые соответствуют международным стандартам психологического тестирования и могут быть использованы в клинической практике, исследованиях или скрининге."""

    return base_prompt

def get_question_generation_prompt(
    construct: str,
    subscale: str,
    target_population: str,
    response_format: str
) -> str:
    """Промпт для генерации конкретных вопросов"""

    return f"""
Создай тестовые вопросы для измерения {construct} (подшкала: {subscale}).

ТРЕБОВАНИЯ К ВОПРОСАМ:
• Ясная и однозначная формулировка
• Соответствие уровню {_get_language_level(target_population)}
• Избегание двойных отрицаний и сложных конструкций
• Культурная нейтральность и отсутствие предвзятостей
• Поведенческие индикаторы вместо абстрактных понятий

ФОРМАТ ОТВЕТОВ: {_get_response_format_description(response_format)}

ПОПУЛЯЦИОННЫЕ ОСОБЕННОСТИ: {_get_population_adaptations(target_population)}

ВКЛЮЧИ:
• Прямые и обратные вопросы для контроля согласованности
• Различные уровни интенсивности конструкта
• Конкретные примеры и ситуации
• Валидационные элементы для проверки внимательности

ИЗБЕГАЙ:
• Ведущих или наводящих формулировок
• Клинической терминологии без объяснений
• Предположений о жизненном опыте
• Эмоционально заряженных выражений


**КРИТИЧЕСКИ ВАЖНЫЕ ПРАВИЛА КОДИРОВАНИЯ:**
- НИКОГДА не использовать эмодзи/смайлы в Python коде или скриптах
- ВСЕГДА использовать UTF-8 кодировку, НЕ Unicode символы в коде
- ВСЕ комментарии и строки должны быть на русском языке в UTF-8
- НИКОГДА не использовать эмодзи в print() функциях
- Максимальный размер файла - 500 строк, при превышении разбивать на модули
"""

def get_scoring_system_prompt(
    test_structure: Dict[str, Any],
    measurement_purpose: str,
    psychological_domain: str
) -> str:
    """Промпт для создания системы оценки"""

    return f"""
Создай комплексную систему оценки для психологического теста.

СТРУКТУРА ТЕСТА:
• Подшкалы: {test_structure.get('subscales', [])}
• Общее количество вопросов: {test_structure.get('question_count', 'не указано')}
• Формат ответов: {test_structure.get('response_format', 'не указан')}

ЦЕЛЬ ИЗМЕРЕНИЯ: {measurement_purpose}
ПСИХОЛОГИЧЕСКИЙ ДОМЕН: {psychological_domain}

СОЗДАЙ:
1. СИСТЕМА ПОДСЧЕТА БАЛЛОВ:
   - Алгоритм для каждой подшкалы
   - Обработка обратных вопросов
   - Правила обработки пропущенных ответов
   - Расчет общего балла

2. ИНТЕРПРЕТАЦИОННЫЕ НОРМЫ:
   - Диапазоны значений (низкий/средний/высокий)
   - Cut-off точки для {measurement_purpose}
   - Клинические пороги при необходимости

3. РУКОВОДСТВО ПО ИНТЕРПРЕТАЦИИ:
   - Что означают различные уровни баллов
   - Как интерпретировать профиль подшкал
   - Ограничения и предостережения

4. ВАЛИДАЦИОННЫЕ ИНДИКАТОРЫ:
   - Проверка валидности ответов
   - Детекция случайных или неискренних ответов
   - Индексы качества данных

УЧТИ:
• Психометрические стандарты валидности и надежности
• Этические принципы интерпретации результатов
• Практические потребности пользователей теста


**КРИТИЧЕСКИ ВАЖНЫЕ ПРАВИЛА КОДИРОВАНИЯ:**
- НИКОГДА не использовать эмодзи/смайлы в Python коде или скриптах
- ВСЕГДА использовать UTF-8 кодировку, НЕ Unicode символы в коде
- ВСЕ комментарии и строки должны быть на русском языке в UTF-8
- НИКОГДА не использовать эмодзи в print() функциях
- Максимальный размер файла - 500 строк, при превышении разбивать на модули
"""

def get_validation_prompt(
    test_content: Dict[str, Any],
    validation_type: str = "comprehensive"
) -> str:
    """Промпт для валидации теста"""

    return f"""
Проведи {validation_type} валидацию психологического теста.

АНАЛИЗИРУЕМЫЙ ТЕСТ:
• Конструкт: {test_content.get('construct', 'не указан')}
• Количество вопросов: {len(test_content.get('questions', []))}
• Подшкалы: {test_content.get('subscales', [])}

ОБЛАСТИ ВАЛИДАЦИИ:

1. СОДЕРЖАТЕЛЬНАЯ ВАЛИДНОСТЬ:
   - Соответствие вопросов измеряемому конструкту
   - Полнота покрытия теоретической области
   - Экспертная оценка релевантности

2. ЯЗЫКОВОЙ АНАЛИЗ:
   - Читабельность и понятность
   - Соответствие целевой популяции
   - Отсутствие двусмысленностей

3. ОЦЕНКА ПРЕДВЗЯТОСТЕЙ:
   - Гендерная, культурная, возрастная справедливость
   - Доступность для различных групп
   - Потенциальные дискриминационные элементы

4. ПСИХОМЕТРИЧЕСКИЕ ТРЕБОВАНИЯ:
   - Ожидаемая надежность и валидность
   - Факторная структура
   - Дискриминативная способность вопросов

5. ЭТИЧЕСКИЕ СООБРАЖЕНИЯ:
   - Потенциальный вред или дискомфорт
   - Конфиденциальность и защита данных
   - Информированное согласие

ПРЕДОСТАВЬ:
• Детальный анализ по каждой области
• Конкретные рекомендации по улучшению
• Оценку готовности к использованию
• План дальнейшей валидации


**КРИТИЧЕСКИ ВАЖНЫЕ ПРАВИЛА КОДИРОВАНИЯ:**
- НИКОГДА не использовать эмодзи/смайлы в Python коде или скриптах
- ВСЕГДА использовать UTF-8 кодировку, НЕ Unicode символы в коде
- ВСЕ комментарии и строки должны быть на русском языке в UTF-8
- НИКОГДА не использовать эмодзи в print() функциях
- Максимальный размер файла - 500 строк, при превышении разбивать на модули
"""

def get_adaptation_prompt(
    original_test: Dict[str, Any],
    target_population: str,
    adaptation_requirements: str
) -> str:
    """Промпт для адаптации теста под популяцию"""

    return f"""
Адаптируй психологический тест для {target_population}.

ОРИГИНАЛЬНЫЙ ТЕСТ:
• Изначальная популяция: {original_test.get('target_population', 'не указана')}
• Конструкт: {original_test.get('construct', 'не указан')}
• Количество вопросов: {len(original_test.get('questions', []))}

ЦЕЛЕВАЯ ПОПУЛЯЦИЯ: {target_population}
ТРЕБОВАНИЯ К АДАПТАЦИИ: {adaptation_requirements}

НАПРАВЛЕНИЯ АДАПТАЦИИ:

1. ЯЗЫКОВАЯ АДАПТАЦИЯ:
   {_get_language_adaptation_guidance(target_population)}

2. КУЛЬТУРНАЯ АДАПТАЦИЯ:
   {_get_cultural_adaptation_guidance(target_population)}

3. ВОЗРАСТНАЯ АДАПТАЦИЯ:
   {_get_age_adaptation_guidance(target_population)}

4. ФОРМАТ АДМИНИСТРИРОВАНИЯ:
   {_get_administration_adaptation_guidance(target_population)}

СОХРАНИ:
• Психометрические свойства оригинала
• Основную структуру и конструкт
• Сопоставимость результатов

АДАПТИРУЙ:
• Язык и терминологию
• Примеры и контекст
• Формат представления
• Инструкции по выполнению

ДОКУМЕНТИРУЙ:
• Все внесенные изменения
• Обоснование адаптаций
• Влияние на валидность
• Рекомендации по валидации


**КРИТИЧЕСКИ ВАЖНЫЕ ПРАВИЛА КОДИРОВАНИЯ:**
- НИКОГДА не использовать эмодзи/смайлы в Python коде или скриптах
- ВСЕГДА использовать UTF-8 кодировку, НЕ Unicode символы в коде
- ВСЕ комментарии и строки должны быть на русском языке в UTF-8
- НИКОГДА не использовать эмодзи в print() функциях
- Максимальный размер файла - 500 строк, при превышении разбивать на модули
"""

def get_battery_creation_prompt(
    domains: list,
    integration_approach: str,
    time_constraints: Dict[str, Any]
) -> str:
    """Промпт для создания батареи тестов"""

    return f"""
Создай интегрированную батарею психологических тестов.

ДОМЕНЫ ДЛЯ ВКЛЮЧЕНИЯ: {', '.join(domains)}
ПОДХОД К ИНТЕГРАЦИИ: {integration_approach}
ВРЕМЕННЫЕ ОГРАНИЧЕНИЯ: {time_constraints}

ЗАДАЧИ:

1. АРХИТЕКТУРА БАТАРЕИ:
   - Логическая последовательность тестов
   - Оптимальное распределение времени
   - Точки интеграции между доменами
   - Стратегия минимизации утомления

2. КОМПОНЕНТНЫЕ ТЕСТЫ:
   - Краткие, но валидные инструменты для каждого домена
   - Сбалансированное покрытие конструктов
   - Совместимые форматы ответов
   - Единый стиль и сложность

3. ИНТЕГРАЦИОННЫЙ АНАЛИЗ:
   - Выявление пересечений между доменами
   - Создание композитных показателей
   - Профильный анализ результатов
   - Интерпретация паттернов

4. АДМИНИСТРИРОВАНИЕ:
   - Единый протокол проведения
   - Рекомендации по перерывам
   - Технические требования
   - Обучение администраторов

5. ВАЛИДАЦИЯ БАТАРЕИ:
   - Психометрические свойства на уровне батареи
   - Межтестовые корреляции
   - Общая валидность конструкта
   - Нормативные данные

ПРИНЦИПЫ:
• Клиническая или исследовательская полезность
• Эффективность по времени
• Минимальная избыточность
• Максимальная информативность


**КРИТИЧЕСКИ ВАЖНЫЕ ПРАВИЛА КОДИРОВАНИЯ:**
- НИКОГДА не использовать эмодзи/смайлы в Python коде или скриптах
- ВСЕГДА использовать UTF-8 кодировку, НЕ Unicode символы в коде
- ВСЕ комментарии и строки должны быть на русском языке в UTF-8
- НИКОГДА не использовать эмодзи в print() функциях
- Максимальный размер файла - 500 строк, при превышении разбивать на модули
"""

def get_ethical_guidelines_prompt() -> str:
    """Промпт для этических рекомендаций"""

    return """
Предоставь этические рекомендации для психологического тестирования.

ОСНОВНЫЕ ПРИНЦИПЫ:

1. ИНФОРМИРОВАННОЕ СОГЛАСИЕ:
   - Ясное объяснение цели тестирования
   - Описание процедуры и времени
   - Права участника и возможность отказа
   - Использование и хранение результатов

2. КОНФИДЕНЦИАЛЬНОСТЬ:
   - Защита персональных данных
   - Ограничения доступа к результатам
   - Анонимизация при исследованиях
   - Соблюдение законодательства о данных

3. СПРАВЕДЛИВОСТЬ:
   - Отсутствие дискриминации
   - Равные возможности для всех групп
   - Культурная чувствительность
   - Адаптации для людей с ограничениями

4. КОМПЕТЕНТНОСТЬ:
   - Квалификация администраторов
   - Правильная интерпретация результатов
   - Знание ограничений инструмента
   - Продолжающееся образование

5. БЛАГОПОЛУЧИЕ:
   - Минимизация потенциального вреда
   - Поддержка при дистрессе
   - Ресурсы помощи при необходимости
   - Мониторинг воздействия тестирования

СПЕЦИАЛЬНЫЕ СООБРАЖЕНИЯ:
• Тестирование уязвимых популяций
• Кросс-культурные адаптации
• Цифровое тестирование и приватность
• Использование ИИ в интерпретации
"""

# Вспомогательные функции для генерации специфичного контента

def _get_domain_name(domain: str) -> str:
    """Получить название домена"""
    domain_names = {
        "anxiety": "тревожных расстройств",
        "depression": "депрессивных расстройств",
        "trauma": "травмы и ПТСР",
        "personality": "личностной психологии",
        "stress": "стрессовых состояний",
        "relationships": "психологии отношений",
        "general": "общей психологии"
    }
    return domain_names.get(domain, "психологического тестирования")

def _get_population_description(population: str) -> str:
    """Получить описание популяции"""
    descriptions = {
        "adults": "взрослых участников (18-65 лет)",
        "adolescents": "подростков (12-18 лет) с учетом развития личности",
        "children": "детей (6-12 лет) с особым вниманием к развитию",
        "elderly": "пожилых людей (65+) с учетом возрастных особенностей",
        "couples": "пар с фокусом на динамику отношений",
        "families": "семей с системным подходом"
    }
    return descriptions.get(population, "целевой популяции")

def _get_test_type_description(test_type: str) -> str:
    """Получить описание типа теста"""
    descriptions = {
        "assessment": "Комплексная психологическая оценка состояния и характеристик",
        "diagnostic": "Диагностические инструменты для выявления конкретных состояний",
        "screening": "Скрининговые тесты для первичного выявления проблем",
        "progress": "Мониторинг изменений и прогресса в процессе вмешательства",
        "personality": "Оценка устойчивых личностных характеристик и черт",
        "research": "Исследовательские инструменты для научных целей"
    }
    return descriptions.get(test_type, "Психологическое тестирование")

def _get_measurement_purpose_description(purpose: str) -> str:
    """Получить описание цели измерения"""
    descriptions = {
        "screening": "раннее выявление и скрининг проблем",
        "diagnosis": "диагностика и дифференциальная диагностика",
        "monitoring": "отслеживание изменений и прогресса",
        "research": "научные исследования и сбор данных",
        "selection": "отбор и селекция кандидатов",
        "development": "планирование развития и вмешательств"
    }
    return descriptions.get(purpose, "психологическое измерение")

def _get_population_considerations(population: str) -> str:
    """Получить соображения по популяции"""
    considerations = {
        "adults": "Учет профессиональной деятельности, семейного статуса, социально-экономического положения",
        "adolescents": "Особое внимание к развитию идентичности, академическому стрессу, социальному давлению",
        "children": "Учет когнитивного развития, необходимость вовлечения родителей, игровые элементы",
        "elderly": "Учет когнитивных изменений, физических ограничений, жизненного опыта",
        "couples": "Фокус на динамике отношений, коммуникационных паттернах, совместном функционировании",
        "families": "Системный подход, иерархия, границы, семейные роли и функции"
    }
    return considerations.get(population, "Учет особенностей целевой группы")

def _get_domain_specific_guidance(domain: str) -> str:
    """Получить доменно-специфичные рекомендации"""
    guidance = {
        "anxiety": """
СПЕЦИФИКА ТРЕВОЖНЫХ РАССТРОЙСТВ:
• Различение нормальной и патологической тревоги
• Учет соматических и когнитивных симптомов
• Дифференциация типов тревожности (генерализованная, социальная, паническая)
• Оценка функциональных нарушений
• Мониторинг триггеров и копинг-механизмов""",

        "depression": """
СПЕЦИФИКА ДЕПРЕССИВНЫХ РАССТРОЙСТВ:
• Оценка настроения, ангедонии, когнитивных симптомов
• Дифференциация уровней тяжести
• Оценка суицидального риска (требует особой осторожности)
• Учет соматических проявлений
• Мониторинг функционального уровня""",

        "trauma": """
СПЕЦИФИКА ТРАВМЫ И ПТСР:
• Оценка травматического воздействия и симптомов ПТСР
• Учет диссоциативных симптомов
• Осторожность в отношении ретравматизации
• Оценка ресурсов и копинга
• Культурные аспекты травмы""",

        "personality": """
СПЕЦИФИКА ЛИЧНОСТНОГО ТЕСТИРОВАНИЯ:
• Оценка устойчивых паттернов поведения и мышления
• Дифференциация состояний и черт
• Учет контекстуальной вариативности
• Длительная стабильность характеристик
• Избегание патологизации нормальных вариаций"""
    }

    return guidance.get(domain, "")

def _get_language_level(population: str) -> str:
    """Получить рекомендуемый уровень языка"""
    levels = {
        "children": "язык 6-8 класса с простыми конструкциями",
        "adolescents": "язык 8-10 класса с современной лексикой",
        "adults": "язык 8-10 класса, избегая профессионального жаргона",
        "elderly": "простой и ясный язык без сленга",
        "special_needs": "максимально упрощенный язык"
    }
    return levels.get(population, "язык 8-го класса")

def _get_response_format_description(format_type: str) -> str:
    """Получить описание формата ответов"""
    descriptions = {
        "likert_5": "5-балльная шкала Лайкерта от 'совершенно не согласен' до 'полностью согласен'",
        "likert_7": "7-балльная шкала Лайкерта с расширенными градациями согласия",
        "frequency": "Шкала частоты от 'никогда' до 'всегда'",
        "intensity": "Шкала интенсивности от 'совсем не беспокоит' до 'очень сильно беспокоит'",
        "binary": "Дихотомические ответы 'да/нет' или 'верно/неверно'",
        "multiple_choice": "Множественный выбор из предложенных вариантов"
    }
    return descriptions.get(format_type, "стандартный формат ответов")

def _get_population_adaptations(population: str) -> str:
    """Получить адаптации под популяцию"""
    adaptations = {
        "children": "Короткие предложения, конкретные примеры, избегание абстракций, возможные визуальные элементы",
        "adolescents": "Современные примеры, релевантные ситуации (школа, друзья), акцент на приватность",
        "elderly": "Крупный шрифт, простая навигация, медицинские соображения, не спешить",
        "couples": "Фокус на отношения, диадические формулировки, совместные ситуации",
        "clinical": "Клинически релевантные примеры, возможность дискомфорта, протоколы поддержки"
    }
    return adaptations.get(population, "стандартные адаптации")

def _get_language_adaptation_guidance(population: str) -> str:
    """Руководство по языковой адаптации"""
    guidance = {
        "children": "Упрощение словаря, короткие предложения, конкретные понятия вместо абстрактных",
        "adolescents": "Современная лексика без сленга, примеры из школьной/социальной жизни",
        "elderly": "Формальный, уважительный тон, избегание современных технологических терминов",
        "non_native": "Простая грамматика, общеупотребительная лексика, избегание идиом"
    }
    return guidance.get(population, "Адаптация языка под целевую группу")

def _get_cultural_adaptation_guidance(population: str) -> str:
    """Руководство по культурной адаптации"""
    return """
• Избегание культурно-специфичных примеров и ситуаций
• Учет различий в выражении эмоций и симптомов
• Адаптация под коллективистские vs индивидуалистские ценности
• Гендерные роли и семейные структуры
• Религиозные и духовные соображения
"""

def _get_age_adaptation_guidance(population: str) -> str:
    """Руководство по возрастной адаптации"""
    guidance = {
        "children": "Игровые элементы, короткие сессии, вовлечение родителей, развивающий подход",
        "adolescents": "Вопросы идентичности и развития, академические и социальные стрессоры",
        "adults": "Профессиональные, семейные, финансовые аспекты жизни",
        "elderly": "Здоровье, утраты, жизненный обзор, семейные отношения"
    }
    return guidance.get(population, "Возрастно-специфичные адаптации")

def _get_administration_adaptation_guidance(population: str) -> str:
    """Руководство по адаптации администрирования"""
    guidance = {
        "children": "Присутствие родителя, игровая обстановка, частые перерывы, поощрения",
        "adolescents": "Приватность, цифровой формат, гибкие временные рамки",
        "elderly": "Тихое пространство, крупный шрифт, больше времени, техническая поддержка",
        "clinical": "Профессиональная обстановка, протоколы кризисного вмешательства"
    }
    return guidance.get(population, "Стандартные рекомендации по администрированию")