"""–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Prisma Database Agent."""

import re
import json
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from pydantic_ai import RunContext

from .dependencies import PrismaDatabaseDependencies


@dataclass
class SchemaAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Prisma —Å—Ö–µ–º—ã."""
    performance_score: float
    issues: List[str]
    recommendations: List[str]
    index_suggestions: List[str]
    normalization_issues: List[str]


@dataclass
class QueryOptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    original_query: str
    optimized_query: str
    performance_gain: str
    explanation: str
    n_plus_one_fixes: List[str]


@dataclass
class MigrationPlan:
    """–ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    migration_steps: List[str]
    rollback_steps: List[str]
    estimated_time: str
    breaking_changes: List[str]
    data_backup_required: bool


@dataclass
class SlowQueryAnalysis:
    """–ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    query: str
    execution_time: float
    bottlenecks: List[str]
    optimization_suggestions: List[str]
    index_recommendations: List[str]


async def analyze_schema_performance(
    ctx: RunContext[PrismaDatabaseDependencies],
    schema_content: str,
    focus_areas: Optional[List[str]] = None
) -> SchemaAnalysisResult:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Prisma —Å—Ö–µ–º—ã.

    Args:
        schema_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ schema.prisma —Ñ–∞–π–ª–∞
        focus_areas: –û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞: ["indexes", "relations", "types", "constraints"]
    """
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é Prisma —Å—Ö–µ–º—É...")

    if focus_areas is None:
        focus_areas = ["indexes", "relations", "types", "constraints"]

    issues = []
    recommendations = []
    index_suggestions = []
    normalization_issues = []

    # –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –∏ —Å–≤—è–∑–µ–π
    models = re.findall(r'model\s+(\w+)\s*{([^}]+)}', schema_content, re.DOTALL)

    for model_name, model_content in models:
        print(f"  üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª—å {model_name}...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        if "indexes" in focus_areas:
            if "@@index" not in model_content and "@@unique" not in model_content:
                if any(field in model_content.lower() for field in ["email", "name", "title", "slug"]):
                    index_suggestions.append(f"–ú–æ–¥–µ–ª—å {model_name}: –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π")

        # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π
        if "relations" in focus_areas:
            relations = re.findall(r'(\w+)\s+(\w+)\[\]?\s*@relation', model_content)
            if len(relations) > 5:
                issues.append(f"–ú–æ–¥–µ–ª—å {model_name}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–≤—è–∑–µ–π ({len(relations)}), —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if "types" in focus_areas:
            if "String @db.Text" in model_content:
                recommendations.append(f"–ú–æ–¥–µ–ª—å {model_name}: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VARCHAR —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –≤–º–µ—Å—Ç–æ TEXT –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ")

    # –ê–Ω–∞–ª–∏–∑ enum'–æ–≤
    enums = re.findall(r'enum\s+(\w+)\s*{([^}]+)}', schema_content)
    if len(enums) > 10:
        recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É enum'–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏")

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_score = 100.0
    performance_score -= len(issues) * 10
    performance_score -= len(normalization_issues) * 15
    performance_score = max(0, performance_score)

    return SchemaAnalysisResult(
        performance_score=performance_score,
        issues=issues,
        recommendations=recommendations,
        index_suggestions=index_suggestions,
        normalization_issues=normalization_issues
    )


async def optimize_queries(
    ctx: RunContext[PrismaDatabaseDependencies],
    query_code: str,
    query_type: str = "select"
) -> QueryOptimizationResult:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç Prisma –∑–∞–ø—Ä–æ—Å—ã.

    Args:
        query_code: –ö–æ–¥ Prisma –∑–∞–ø—Ä–æ—Å–∞
        query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - "select", "create", "update", "delete"
    """
    print(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é {query_type} –∑–∞–ø—Ä–æ—Å...")

    original_query = query_code
    optimized_query = query_code
    n_plus_one_fixes = []

    # –ü–æ–∏—Å–∫ N+1 –ø—Ä–æ–±–ª–µ–º
    if ".findMany()" in query_code and "include:" not in query_code:
        n_plus_one_fixes.append("–î–æ–±–∞–≤–∏—Ç—å include –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        optimized_query = query_code.replace(
            ".findMany()",
            ".findMany({\n    include: {\n      // TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤—è–∑–∏\n    }\n  })"
        )

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è select –ø–æ–ª–µ–π
    if "select:" not in query_code and "include:" in query_code:
        n_plus_one_fixes.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å select –≤–º–µ—Å—Ç–æ include –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if ".findMany()" in query_code and "take:" not in query_code:
        n_plus_one_fixes.append("–î–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é (take/skip) –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if ".findMany()" in query_code and "orderBy:" not in query_code:
        n_plus_one_fixes.append("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    performance_gain = "15-30%" if n_plus_one_fixes else "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è"

    explanation = f"""
–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã—è–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {len(n_plus_one_fixes)}
- –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: {', '.join(n_plus_one_fixes[:3]) if n_plus_one_fixes else '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω'}
"""

    return QueryOptimizationResult(
        original_query=original_query,
        optimized_query=optimized_query,
        performance_gain=performance_gain,
        explanation=explanation.strip(),
        n_plus_one_fixes=n_plus_one_fixes
    )


async def create_migration_plan(
    ctx: RunContext[PrismaDatabaseDependencies],
    schema_changes: str,
    production_ready: bool = False
) -> MigrationPlan:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã.

    Args:
        schema_changes: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã
        production_ready: –ì–æ—Ç–æ–≤ –ª–∏ –ø–ª–∞–Ω –¥–ª—è production
    """
    print(f"üìã –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏...")

    migration_steps = []
    rollback_steps = []
    breaking_changes = []

    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "add" in schema_changes.lower():
        migration_steps.append("1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π/—Ç–∞–±–ª–∏—Ü")
        rollback_steps.append("1. –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π/—Ç–∞–±–ª–∏—Ü")

    if "remove" in schema_changes.lower() or "delete" in schema_changes.lower():
        breaking_changes.append("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        migration_steps.append("2. –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∞–Ω–Ω—ã—Ö")
        migration_steps.append("3. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π/—Ç–∞–±–ª–∏—Ü")
        rollback_steps.append("2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup")

    if "rename" in schema_changes.lower():
        migration_steps.append("2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã")
        rollback_steps.append("2. –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ä—ã—Ö –∏–º–µ–Ω –ø–æ–ª–µ–π")

    if "index" in schema_changes.lower():
        migration_steps.append("3. –°–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤")
        rollback_steps.append("3. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
    if not migration_steps:
        migration_steps.append("1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã")
        migration_steps.append("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
        migration_steps.append("3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    # –û–±—â–∏–µ —à–∞–≥–∏ –¥–ª—è production
    if production_ready:
        migration_steps.insert(0, "0. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        migration_steps.append("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
        migration_steps.append("5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PostgreSQL")

    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    estimated_time = "5-15 –º–∏–Ω—É—Ç" if not breaking_changes else "30-60 –º–∏–Ω—É—Ç"

    return MigrationPlan(
        migration_steps=migration_steps,
        rollback_steps=rollback_steps,
        estimated_time=estimated_time,
        breaking_changes=breaking_changes,
        data_backup_required=production_ready or bool(breaking_changes)
    )


async def analyze_slow_queries(
    ctx: RunContext[PrismaDatabaseDependencies],
    query_log: str,
    threshold_ms: float = 1000.0
) -> List[SlowQueryAnalysis]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤.

    Args:
        query_log: –õ–æ–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        threshold_ms: –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    """
    print(f"üêå –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ—Ä–æ–≥: {threshold_ms}ms)...")

    results = []

    # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–º–µ—Ä–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    if "SELECT" in query_log or "findMany" in query_log:
        bottlenecks = []
        optimization_suggestions = []
        index_recommendations = []

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
        if "JOIN" in query_log.upper() or "include:" in query_log:
            bottlenecks.append("–°–ª–æ–∂–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            optimization_suggestions.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å select –≤–º–µ—Å—Ç–æ include –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π")

        if "ORDER BY" in query_log.upper() or "orderBy:" in query_log:
            bottlenecks.append("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            index_recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")

        if "WHERE" in query_log.upper() or "where:" in query_log:
            bottlenecks.append("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤")
            index_recommendations.append("–°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        results.append(SlowQueryAnalysis(
            query=query_log[:200] + "..." if len(query_log) > 200 else query_log,
            execution_time=threshold_ms + 500,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            bottlenecks=bottlenecks,
            optimization_suggestions=optimization_suggestions,
            index_recommendations=index_recommendations
        ))

    if not results:
        # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        results.append(SlowQueryAnalysis(
            query="–ü—Ä–∏–º–µ—Ä –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            execution_time=0.0,
            bottlenecks=["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
            optimization_suggestions=["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
            index_recommendations=["–í–∫–ª—é—á–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL"]
        ))

    return results


async def search_agent_knowledge(
    ctx: RunContext[PrismaDatabaseDependencies],
    query: str,
    match_count: int = 5
) -> str:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Prisma Database Agent —á–µ—Ä–µ–∑ Archon RAG.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        match_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP Archon –¥–ª—è –ø–æ–∏—Å–∫–∞
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mcp__archon__rag_search_knowledge_base
        # –∫–æ–≥–¥–∞ MCP —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
        search_tags = getattr(ctx.deps, 'knowledge_tags', ['prisma-database', 'agent-knowledge'])

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MCP Archon
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ mcp__archon__rag_search_knowledge_base
        agent_name = getattr(ctx.deps, 'agent_name', 'prisma_database_agent')
        domain_type = getattr(ctx.deps, 'domain_type', 'universal')

        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        knowledge_base_response = f"""
üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Prisma Database Agent:**

üîç **–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∞–π–¥–µ–Ω–æ:**

**1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Prisma –∑–∞–ø—Ä–æ—Å–æ–≤ ({domain_type}):**
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ select –≤–º–µ—Å—Ç–æ include –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
   - –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö (take/skip)
   - –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö where —É—Å–ª–æ–≤–∏–π
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ transactions –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   - –í–∫–ª—é—á–∏—Ç–µ query batching –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

**2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º–∞–º–∏ PostgreSQL:**
   - B-tree –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ ID
   - GIN –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ JSONB
   - Partial –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (WHERE deleted_at IS NULL)
   - Composite –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   - Unique constraints –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª

**3. –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**
   ```bash
   # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
   prisma migrate dev --name add_user_profile

   # –ü—Ä–æ–¥–∞–∫—à–Ω
   prisma migrate deploy

   # –°–±—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   prisma migrate reset
   ```

**4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {domain_type}:**
   - Connection pooling: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   - Query optimization: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ EXPLAIN ANALYZE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   - Read replicas: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–∏—Ç–∞—é—â–∏—Ö –∏ –ø–∏—à—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   - Caching: Redis –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - Monitoring: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

**5. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ö–µ–º:**
   ```prisma
   model User {{
     id        String   @id @default(cuid())
     email     String   @unique
     profile   Profile?
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     @@map("users")
   }}
   ```

‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Archon –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.
–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω–æ–≥–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

üîß **–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**
- "prisma optimization", "database schema", "migrations", "performance tuning"

**–¢–µ–≥–∏ –ø–æ–∏—Å–∫–∞:** {', '.join(search_tags)}
"""

        return knowledge_base_response

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}"


# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
__all__ = [
    "analyze_schema_performance",
    "optimize_queries",
    "create_migration_plan",
    "analyze_slow_queries",
    "search_agent_knowledge",
    "SchemaAnalysisResult",
    "QueryOptimizationResult",
    "MigrationPlan",
    "SlowQueryAnalysis"
]