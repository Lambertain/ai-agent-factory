"""Command line interface –¥–ª—è Prisma Database Agent."""

import asyncio
import click
from pathlib import Path
from typing import Optional
from .agent import run_prisma_analysis


@click.group()
def cli():
    """Prisma Database Agent –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
    pass


@cli.command()
@click.argument('schema_path', type=click.Path(exists=True))
@click.option('--analysis-type', '-t',
              type=click.Choice(['full', 'schema', 'queries', 'migrations', 'performance']),
              default='full',
              help='–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
@click.option('--project-path', '-p',
              type=click.Path(),
              help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--output', '-o',
              type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
def analyze_schema(schema_path: str, analysis_type: str, project_path: Optional[str], output: Optional[str]):
    """–ê–Ω–∞–ª–∏–∑ Prisma —Å—Ö–µ–º—ã."""

    click.echo(f"üóÑÔ∏è –ê–Ω–∞–ª–∏–∑ Prisma —Å—Ö–µ–º—ã: {schema_path}")
    click.echo(f"üìã –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")

    # –ß—Ç–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    with open(schema_path, 'r', encoding='utf-8') as f:
        schema_content = f.read()

    context = f"–ê–Ω–∞–ª–∏–∑ Prisma —Å—Ö–µ–º—ã: {schema_path}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{schema_content}"

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    try:
        result = asyncio.run(run_prisma_analysis(
            context=context,
            project_path=project_path or str(Path(schema_path).parent),
            analysis_type=analysis_type
        ))

        click.echo("\n" + "="*50)
        click.echo("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        click.echo("="*50)
        click.echo(result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(result)
            click.echo(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('query', type=str)
@click.option('--query-type', '-t',
              type=click.Choice(['select', 'create', 'update', 'delete']),
              default='select',
              help='–¢–∏–ø Prisma –∑–∞–ø—Ä–æ—Å–∞')
@click.option('--output', '-o',
              type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
def optimize_query(query: str, query_type: str, output: Optional[str]):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Prisma –∑–∞–ø—Ä–æ—Å–∞."""

    click.echo(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {query_type} –∑–∞–ø—Ä–æ—Å–∞")
    click.echo(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query[:100]}...")

    context = f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Prisma {query_type} –∑–∞–ø—Ä–æ—Å–∞:\n\n{query}"

    try:
        result = asyncio.run(run_prisma_analysis(
            context=context,
            analysis_type="queries"
        ))

        click.echo("\n" + "="*50)
        click.echo("‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–†–û–°:")
        click.echo("="*50)
        click.echo(result)

        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(result)
            click.echo(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('changes', type=str)
@click.option('--production', is_flag=True,
              help='–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è')
@click.option('--backup', is_flag=True,
              help='–í–∫–ª—é—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ backup –≤ –ø–ª–∞–Ω')
@click.option('--output', '-o',
              type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏')
def create_migration(changes: str, production: bool, backup: bool, output: Optional[str]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""

    click.echo(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
    click.echo(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è: {changes}")
    click.echo(f"üè≠ Production —Ä–µ–∂–∏–º: {'–î–∞' if production else '–ù–µ—Ç'}")

    context = f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n\n{changes}"
    if production:
        context += "\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: production-ready –º–∏–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ backup'–∞–º–∏"
    if backup:
        context += "\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —Å–æ–∑–¥–∞–Ω–∏–µ backup'–æ–≤ –¥–∞–Ω–Ω—ã—Ö"

    try:
        result = asyncio.run(run_prisma_analysis(
            context=context,
            analysis_type="migrations"
        ))

        click.echo("\n" + "="*50)
        click.echo("üìã –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò:")
        click.echo("="*50)
        click.echo(result)

        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(result)
            click.echo(f"\nüíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('query_log', type=click.Path(exists=True))
@click.option('--threshold', '-t',
              type=float,
              default=1000.0,
              help='–ü–æ—Ä–æ–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö')
@click.option('--limit', '-l',
              type=int,
              default=10,
              help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
@click.option('--output', '-o',
              type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞')
def analyze_slow_queries(query_log: str, threshold: float, limit: int, output: Optional[str]):
    """–ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–∞."""

    click.echo(f"üêå –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑: {query_log}")
    click.echo(f"‚è±Ô∏è –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏: {threshold}ms")
    click.echo(f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {limit}")

    # –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–∞
    with open(query_log, 'r', encoding='utf-8') as f:
        log_content = f.read()

    context = f"–ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Ä–æ–≥: {threshold}ms):\n\n{log_content[:5000]}..."

    try:
        result = asyncio.run(run_prisma_analysis(
            context=context,
            analysis_type="performance"
        ))

        click.echo("\n" + "="*50)
        click.echo("üêå –ê–ù–ê–õ–ò–ó –ú–ï–î–õ–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í:")
        click.echo("="*50)
        click.echo(result)

        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(result)
            click.echo(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('project_path', type=click.Path(exists=True))
@click.option('--check-performance', is_flag=True,
              help='–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
@click.option('--suggest-indexes', is_flag=True,
              help='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–Ω–¥–µ–∫—Å–æ–≤')
@click.option('--report', '-r',
              type=click.Path(),
              help='–°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
def audit_database(project_path: str, check_performance: bool, suggest_indexes: bool, report: Optional[str]):
    """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞."""

    click.echo(f"üîç –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {project_path}")

    project = Path(project_path)
    schema_file = project / "prisma" / "schema.prisma"

    if not schema_file.exists():
        click.echo("‚ùå –§–∞–π–ª schema.prisma –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ß—Ç–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    with open(schema_file, 'r', encoding='utf-8') as f:
        schema_content = f.read()

    context = f"–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞:\n\n–ü—É—Ç—å: {project_path}\n\n–ürisma —Å—Ö–µ–º–∞:\n{schema_content}"

    if check_performance:
        context += "\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    if suggest_indexes:
        context += "\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤"

    try:
        result = asyncio.run(run_prisma_analysis(
            context=context,
            project_path=project_path,
            analysis_type="full"
        ))

        click.echo("\n" + "="*60)
        click.echo("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê:")
        click.echo("="*60)
        click.echo(result)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        if report:
            with open(report, 'w', encoding='utf-8') as f:
                f.write("# Database Audit Report\n\n")
                f.write(f"–ü—Ä–æ–µ–∫—Ç: {project_path}\n")
                f.write(f"–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞: {click.DateTime().now()}\n\n")
                f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞\n\n")
                f.write(result)

            click.echo(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report}")

        click.echo("\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: {e}", err=True)
        raise click.Abort()


if __name__ == '__main__':
    cli()