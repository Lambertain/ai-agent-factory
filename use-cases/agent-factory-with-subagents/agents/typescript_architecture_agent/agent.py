"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π TypeScript Architecture Agent –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤."""

from pydantic_ai import Agent
from .dependencies import TypeScriptArchitectureDependencies
from ..common import check_pm_switch
from ..common.pydantic_ai_decorators import (
    create_universal_pydantic_agent,
    with_integrations,
    register_agent
)
from .tools import (
    analyze_type_complexity,
    refactor_types,
    generate_type_guards,
    optimize_typescript_config
)
from .prompts import SYSTEM_PROMPT
from .providers import get_llm_model

# Create universal TypeScript architecture agent with decorators
typescript_agent = create_universal_pydantic_agent(
    model=get_llm_model(),
    deps_type=TypeScriptArchitectureDependencies,
    system_prompt=SYSTEM_PROMPT,
    agent_type="typescript_architecture",
    knowledge_tags=["typescript", "architecture", "agent-knowledge", "pydantic-ai"],
    knowledge_domain="typescriptlang.org",
    with_collective_tools=True,
    with_knowledge_tool=True
)

# Register agent in global registry
register_agent("typescript_architecture", typescript_agent, agent_type="typescript_architecture")

# Register TypeScript-specific tools
typescript_agent.tool(analyze_type_complexity)
typescript_agent.tool(refactor_types)
typescript_agent.tool(generate_type_guards)
typescript_agent.tool(optimize_typescript_config)

# Collective work tools and knowledge search now added automatically via decorators

async def run_typescript_analysis(
    context: str,
    project_path: str = "",
    analysis_type: str = "full"
) -> str:
    """
    –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ TypeScript –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥, —Ñ–∞–π–ª—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (full, types, performance, refactor)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    deps = TypeScriptArchitectureDependencies(
        context=context,
        project_path=project_path,
        analysis_mode=analysis_type
    )

    prompt = f"""
    ## üìã –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π TypeScript –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:

    **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}
    **–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:** {analysis_type}

    –í—ã–ø–æ–ª–Ω–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:
    1. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
    2. –ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    4. –û–±–µ—Å–ø–µ—á—å type safety –Ω–∞ 95%+

    ## üîÑ –†–ï–§–õ–ï–ö–°–ò–Ø-–£–õ–£–ß–®–ï–ù–ò–ï
    –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞:
    1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    2. –í—ã—è–≤–∏ 2-3 –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –≤ –ø–æ–¥—Ö–æ–¥–µ
    3. –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """

    result = await typescript_agent.run(prompt, deps=deps)
    return result.data

def run_sync(context: str, **kwargs) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è CLI."""
    import asyncio
    return asyncio.run(run_typescript_analysis(context, **kwargs))

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ['typescript_agent', 'run_typescript_analysis', 'run_sync']