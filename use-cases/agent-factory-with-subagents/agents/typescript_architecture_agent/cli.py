"""Command line interface for TypeScript Architecture Agent."""

import asyncio
import click
from pathlib import Path
from typing import Optional
from .agent import run_typescript_analysis


@click.group()
def cli():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π TypeScript Architecture Agent –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    pass


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--analysis-type', '-t',
              type=click.Choice(['full', 'types', 'performance', 'refactor']),
              default='full',
              help='–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
@click.option('--project-path', '-p',
              type=click.Path(),
              help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--output', '-o',
              type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
def analyze(file_path: str, analysis_type: str, project_path: Optional[str], output: Optional[str]):
    """–ê–Ω–∞–ª–∏–∑ TypeScript —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞."""

    click.echo(f"üîç –ê–Ω–∞–ª–∏–∑ TypeScript –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {file_path}")
    click.echo(f"üìã –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    context = f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{content}"

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    try:
        result = asyncio.run(run_typescript_analysis(
            context=context,
            project_path=project_path or str(Path(file_path).parent),
            analysis_type=analysis_type
        ))

        click.echo("\n" + "="*50)
        click.echo("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        click.echo("="*50)
        click.echo(result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(result)
            click.echo(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('project_path', type=click.Path(exists=True))
@click.option('--fix-issues', is_flag=True,
              help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
@click.option('--report', '-r',
              type=click.Path(),
              help='–°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
def audit(project_path: str, fix_issues: bool, report: Optional[str]):
    """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç TypeScript –ø—Ä–æ–µ–∫—Ç–∞."""

    click.echo(f"üèóÔ∏è  –ê—É–¥–∏—Ç TypeScript –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")

    project = Path(project_path)

    # –ü–æ–∏—Å–∫ TypeScript —Ñ–∞–π–ª–æ–≤
    ts_files = list(project.rglob("*.ts")) + list(project.rglob("*.tsx"))

    if not ts_files:
        click.echo("‚ùå TypeScript —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    click.echo(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(ts_files)} TypeScript —Ñ–∞–π–ª–æ–≤")

    results = []

    with click.progressbar(ts_files, label='–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤') as files:
        for file_path in files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                context = f"–ê—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ - —Ñ–∞–π–ª: {file_path}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{content}"

                result = asyncio.run(run_typescript_analysis(
                    context=context,
                    project_path=project_path,
                    analysis_type='full'
                ))

                results.append({
                    'file': str(file_path),
                    'result': result
                })

            except Exception as e:
                click.echo(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if report:
        with open(report, 'w', encoding='utf-8') as f:
            f.write("# TypeScript Architecture Audit Report\n\n")
            f.write(f"–ü—Ä–æ–µ–∫—Ç: {project_path}\n")
            f.write(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}\n\n")

            for i, result in enumerate(results, 1):
                f.write(f"## {i}. {result['file']}\n\n")
                f.write(result['result'])
                f.write("\n\n---\n\n")

        click.echo(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report}")

    click.echo("\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


@cli.command()
@click.argument('code', type=str)
@click.option('--strategy', '-s',
              type=click.Choice(['optimize', 'simplify', 'strengthen']),
              default='optimize',
              help='–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞')
def refactor(code: str, strategy: str):
    """–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ TypeScript –∫–æ–¥–∞."""

    click.echo(f"üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ TypeScript –∫–æ–¥–∞")
    click.echo(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

    context = f"–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{strategy}':\n\n{code}"

    try:
        result = asyncio.run(run_typescript_analysis(
            context=context,
            analysis_type='refactor'
        ))

        click.echo("\n" + "="*50)
        click.echo("üîß –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
        click.echo("="*50)
        click.echo(result)

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.option('--project-path', '-p',
              type=click.Path(),
              default='.',
              help='–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É')
def optimize_config(project_path: str):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TypeScript."""

    click.echo(f"‚öôÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è tsconfig.json –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")

    context = f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ {project_path}"

    try:
        result = asyncio.run(run_typescript_analysis(
            context=context,
            project_path=project_path,
            analysis_type='performance'
        ))

        click.echo("\n" + "="*50)
        click.echo("‚öôÔ∏è  –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        click.echo("="*50)
        click.echo(result)

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}", err=True)
        raise click.Abort()


if __name__ == '__main__':
    cli()