"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Pattern Integration Synthesizer Agent.
"""

from pydantic_ai import RunContext
from typing import List, Dict, Any, Optional
from .dependencies import PatternIntegrationSynthesizerDependencies
from .models import (
    PhaseType,
    SessionSlot,
    EmotionalCurveStage,
    SynergyLevel,
    Program,
    ModuleSynergy,
    ResistancePoint
)


async def orchestrate_module_sequence(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    module_ids: List[str],
    phase_type: str,
    target_goals: List[str]
) -> str:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∏–Ω–µ—Ä–≥–∏–∏.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        module_ids: –°–ø–∏—Å–æ–∫ ID –º–æ–¥—É–ª–µ–π –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
        phase_type: –¢–∏–ø —Ñ–∞–∑—ã (beginning, development, integration)
        target_goals: –¶–µ–ª–µ–≤—ã–µ —Ü–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

    Returns:
        –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
    """
    patterns_db = ctx.deps.orchestration_patterns_db

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
    phase_patterns = {
        "beginning": "progressive_intensity",
        "development": "technique_sandwich",
        "integration": "spiral_deepening"
    }

    pattern_name = phase_patterns.get(phase_type, "progressive_intensity")
    pattern = patterns_db.patterns[pattern_name]

    result = f"""
## –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –¥–ª—è —Ñ–∞–∑—ã: {phase_type}

**–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:** {pattern_name}
**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {pattern['rationale']}

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ({len(module_ids)} –º–æ–¥—É–ª–µ–π):**

"""

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∫ –º–æ–¥—É–ª—è–º
    sequence = pattern['sequence']
    modules_per_stage = len(module_ids) // len(sequence)

    for idx, module_id in enumerate(module_ids):
        stage_idx = min(idx // max(modules_per_stage, 1), len(sequence) - 1)
        stage = sequence[stage_idx]

        result += f"{idx + 1}. {module_id} ‚Üí –°—Ç–∞–¥–∏—è: {stage}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–∏–Ω–µ—Ä–≥–∏–∏
    result += f"\n**–ü—Ä–∞–≤–∏–ª–∞ —Å–∏–Ω–µ—Ä–≥–∏–∏:**\n"
    for rule in patterns_db.synergy_rules["high_synergy_pairs"][:3]:
        result += f"- ‚úÖ {rule}\n"

    result += f"\n**–ò–∑–±–µ–≥–∞—Ç—å:**\n"
    for avoid in patterns_db.synergy_rules["avoid_combinations"]:
        result += f"- ‚ö†Ô∏è {avoid}\n"

    result += f"\n**–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** –°–∏–Ω–µ—Ä–≥–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥—É–ª–µ–π —Å–æ–∑–¥–∞—Å—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π —Å—É–º–º—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π."

    return result


async def manage_emotional_curve(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    program_duration_days: int,
    program_intensity: str = "medium"
) -> str:
    """
    –£–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        program_duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥–Ω—è—Ö
        program_intensity: –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã (light, medium, intensive)

    Returns:
        –ü–ª–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π
    """
    curve_db = ctx.deps.emotional_curve_db

    result = f"""
## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π: {program_duration_days} –¥–Ω–µ–π

**–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:** {program_intensity}

**–≠—Ç–∞–ø—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π:**

"""

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏–∏ –ø–æ –¥–Ω—è–º
    for stage_key, stage_data in curve_db.curve_stages.items():
        result += f"\n### {stage_data['stage'].upper()}\n"
        result += f"**–≠–Ω–µ—Ä–≥–∏—è:** {stage_data['energy']} | **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:** {stage_data['motivation']}\n\n"

        result += "**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
        for char in stage_data['characteristics']:
            result += f"- {char}\n"

        result += "\n**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
        for activity in stage_data['optimal_activities']:
            result += f"- ‚úÖ {activity}\n"

        if 'avoid' in stage_data:
            result += f"\n**–ò–∑–±–µ–≥–∞—Ç—å:** {', '.join(stage_data['avoid'])}\n"

        if 'critical' in stage_data:
            result += f"\n‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ù–û:** {stage_data['critical']}\n"

        if 'opportunity' in stage_data:
            result += f"\nüí° **–í–û–ó–ú–û–ñ–ù–û–°–¢–¨:** {stage_data['opportunity']}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    result += f"\n## –¢–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è:\n\n"
    for rp in curve_db.resistance_points:
        result += f"**–î–Ω–∏ {rp['day_range']}** - {rp['type']} (Severity: {rp['severity']})\n"
        result += "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏:\n"
        for strategy in rp['mitigation']:
            result += f"  - {strategy}\n"
        result += "\n"

    return result


async def identify_resistance_points(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    program: Dict[str, Any],
    user_profile: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü—Ä–µ–¥–≤–∏–¥–µ—Ç—å —Ç–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ –≤—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        program: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–µ–∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    curve_db = ctx.deps.emotional_curve_db
    load_db = ctx.deps.module_load_db

    result = f"""
## –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–µ–∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è

**–ü—Ä–æ–≥—Ä–∞–º–º–∞:** {program.get('program_name', 'Unknown')}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {program.get('total_days', 21)} –¥–Ω–µ–π

### üî¥ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:

"""

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    for idx, rp in enumerate(curve_db.resistance_points, 1):
        result += f"\n**{idx}. –î–Ω–∏ {rp['day_range']}** - {rp['type']}\n"
        result += f"   - **Severity:** {rp['severity']}\n"
        result += f"   - **–û–ø–∏—Å–∞–Ω–∏–µ:** –¢–∏–ø–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ dropout —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å {rp['type']}\n"
        result += f"   - **–ú–∏—Ç–∏–≥–∞—Ü–∏—è:**\n"
        for strategy in rp['mitigation']:
            result += f"     - ‚úÖ {strategy}\n"

    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    result += f"\n### üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏:\n\n"
    guidelines = load_db.load_guidelines

    result += f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–∏–º–∏—Ç—ã:**\n"
    optimal_range = guidelines['daily_limits']['total_minutes']['optimal_range']
    result += f"- –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ–Ω—å: {optimal_range[0]}-{optimal_range[1]} –º–∏–Ω—É—Ç\n"
    result += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {guidelines['daily_limits']['sessions_per_day']['optimal']}\n"
    result += f"- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: –º–∞–∫—Å–∏–º—É–º {guidelines['daily_limits']['intensive_modules']['max_per_day']} –≤ –¥–µ–Ω—å\n"

    result += f"\n**–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ (–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å):**\n"
    for indicator in load_db.fatigue_indicators:
        result += f"- ‚ö†Ô∏è {indicator}\n"

    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if user_profile:
        result += f"\n### üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:\n"
        if user_profile.get('previous_dropout', False):
            result += "- ‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è dropout ‚Üí —É—Å–∏–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –¥–Ω—è—Ö 4-7\n"
        if user_profile.get('low_motivation', False):
            result += "- ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –±–∞–∑–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è ‚Üí —É–≤–µ–ª–∏—á–∏—Ç—å quick wins –∏ gamification\n"

    result += f"\n### üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
    result += "- –í—Å—Ç—Ä–æ–∏—Ç—å check-in —Ç–æ—á–∫–∏ –≤ –¥–Ω–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞\n"
    result += "- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å motivational content –∑–∞—Ä–∞–Ω–µ–µ\n"
    result += "- –û–±–µ—Å–ø–µ—á–∏—Ç—å –ª–µ–≥–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ support resources\n"
    result += "- –°–æ–∑–¥–∞—Ç—å emergency lightweight –≤–µ—Ä—Å–∏–∏ –¥–ª—è –¥–Ω–µ–π –Ω–∏–∑–∫–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n"

    return result


async def ensure_module_synergy(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    module_a_id: str,
    module_b_id: str,
    gap_days: int = 0
) -> str:
    """
    –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–∏–Ω–µ—Ä–≥–∏—é –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        module_a_id: ID –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
        module_b_id: ID –≤—Ç–æ—Ä–æ–≥–æ –º–æ–¥—É–ª—è
        gap_days: –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏

    Returns:
        –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    patterns_db = ctx.deps.orchestration_patterns_db

    result = f"""
## –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–æ–¥—É–ª–µ–π

**–ú–æ–¥—É–ª—å A:** {module_a_id}
**–ú–æ–¥—É–ª—å B:** {module_b_id}
**–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫:** {gap_days} –¥–Ω–µ–π

"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã
    synergy_found = False
    for pair in patterns_db.synergy_rules["high_synergy_pairs"]:
        if (module_a_id in pair or module_b_id in pair):
            result += f"‚úÖ **–í—ã—Å–æ–∫–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n"
            result += f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {pair}\n"
            synergy_found = True
            break

    if not synergy_found:
        result += f"‚ö†Ô∏è –°–∏–Ω–µ—Ä–≥–∏—è –Ω–µ –≤—ã—è–≤–ª–µ–Ω–∞ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö\n"
        result += f"   –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    result += f"\n### –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:\n"
    conflict_found = False
    for avoid_pattern in patterns_db.synergy_rules["avoid_combinations"]:
        if module_a_id in avoid_pattern or module_b_id in avoid_pattern:
            result += f"‚õî **–ö–û–ù–§–õ–ò–ö–¢:** {avoid_pattern}\n"
            conflict_found = True

    if not conflict_found:
        result += "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫—É
    result += f"\n### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É:\n"
    if gap_days == 0:
        result += "- –ú–æ–¥—É–ª–∏ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å: –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å–ª–∏ –æ–±–∞ –Ω–µ intensive\n"
        result += "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2-4 —á–∞—Å–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏\n"
    elif gap_days == 1:
        result += "- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
        result += "- –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n"
    elif gap_days >= 3:
        result += "- –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è recap\n"
        result += "- –î–æ–±–∞–≤–∏—Ç—å bridge transition –¥–ª—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏\n"

    result += f"\n### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏–Ω–µ—Ä–≥–∏–∏:\n"
    result += "1. –î–æ–±–∞–≤–∏—Ç—å explicit reference –≤ –º–æ–¥—É–ª–µ B –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º–æ–¥—É–ª—è A\n"
    result += "2. –°–æ–∑–¥–∞—Ç—å transition bridge –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—â–∏–π —Å–≤—è–∑—å\n"
    result += "3. –í feedback –º–æ–¥—É–ª—è B —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π –∏–∑ –º–æ–¥—É–ª—è A\n"

    return result


async def analyze_program_coherence(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    program_structure: Dict[str, Any]
) -> str:
    """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        program_structure: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        –û—Ç—á–µ—Ç –æ coherence —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    result = f"""
## –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

**–ü—Ä–æ–≥—Ä–∞–º–º–∞:** {program_structure.get('program_name', 'Unknown')}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {program_structure.get('total_days', 21)} –¥–Ω–µ–π

### üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:

"""

    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑
    phases = program_structure.get('phases', [])
    result += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑:** {len(phases)}\n"

    if len(phases) == 3:
        result += "‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 3 —Ñ–∞–∑—ã (Beginning, Development, Integration)\n"
    else:
        result += f"‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
    result += f"\n**–ë–∞–ª–∞–Ω—Å —Ñ–∞–∑:**\n"
    for phase in phases:
        phase_name = phase.get('phase_type', 'unknown')
        days_count = len(phase.get('days', []))
        result += f"- {phase_name}: {days_count} –¥–Ω–µ–π\n"

    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    result += f"\n### üîó –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:\n"
    transition_db = ctx.deps.transition_patterns_db

    for transition_type, transition_data in transition_db.transition_types.items():
        result += f"**{transition_type}:** {transition_data['purpose']}\n"
        result += f"  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transition_data['duration']}\n"

    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    result += f"\n### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é coherence:\n"
    result += "1. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –∏–º–µ–µ—Ç —á–µ—Ç–∫–∏–µ —Ü–µ–ª–∏\n"
    result += "2. –°–æ–∑–¥–∞—Ç—å narrative arc —á–µ—Ä–µ–∑ –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
    result += "3. –û–±–µ—Å–ø–µ—á–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ transitions –º–µ–∂–¥—É –¥–Ω—è–º–∏\n"
    result += "4. –î–æ–±–∞–≤–∏—Ç—å recap —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ—à–ª—ã–º –æ–ø—ã—Ç–æ–º\n"
    result += "5. –í–∫–ª—é—á–∏—Ç—å forward-looking —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è anticipation\n"

    return result


async def search_agent_knowledge(
    ctx: RunContext[PatternIntegrationSynthesizerDependencies],
    query: str,
    match_count: int = 5
) -> str:
    """
    –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Archon RAG.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        match_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Returns:
        –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    search_tags = ctx.deps.knowledge_tags

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP Archon –¥–ª—è RAG –ø–æ–∏—Å–∫–∞
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ mcp__archon__rag_search_knowledge_base)

        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        result = f"–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'\n\n"

        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö dependencies
        if "orchestration" in query.lower() or "pattern" in query.lower():
            patterns = ctx.deps.orchestration_patterns_db.patterns
            result += "**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏:**\n"
            for pattern_name, pattern_data in list(patterns.items())[:match_count]:
                result += f"- {pattern_name}: {pattern_data['description']}\n"

        if "emotional" in query.lower() or "curve" in query.lower():
            stages = ctx.deps.emotional_curve_db.curve_stages
            result += "\n**–°—Ç–∞–¥–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π:**\n"
            for stage_name, stage_data in list(stages.items())[:match_count]:
                result += f"- {stage_data['stage']}: {stage_data.get('characteristics', [])[0] if stage_data.get('characteristics') else 'N/A'}\n"

        if "load" in query.lower() or "intensity" in query.lower():
            guidelines = ctx.deps.module_load_db.load_guidelines
            optimal_range = guidelines['daily_limits']['total_minutes']['optimal_range']
            result += "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ:**\n"
            result += f"- –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {optimal_range[0]}-{optimal_range[1]} –º–∏–Ω—É—Ç\n"

        if "transition" in query.lower():
            transitions = ctx.deps.transition_patterns_db.transition_types
            result += "\n**–¢–∏–ø—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:**\n"
            for trans_name, trans_data in list(transitions.items())[:match_count]:
                result += f"- {trans_name}: {trans_data['purpose']}\n"

        if not any(keyword in query.lower() for keyword in ["orchestration", "emotional", "load", "transition"]):
            result += "\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: orchestration, emotional curve, load, transition\n"

        return result

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}"


__all__ = [
    "orchestrate_module_sequence",
    "manage_emotional_curve",
    "identify_resistance_points",
    "ensure_module_synergy",
    "analyze_program_coherence",
    "search_agent_knowledge"
]
