# -*- coding: utf-8 -*-
"""
Universal Media Orchestrator Agent

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ú—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –∞–Ω–∏–º–∞—Ü–∏–∏)
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è (–≤–µ–±, –º–æ–±–∏–ª—å–Ω—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –ø–µ—á–∞—Ç—å)
- AI-powered –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Archon Knowledge Base
"""

from .agent import (
    media_orchestrator_agent,
    run_media_orchestration_task,
    run_image_processing,
    run_video_processing,
    run_audio_processing,
    run_media_generation,
    run_media_composition,
    run_platform_optimization,
    analyze_media_requirements,
    create_media_strategy
)

from .dependencies import (
    MediaOrchestratorDependencies,
    load_dependencies
)

from .settings import (
    MediaOrchestratorSettings,
    load_settings,
    get_processing_profile,
    list_processing_profiles,
    create_custom_profile,
    ProcessingProfile,
    PROCESSING_PROFILES
)

from .providers import (
    MediaModelProvider,
    get_llm_model,
    get_model_for_media_task,
    TaskComplexity,
    MediaType
)

from .prompts import (
    get_system_prompt,
    get_preset_prompt,
    MediaPromptConfig,
    PRESET_CONFIGURATIONS
)

# –í–µ—Ä—Å–∏—è –∞–≥–µ–Ω—Ç–∞
__version__ = "1.0.0"

# –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
__author__ = "AI Agent Factory"
__description__ = "Universal Media Orchestrator Agent for comprehensive media processing"
__license__ = "MIT"

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    "media_orchestrator_agent",
    "run_media_orchestration_task",
    "run_image_processing",
    "run_video_processing",
    "run_audio_processing",
    "run_media_generation",
    "run_media_composition",
    "run_platform_optimization",
    "analyze_media_requirements",
    "create_media_strategy",

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    "MediaOrchestratorDependencies",
    "load_dependencies",
    "MediaOrchestratorSettings",
    "load_settings",

    # –ü—Ä–æ—Ñ–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    "get_processing_profile",
    "list_processing_profiles",
    "create_custom_profile",
    "ProcessingProfile",
    "PROCESSING_PROFILES",

    # –°–∏—Å—Ç–µ–º—ã –º–æ–¥–µ–ª–µ–π
    "MediaModelProvider",
    "get_llm_model",
    "get_model_for_media_task",
    "TaskComplexity",
    "MediaType",

    # –ü—Ä–æ–º–ø—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    "get_system_prompt",
    "get_preset_prompt",
    "MediaPromptConfig",
    "PRESET_CONFIGURATIONS",

    # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "__version__",
    "__author__",
    "__description__",
    "__license__"
]

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
SUPPORTED_FEATURES = {
    "media_types": [
        "image", "video", "audio", "animation",
        "presentation", "composite"
    ],
    "image_formats": [
        "jpg", "jpeg", "png", "webp", "avif",
        "svg", "heic", "bmp", "tiff"
    ],
    "video_formats": [
        "mp4", "avi", "mov", "mkv", "webm",
        "flv", "wmv", "m4v"
    ],
    "audio_formats": [
        "mp3", "wav", "flac", "aac", "ogg",
        "m4a", "wma"
    ],
    "processing_modes": [
        "optimize", "transform", "generate",
        "composite", "analyze"
    ],
    "target_platforms": [
        "web", "mobile", "social", "print",
        "presentation", "broadcast"
    ],
    "quality_levels": [
        "low", "medium", "high", "premium", "lossless"
    ],
    "ai_capabilities": [
        "generation", "enhancement", "style_transfer",
        "background_removal", "upscaling", "restoration"
    ]
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
INTEGRATIONS = {
    "archon_knowledge_base": {
        "enabled": True,
        "features": ["rag_search", "task_delegation", "progress_tracking"]
    },
    "collective_problem_solving": {
        "enabled": True,
        "features": ["microtask_breakdown", "agent_delegation", "reflection"]
    },
    "model_optimization": {
        "enabled": True,
        "features": ["cost_optimization", "quality_optimization", "auto_selection"]
    }
}

def get_agent_info() -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≥–µ–Ω—Ç–µ
    """
    return {
        "name": "Universal Media Orchestrator Agent",
        "version": __version__,
        "description": __description__,
        "author": __author__,
        "license": __license__,
        "supported_features": SUPPORTED_FEATURES,
        "integrations": INTEGRATIONS,
        "knowledge_base": "universal_media_orchestrator_knowledge.md",
        "tags": [
            "media-processing", "image-optimization", "video-editing",
            "audio-processing", "ai-generation", "platform-optimization",
            "universal-agent", "pydantic-ai", "archon-integration"
        ]
    }

def get_quick_start_example() -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞
    """
    return '''
# –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç Universal Media Orchestrator Agent

from universal_media_orchestrator_agent import run_media_orchestration_task

# –ë–∞–∑–æ–≤–∞—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞
result = await run_media_orchestration_task(
    message="–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏",
    media_type="image",
    processing_mode="optimize",
    target_platform="web",
    quality_level="high"
)

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
from universal_media_orchestrator_agent import run_image_processing

image_result = await run_image_processing(
    image_path="product_photo.jpg",
    operations=["resize", "enhance", "watermark"],
    target_size=(800, 800),
    platform_optimization="ecommerce"
)

print("–ú–µ–¥–∏–∞-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
'''

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    from .settings import load_settings

    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    _settings = load_settings()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API –∫–ª—é—á–µ–π
    if not _settings.llm_api_key:
        import warnings
        warnings.warn(
            "LLM API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MEDIA_ORCHESTRATOR_LLM_API_KEY "
            "–∏–ª–∏ LLM_API_KEY —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
            UserWarning
        )

    if not _settings.gemini_api_key:
        import warnings
        warnings.warn(
            "Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. "
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MEDIA_ORCHESTRATOR_GEMINI_API_KEY –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.",
            UserWarning
        )

except Exception as e:
    import warnings
    warnings.warn(
        f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–µ .env",
        UserWarning
    )

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
import os
if os.getenv("DEBUG", "").lower() in ("true", "1", "yes"):
    print(f"‚úÖ Universal Media Orchestrator Agent v{__version__} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞: {', '.join(SUPPORTED_FEATURES['media_types'])}")
    print(f"üîß –†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {', '.join(SUPPORTED_FEATURES['processing_modes'])}")
    print(f"üåê –¶–µ–ª–µ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(SUPPORTED_FEATURES['target_platforms'])}")