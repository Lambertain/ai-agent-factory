/**
 * Usage Examples for Psychology Content Orchestrator
 * Demonstrates various ways to use the universal orchestrator agent
 */

const PsychologyContentOrchestrator = require('../core/orchestrator');

/**
 * Example 1: Basic Therapeutic Program Creation
 */
async function createTherapeuticProgram() {
    console.log('\n=== Example 1: Creating Therapeutic Program ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'clinical-psychology',
        integrationStrategy: 'clinical-protocols',
        qualityThreshold: 0.9,
        ragEnabled: true
    });

    const request = {
        type: 'therapeutic-program',
        description: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏ –¥–ª—è –ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤ —É –≤–∑—Ä–æ—Å–ª—ã—Ö',
        domain: 'clinical-psychology',
        targetAudience: 'adults-with-anxiety',
        objectives: [
            '–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏',
            '–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–≤–ª–∞–¥–∞–Ω–∏—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º',
            '–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏',
            '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ—Ü–∏–¥–∏–≤–æ–≤'
        ],
        parameters: {
            duration: '12-16 sessions',
            format: 'individual-therapy',
            evidenceLevel: 'high',
            culturalAdaptation: true
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Therapeutic program created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`‚è±Ô∏è Completion Time: ${result.metrics.completionTime}ms`);
            console.log(`ü§ñ Agents Used: ${result.metrics.agentsUsed}`);
            console.log(`üìù Content Sections: ${Object.keys(result.content.sections).length}`);
        } else {
            console.log('‚ùå Failed to create therapeutic program:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating therapeutic program:', error);
        return null;
    }
}

/**
 * Example 2: Educational Assessment Tool Development
 */
async function createEducationalAssessment() {
    console.log('\n=== Example 2: Creating Educational Assessment Tool ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'educational-psychology',
        integrationStrategy: 'educational-curriculum',
        qualityThreshold: 0.85,
        ragEnabled: true
    });

    const request = {
        type: 'assessment-tool',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∫ –æ–±—É—á–µ–Ω–∏—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞',
        domain: 'educational-psychology',
        targetAudience: 'university-students',
        objectives: [
            '–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
            '–û—Ü–µ–Ω–∫–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π —Å–∞–º–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            '–í—ã—è–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–µ–º–æ—Ç–∏–≤–∞—Ü–∏–∏',
            '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
        ],
        parameters: {
            assessmentType: 'self-report-questionnaire',
            items: 40,
            scales: ['intrinsic-motivation', 'extrinsic-motivation', 'amotivation', 'self-efficacy'],
            validity: 'construct-validity-required',
            reliability: 'cronbach-alpha-0.80'
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Assessment tool created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`üéØ Assessment Framework: ${result.content.sections['assessment-framework']?.title}`);
            console.log(`üìã Validation Protocol: ${result.content.sections['quality-assurance']?.title}`);
        } else {
            console.log('‚ùå Failed to create assessment tool:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating assessment tool:', error);
        return null;
    }
}

/**
 * Example 3: Organizational Wellness Program
 */
async function createOrganizationalWellnessProgram() {
    console.log('\n=== Example 3: Creating Organizational Wellness Program ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'organizational-psychology',
        integrationStrategy: 'organizational-systems',
        qualityThreshold: 0.8,
        ragEnabled: true
    });

    const request = {
        type: 'comprehensive-program',
        description: '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏',
        domain: 'organizational-psychology',
        targetAudience: 'tech-professionals',
        objectives: [
            '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è',
            '–£–ª—É—á—à–µ–Ω–∏–µ work-life balance',
            '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            '–†–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏',
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –∫—É–ª—å—Ç—É—Ä—ã'
        ],
        parameters: {
            organizationSize: '500-1000 employees',
            industry: 'technology',
            implementationPhases: 4,
            duration: '12-months',
            measurementStrategy: 'quarterly-assessments',
            stakeholders: ['hr', 'management', 'employees', 'unions']
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Organizational wellness program created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`üè¢ Implementation Guide: ${result.content.sections['implementation-guide']?.title}`);
            console.log(`üìà Business Alignment: Strong organizational fit`);
        } else {
            console.log('‚ùå Failed to create wellness program:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating wellness program:', error);
        return null;
    }
}

/**
 * Example 4: Research Methodology Framework
 */
async function createResearchFramework() {
    console.log('\n=== Example 4: Creating Research Methodology Framework ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'general-psychology',
        integrationStrategy: 'standard',
        qualityThreshold: 0.9,
        ragEnabled: true
    });

    const request = {
        type: 'research-methodology',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ä–∞–º–∫—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π',
        domain: 'general-psychology',
        targetAudience: 'researchers-clinicians',
        objectives: [
            '–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä',
            '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏',
            '–°—Ä–∞–≤–Ω–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
            '–≠—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å'
        ],
        parameters: {
            researchDesign: 'randomized-controlled-trial',
            populationFocus: 'digital-interventions',
            outcomeMeasures: 'validated-instruments',
            statisticalPower: '80-percent',
            effectSize: 'medium-to-large',
            followUpPeriod: '6-months'
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Research framework created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`üî¨ Theoretical Foundation: ${result.content.sections['theoretical-foundation']?.title}`);
            console.log(`üìã Quality Assurance: ${result.content.sections['quality-assurance']?.title}`);
        } else {
            console.log('‚ùå Failed to create research framework:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating research framework:', error);
        return null;
    }
}

/**
 * Example 5: Custom Domain Configuration
 */
async function demonstrateCustomDomain() {
    console.log('\n=== Example 5: Custom Domain Configuration ===');

    // Create orchestrator with custom domain settings
    const customDomainSettings = {
        'sports-psychology': {
            name: 'Sports Psychology',
            requirements: [
                'performance-focus',
                'athlete-specificity',
                'sport-context',
                'mental-skills-training'
            ],
            validation: [
                'performance-validity',
                'sport-relevance',
                'practical-application'
            ],
            approaches: [
                'cognitive-behavioral',
                'mindfulness-based',
                'goal-setting',
                'visualization'
            ],
            integrationStrategy: 'performance-optimization',
            qualityThreshold: 0.8
        }
    };

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'sports-psychology',
        domainSettings: customDomainSettings,
        integrationStrategy: 'performance-optimization',
        qualityThreshold: 0.8,
        ragEnabled: true
    });

    const request = {
        type: 'technique-library',
        description: '–°–æ–∑–¥–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–æ–≤',
        domain: 'sports-psychology',
        targetAudience: 'professional-tennis-players',
        objectives: [
            '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é',
            '–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫',
            '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ'
        ],
        parameters: {
            sportSpecific: 'tennis',
            level: 'professional',
            techniques: ['visualization', 'self-talk', 'breathing', 'focus-cues'],
            practiceIntegration: true,
            competitionReady: true
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Sports psychology techniques created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`üéæ Sport-Specific Content: Tennis-focused techniques`);
            console.log(`üèÜ Performance Orientation: Competition-ready protocols`);
        } else {
            console.log('‚ùå Failed to create sports psychology content:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating sports psychology content:', error);
        return null;
    }
}

/**
 * Example 6: Multi-Domain Integration
 */
async function demonstrateMultiDomainIntegration() {
    console.log('\n=== Example 6: Multi-Domain Integration ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'general-psychology',
        integrationStrategy: 'holistic-wellbeing',
        qualityThreshold: 0.85,
        ragEnabled: true
    });

    const request = {
        type: 'comprehensive-program',
        description: '–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã',
        domain: 'general-psychology',
        targetAudience: 'healthcare-workers',
        objectives: [
            '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è',
            '–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏',
            '–û–±—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∞–º —Å–∞–º–æ–ø–æ–º–æ—â–∏',
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
            '–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏'
        ],
        parameters: {
            multiDomain: true,
            clinicalComponent: 'stress-management-therapy',
            educationalComponent: 'resilience-training',
            organizationalComponent: 'workplace-wellness',
            healthComponent: 'self-care-protocols',
            integrationLevel: 'high',
            customization: 'role-specific'
        }
    };

    try {
        const result = await orchestrator.createContent(request);

        if (result.success) {
            console.log('‚úÖ Multi-domain program created successfully!');
            console.log(`üìä Quality Score: ${result.quality.score.toFixed(2)}`);
            console.log(`üîÑ Integration Features: ${Object.keys(result.content.integrationFeatures || {}).length}`);
            console.log(`üåê Cross-Domain Coherence: Holistic approach implemented`);
        } else {
            console.log('‚ùå Failed to create multi-domain program:', result.error);
        }

        return result;

    } catch (error) {
        console.error('üí• Error creating multi-domain program:', error);
        return null;
    }
}

/**
 * Example 7: Real-time Status Monitoring
 */
async function demonstrateStatusMonitoring() {
    console.log('\n=== Example 7: Real-time Status Monitoring ===');

    const orchestrator = new PsychologyContentOrchestrator({
        domain: 'clinical-psychology',
        ragEnabled: true
    });

    // Start a content creation process
    const request = {
        type: 'assessment-tool',
        description: '–ö—Ä–∞—Ç–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–≤–µ–Ω–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        domain: 'clinical-psychology',
        targetAudience: 'primary-care-patients',
        objectives: ['early-detection', 'risk-assessment', 'referral-guidance']
    };

    console.log('üöÄ Starting content creation...');

    // Monitor status during creation
    const statusInterval = setInterval(() => {
        const status = orchestrator.getStatus();
        console.log(`‚è≥ Active workflows: ${status.activeWorkflows}`);
        console.log(`üìà Success rate: ${(status.successRate * 100).toFixed(1)}%`);
        console.log(`‚≠ê Average quality: ${status.averageQuality.toFixed(2)}`);
    }, 2000);

    try {
        const result = await orchestrator.createContent(request);

        clearInterval(statusInterval);

        if (result.success) {
            console.log('\n‚úÖ Content creation completed!');

            // Final status
            const finalStatus = orchestrator.getStatus();
            console.log('\nüìä Final Statistics:');
            console.log(`   Total processed: ${finalStatus.totalProcessed}`);
            console.log(`   Success rate: ${(finalStatus.successRate * 100).toFixed(1)}%`);
            console.log(`   Average quality: ${finalStatus.averageQuality.toFixed(2)}`);
            console.log(`   Average completion time: ${finalStatus.averageCompletionTime.toFixed(0)}ms`);
        }

        return result;

    } catch (error) {
        clearInterval(statusInterval);
        console.error('üí• Error during monitored creation:', error);
        return null;
    }
}

/**
 * Main execution function to run all examples
 */
async function runAllExamples() {
    console.log('üé≠ Psychology Content Orchestrator - Usage Examples');
    console.log('='.repeat(60));

    const examples = [
        createTherapeuticProgram,
        createEducationalAssessment,
        createOrganizationalWellnessProgram,
        createResearchFramework,
        demonstrateCustomDomain,
        demonstrateMultiDomainIntegration,
        demonstrateStatusMonitoring
    ];

    const results = [];

    for (const example of examples) {
        try {
            const result = await example();
            results.push(result);

            // Wait between examples
            await new Promise(resolve => setTimeout(resolve, 1000));

        } catch (error) {
            console.error(`üí• Example failed:`, error);
            results.push(null);
        }
    }

    console.log('\nüèÅ All examples completed!');
    console.log(`‚úÖ Successful: ${results.filter(r => r?.success).length}/${results.length}`);
    console.log(`‚ùå Failed: ${results.filter(r => !r?.success).length}/${results.length}`);

    return results;
}

// Export examples for individual use
module.exports = {
    createTherapeuticProgram,
    createEducationalAssessment,
    createOrganizationalWellnessProgram,
    createResearchFramework,
    demonstrateCustomDomain,
    demonstrateMultiDomainIntegration,
    demonstrateStatusMonitoring,
    runAllExamples
};

// Run examples if this file is executed directly
if (require.main === module) {
    runAllExamples().catch(console.error);
}