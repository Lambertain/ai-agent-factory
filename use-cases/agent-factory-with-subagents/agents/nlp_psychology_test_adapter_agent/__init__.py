"""
NLP Psychology Test Adapter Agent

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é PatternShift
—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—É—á–Ω–æ–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –≤ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è PHQ-9, GAD-7, –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ wellness-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—É—á–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
"""

from .agent import (
    nlp_psychology_test_adapter_agent,
    run_test_adaptation_workflow
)

from .dependencies import (
    PatternShiftTestAdapterDeps,
    TestConfiguration,
    AdaptationResult,
    TestValidationResult
)

from .tools import (
    adapt_test_questions,
    validate_test_structure,
    generate_life_situations,
    create_multilingual_variants,
    calculate_adaptive_thresholds,
    integrate_redirection_logic,
    validate_psychological_correctness
)

from .prompts import (
    MAIN_SYSTEM_PROMPT,
    ADAPTATION_PROMPT,
    VALIDATION_PROMPT,
    MULTILINGUAL_PROMPT,
    EXPANSION_PROMPT,
    get_adaptive_system_prompt,
    get_validation_criteria
)

from .settings import (
    TestAdapterSettings,
    AdaptationDomainType,
    ProjectType,
    CulturalContext,
    load_settings,
    get_domain_config,
    get_cultural_config,
    get_project_config,
    create_adaptive_config,
    EXAMPLE_CONFIGS
)

# –í–µ—Ä—Å–∏—è –∞–≥–µ–Ω—Ç–∞
__version__ = "1.0.0"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
__agent_info__ = {
    "name": "NLP Psychology Test Adapter Agent",
    "version": __version__,
    "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é PatternShift",
    "domain": "psychology, assessment, wellness",
    "framework": "Pydantic AI",
    "model": "Claude 4 Sonnet",
    "capabilities": [
        "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤",
        "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏",
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤",
        "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
        "–õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    ],
    "supported_domains": [
        "clinical_psychology",
        "wellness",
        "coaching",
        "educational",
        "organizational",
        "research"
    ],
    "supported_languages": ["uk", "ru", "en"],
    "supported_cultural_contexts": [
        "ukrainian", "russian", "western_european",
        "american", "eastern_european", "universal"
    ]
}

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
    "nlp_psychology_test_adapter_agent",
    "run_test_adaptation_workflow",

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    "PatternShiftTestAdapterDeps",
    "TestConfiguration",
    "AdaptationResult",
    "TestValidationResult",

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    "adapt_test_questions",
    "validate_test_structure",
    "generate_life_situations",
    "create_multilingual_variants",
    "calculate_adaptive_thresholds",
    "integrate_redirection_logic",
    "validate_psychological_correctness",

    # –ü—Ä–æ–º–ø—Ç—ã
    "MAIN_SYSTEM_PROMPT",
    "ADAPTATION_PROMPT",
    "VALIDATION_PROMPT",
    "MULTILINGUAL_PROMPT",
    "EXPANSION_PROMPT",
    "get_adaptive_system_prompt",
    "get_validation_criteria",

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    "TestAdapterSettings",
    "AdaptationDomainType",
    "ProjectType",
    "CulturalContext",
    "load_settings",
    "get_domain_config",
    "get_cultural_config",
    "get_project_config",
    "create_adaptive_config",
    "EXAMPLE_CONFIGS",

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    "__version__",
    "__agent_info__"
]


def get_agent_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≥–µ–Ω—Ç–µ."""
    return __agent_info__


def print_agent_capabilities():
    """–í—ã–≤–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞."""
    info = __agent_info__

    print(f"\nüß† {info['name']} v{info['version']}")
    print(f"üìù {info['description']}")
    print(f"üîß Framework: {info['framework']} + {info['model']}")

    print(f"\n‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    for capability in info['capabilities']:
        print(f"  ‚Ä¢ {capability}")

    print(f"\nüéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã:")
    for domain in info['supported_domains']:
        print(f"  ‚Ä¢ {domain}")

    print(f"\nüåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –∏ –∫—É–ª—å—Ç—É—Ä—ã:")
    print(f"  –Ø–∑—ã–∫–∏: {', '.join(info['supported_languages'])}")
    print(f"  –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã: {', '.join(info['supported_cultural_contexts'])}")


def create_quick_config(
    domain: str = "wellness",
    culture: str = "ukrainian",
    language: str = "uk"
) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞.

    Args:
        domain: –î–æ–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        culture: –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        language: –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫

    Returns:
        –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –µ–Ω—É–º—ã
    domain_mapping = {
        "clinical": AdaptationDomainType.CLINICAL_PSYCHOLOGY,
        "wellness": AdaptationDomainType.WELLNESS,
        "coaching": AdaptationDomainType.COACHING,
        "education": AdaptationDomainType.EDUCATIONAL,
        "organizational": AdaptationDomainType.ORGANIZATIONAL,
        "research": AdaptationDomainType.RESEARCH
    }

    culture_mapping = {
        "ukrainian": CulturalContext.UKRAINIAN,
        "russian": CulturalContext.RUSSIAN,
        "western": CulturalContext.WESTERN_EUROPEAN,
        "american": CulturalContext.AMERICAN,
        "eastern": CulturalContext.EASTERN_EUROPEAN,
        "universal": CulturalContext.UNIVERSAL
    }

    domain_enum = domain_mapping.get(domain, AdaptationDomainType.WELLNESS)
    culture_enum = culture_mapping.get(culture, CulturalContext.UKRAINIAN)

    config = create_adaptive_config(domain_enum, culture_enum)
    config["primary_language"] = language

    return config


# –ü—Ä–∏–º–µ—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
QUICK_CONFIGS = {
    "wellness_uk": create_quick_config("wellness", "ukrainian", "uk"),
    "coaching_universal": create_quick_config("coaching", "universal", "en"),
    "clinical_american": create_quick_config("clinical", "american", "en"),
    "research_eastern": create_quick_config("research", "eastern", "en")
}


if __name__ == "__main__":
    print_agent_capabilities()

    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for name, config in QUICK_CONFIGS.items():
        print(f"  ‚Ä¢ {name}: {config['domain_type']} / {config['cultural_context']} / {config.get('primary_language', 'en')}")