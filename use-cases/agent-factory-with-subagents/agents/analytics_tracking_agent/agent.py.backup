# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Analytics & Tracking Agent
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import asyncio
import logging
from typing import List, Optional, Dict, Any

from pydantic_ai import Agent, RunContext
from .dependencies import load_dependencies, AnalyticsTrackingDependencies
from .tools import (
    setup_analytics_tracking,
    create_conversion_funnel,
    analyze_user_behavior,
    search_analytics_knowledge,
    delegate_task_to_agent,
    generate_analytics_report,
    optimize_tracking_performance,
    setup_privacy_compliance,
    create_custom_dashboard,
    validate_tracking_implementation
)
from .prompts import get_system_prompt, get_tool_selection_prompt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UniversalAnalyticsTrackingAgent:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:
    - Web Analytics
    - E-commerce Tracking
    - SaaS Metrics
    - Mobile Analytics
    - Content Analytics
    - Blog Analytics
    """

    def __init__(self, dependencies: Optional[AnalyticsTrackingDependencies] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏."""
        self.dependencies = dependencies or load_dependencies()

        # –°–æ–∑–¥–∞–µ–º Pydantic AI –∞–≥–µ–Ω—Ç–∞
        self.agent = Agent(
            self._get_llm_model(),
            deps_type=AnalyticsTrackingDependencies,
            system_prompt=self._get_system_prompt(),
            tools=[
                setup_analytics_tracking,
                create_conversion_funnel,
                analyze_user_behavior,
                search_analytics_knowledge,
                delegate_task_to_agent,
                generate_analytics_report,
                optimize_tracking_performance,
                setup_privacy_compliance,
                create_custom_dashboard,
                validate_tracking_implementation
            ],
        )

        logger.info(f"Analytics Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: {self.dependencies.project_type}")

    def _get_llm_model(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å LLM."""
        from pydantic_ai.models.openai import OpenAIModel
        from pydantic_ai.providers.openai import OpenAIProvider

        provider = OpenAIProvider(
            base_url=self.dependencies.settings.llm_base_url,
            api_key=self.dependencies.settings.llm_api_key
        )

        return OpenAIModel(
            self.dependencies.settings.llm_model,
            provider=provider
        )

    def _get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."""
        return get_system_prompt(self.dependencies)

    async def run(self, user_message: str) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        try:
            result = await self.agent.run(
                user_message,
                deps=self.dependencies
            )
            return result.data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    async def setup_project_analytics(self, project_config: Dict[str, Any]) -> str:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

        Args:
            project_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        setup_message = f"""
        –ù–∞—Å—Ç—Ä–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

        –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_config.get('project_type', 'web_analytics')}
        –î–æ–º–µ–Ω: {project_config.get('domain_type', 'analytics')}
        –§–æ–∫—É—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞: {project_config.get('tracking_focus', 'conversion')}
        Analytics –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {project_config.get('analytics_providers', ['google_analytics'])}

        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {project_config.get('additional_settings', {})}
        """

        return await self.run(setup_message)

    async def analyze_project_performance(self, analysis_request: Dict[str, Any]) -> str:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.

        Args:
            analysis_request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        analysis_message = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:

        –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {analysis_request.get('period', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π')}
        –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_request.get('metrics', '–≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏')}
        –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analysis_request.get('segments', '–≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã')}

        –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ: {analysis_request.get('focus_areas', [])}
        """

        return await self.run(analysis_message)

    def get_available_providers(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö analytics –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
        return self.dependencies.analytics_providers

    def get_project_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ."""
        return {
            "project_type": self.dependencies.project_type,
            "domain_type": self.dependencies.domain_type,
            "tracking_focus": self.dependencies.tracking_focus,
            "analytics_providers": self.dependencies.analytics_providers,
            "primary_provider": self.dependencies.primary_provider,
            "key_metrics": self.dependencies.get_key_metrics(),
            "recommended_events": self.dependencies.get_recommended_events(),
            "privacy_compliant": {
                "gdpr": self.dependencies.gdpr_enabled,
                "ccpa": self.dependencies.ccpa_enabled
            }
        }


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤

def create_web_analytics_agent() -> UniversalAnalyticsTrackingAgent:
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    from .examples.web_config import get_web_config
    return UniversalAnalyticsTrackingAgent(get_web_config())

def create_ecommerce_agent() -> UniversalAnalyticsTrackingAgent:
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è e-commerce."""
    from .examples.ecommerce_config import get_ecommerce_config
    return UniversalAnalyticsTrackingAgent(get_ecommerce_config())

def create_saas_agent() -> UniversalAnalyticsTrackingAgent:
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è SaaS –º–µ—Ç—Ä–∏–∫."""
    from .examples.saas_config import get_saas_config
    return UniversalAnalyticsTrackingAgent(get_saas_config())

def create_blog_agent() -> UniversalAnalyticsTrackingAgent:
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–≥–∞."""
    from .examples.blog_config import get_blog_config
    return UniversalAnalyticsTrackingAgent(get_blog_config())


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    import argparse

    parser = argparse.ArgumentParser(description="Universal Analytics & Tracking Agent")
    parser.add_argument("--project-type", default="web_analytics",
                       help="–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (web_analytics, ecommerce_tracking, saas_metrics, blog_analytics)")
    parser.add_argument("--message", help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--interactive", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    args = parser.parse_args()

    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    agent_creators = {
        "web_analytics": create_web_analytics_agent,
        "ecommerce_tracking": create_ecommerce_agent,
        "saas_metrics": create_saas_agent,
        "blog_analytics": create_blog_agent
    }

    agent_creator = agent_creators.get(args.project_type, create_web_analytics_agent)
    agent = agent_creator()

    print(f"üéØ Analytics Agent –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: {args.project_type}")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(agent.get_available_providers())}")
    print("-" * 50)

    if args.message:
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º
        response = await agent.run(args.message)
        print(f"–û—Ç–≤–µ—Ç: {response}")

    elif args.interactive:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        while True:
            try:
                user_input = input("\nüë§ –í—ã: ")

                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    break

                if user_input.strip():
                    response = await agent.run(user_input)
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {response}")

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_info = agent.get_project_info()
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
        for key, value in project_info.items():
            print(f"  {key}: {value}")


if __name__ == "__main__":
    asyncio.run(main())