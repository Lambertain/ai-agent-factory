# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Analytics & Tracking Agent
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import asyncio
import logging
from typing import List, Optional, Dict, Any

from pydantic_ai import Agent, RunContext
from .dependencies import load_dependencies, AnalyticsTrackingDependencies
from .providers import get_llm_model
from .tools import (
    setup_analytics_tracking,
    create_conversion_funnel,
    analyze_user_behavior,
    search_analytics_knowledge,
    delegate_task_to_agent,
    generate_analytics_report,
    optimize_tracking_performance,
    setup_privacy_compliance,
    create_custom_dashboard,
    validate_tracking_implementation,
    break_down_to_microtasks,
    report_microtask_progress,
    reflect_and_improve,
    check_delegation_need
)
from .prompts import get_system_prompt, get_tool_selection_prompt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Pydantic AI –∞–≥–µ–Ω—Ç–∞ (–ø—Ä—è–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
analytics_agent = Agent(
    get_llm_model(),
    deps_type=AnalyticsTrackingDependencies,
    system_prompt=get_system_prompt()
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º analytics –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
analytics_agent.tool(setup_analytics_tracking)
analytics_agent.tool(create_conversion_funnel)
analytics_agent.tool(analyze_user_behavior)
analytics_agent.tool(search_analytics_knowledge)
analytics_agent.tool(delegate_task_to_agent)
analytics_agent.tool(generate_analytics_report)
analytics_agent.tool(optimize_tracking_performance)
analytics_agent.tool(setup_privacy_compliance)
analytics_agent.tool(create_custom_dashboard)
analytics_agent.tool(validate_tracking_implementation)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
analytics_agent.tool(break_down_to_microtasks)
analytics_agent.tool(report_microtask_progress)
analytics_agent.tool(reflect_and_improve)
analytics_agent.tool(check_delegation_need)

async def run_analytics_audit(
    target_type: str,
    audit_scope: str = "comprehensive",
    session_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–ª–∏.

    Args:
        target_type: –¢–∏–ø –∞—É–¥–∏—Ç–∞ (web_analytics, ecommerce_tracking, saas_metrics)
        audit_scope: –û–±–ª–∞—Å—Ç—å –∞—É–¥–∏—Ç–∞ (quick, comprehensive, focused)
        session_id: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    """
    start_time = asyncio.get_event_loop().time()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = load_dependencies()
    deps.project_type = target_type

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        result = await analytics_agent.run(
            f"–í—ã–ø–æ–ª–Ω–∏ {audit_scope} –∞—É–¥–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: {target_type}",
            deps=deps
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        audit_duration = asyncio.get_event_loop().time() - start_time

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        audit_results = {
            "audit_summary": {
                "target_type": target_type,
                "audit_scope": audit_scope,
                "session_id": session_id,
                "start_time": start_time,
                "duration_seconds": audit_duration,
                "status": "completed"
            },
            "agent_response": result.data,
            "recommendations": _extract_analytics_recommendations(result.data),
            "next_steps": _generate_analytics_next_steps(result.data)
        }

        logger.info(f"–ê—É–¥–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {audit_duration:.2f} —Å–µ–∫—É–Ω–¥")
        return audit_results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return {
            "error": str(e),
            "audit_summary": {
                "target_type": target_type,
                "status": "failed"
            }
        }

def _extract_analytics_recommendations(response: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞."""
    recommendations = []
    lines = response.split('\n')

    for line in lines:
        line = line.strip()
        if line.startswith(('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', 'Recommendation:', '‚úÖ', 'üí°')):
            recommendations.append(line)

    return recommendations

def _generate_analytics_next_steps(response: str) -> List[str]:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞."""
    next_steps = []

    if "Google Analytics" in response:
        next_steps.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Analytics 4")
    if "–∫–æ–Ω–≤–µ—Ä—Å–∏—è" in response.lower():
        next_steps.append("–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
    if "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" in response.lower():
        next_steps.append("–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞")

    return next_steps

async def run_analytics_task(user_message: str, target_type: str = "web_analytics") -> str:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏.

    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

    Returns:
        –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = load_dependencies()
    deps.project_type = target_type

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        from ..common.pydantic_ai_integrations import run_with_integrations

        result = await run_with_integrations(
            agent=analytics_agent,
            user_message=user_message,
            deps=deps,
            agent_type="analytics_tracking_agent"
        )
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}"

def get_available_providers() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö analytics –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    deps = load_dependencies()
    return deps.analytics_providers

def get_project_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ."""
    deps = load_dependencies()
    return {
        "project_type": deps.project_type,
        "domain_type": deps.domain_type,
        "tracking_focus": deps.tracking_focus,
        "analytics_providers": deps.analytics_providers,
        "primary_provider": deps.primary_provider,
        "key_metrics": deps.get_key_metrics(),
        "recommended_events": deps.get_recommended_events(),
        "privacy_compliant": {
            "gdpr": deps.gdpr_enabled,
            "ccpa": deps.ccpa_enabled
        }
    }


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    import argparse

    parser = argparse.ArgumentParser(description="Universal Analytics & Tracking Agent")
    parser.add_argument("--project-type", default="web_analytics",
                       help="–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (web_analytics, ecommerce_tracking, saas_metrics, blog_analytics)")
    parser.add_argument("--message", help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--interactive", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    args = parser.parse_args()

    print(f"üéØ Analytics Agent –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: {args.project_type}")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(get_available_providers())}")
    print("-" * 50)

    if args.message:
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º
        response = await run_analytics_task(args.message, args.project_type)
        print(f"–û—Ç–≤–µ—Ç: {response}")

    elif args.interactive:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        while True:
            try:
                user_input = input("\nüë§ –í—ã: ")

                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    break

                if user_input.strip():
                    response = await run_analytics_task(user_input, args.project_type)
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {response}")

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_info = get_project_info()
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
        for key, value in project_info.items():
            print(f"  {key}: {value}")


if __name__ == "__main__":
    asyncio.run(main())