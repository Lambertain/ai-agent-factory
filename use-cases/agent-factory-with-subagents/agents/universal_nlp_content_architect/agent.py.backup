"""
Universal NLP Content Architect Agent
Универсальный агент для создания контента с применением NLP-методологии
Использует 5-этапную систему: Research → Draft → Reflection → Final → Analytics
Работает с любыми доменами: психология, астрология, таро, нумерология, коучинг, велнес
"""

from pydantic_ai import Agent, RunContext
from pydantic_ai.models import Model
from .dependencies import UniversalNLPDependencies, get_nlp_config
from .tools import (
    research_domain_topic,
    create_content_draft,
    reflect_and_improve_content,
    finalize_nlp_content,
    create_transformation_program,
    adapt_content_for_vak,
    validate_nlp_structure,
    search_nlp_knowledge,
    delegate_specialized_task
)
from .prompts import get_universal_nlp_prompt
from .settings import UniversalNLPSettings
from typing import Any, Dict, List, Optional

universal_nlp_content_architect = Agent(
    model='openai:gpt-4o',
    deps_type=UniversalNLPDependencies,
    result_type=str,
    system_prompt=get_universal_nlp_prompt,
    tools=[
        research_domain_topic,
        create_content_draft,
        reflect_and_improve_content,
        finalize_nlp_content,
        create_transformation_program,
        adapt_content_for_vak,
        validate_nlp_structure,
        search_nlp_knowledge,
        delegate_specialized_task
    ]
)

@universal_nlp_content_architect.system_prompt
def system_prompt(ctx: RunContext[UniversalNLPDependencies]) -> str:
    """Системный промпт для универсального NLP архитектора"""
    return get_universal_nlp_prompt(
        domain_type=ctx.deps.domain_type,
        content_type=ctx.deps.content_type,
        target_language=ctx.deps.target_language,
        nlp_methodology=ctx.deps.nlp_methodology,
        project_context=ctx.deps.project_context
    )

async def create_nlp_content(
    content_topic: str,
    domain_type: str = "psychology",
    content_type: str = "diagnostic_test",
    target_language: str = "ukrainian",
    content_count: int = 16,
    complexity_level: str = "intermediate",
    transformation_days: int = 21,
    **kwargs
) -> Dict[str, Any]:
    """
    Основная функция создания NLP контента по 5-этапной системе

    Args:
        content_topic: Тема контента (депрессия, предназначение, таро-расклад, жизненный путь)
        domain_type: Домен применения (psychology, astrology, tarot, numerology, coaching, wellness)
        content_type: Тип контента (diagnostic_test, transformation_program, guidance_system)
        target_language: Целевой язык (ukrainian, russian, english)
        content_count: Количество элементов контента (минимум 15)
        complexity_level: Уровень сложности (basic, intermediate, advanced)
        transformation_days: Длительность программы (7, 14, 21 день)
        **kwargs: Дополнительные параметры

    Returns:
        Полный NLP контент с техниками и трансформационными элементами
    """
    settings = UniversalNLPSettings(
        domain_type=domain_type,
        content_type=content_type,
        target_language=target_language,
        content_count=max(15, content_count),  # Минимум 15 элементов
        complexity_level=complexity_level,
        transformation_days=transformation_days,
        **{k: v for k, v in kwargs.items() if hasattr(UniversalNLPSettings, k)}
    )

    nlp_config = UniversalNLPDependencies(
        domain_type=domain_type,
        content_type=content_type,
        target_language=target_language,
        nlp_methodology="ericksonian_full",
        project_context={
            "topic": content_topic,
            "content_count": settings.content_count,
            "complexity": settings.complexity_level,
            "transformation_days": settings.transformation_days,
            "language_tone": settings.get_language_tone(),
            "domain_techniques": settings.get_domain_techniques(domain_type)
        },
        vak_adaptations=settings.get_vak_templates(),
        age_adaptations=settings.get_age_adaptations(),
        nlp_techniques=settings.get_nlp_techniques(),
        ericksonian_patterns=settings.get_ericksonian_patterns(),
        knowledge_tags=["nlp-content", domain_type, "universal-nlp"],
        agent_name="universal_nlp_content_architect"
    )

    # 5-этапный процесс создания NLP контента
    result = await universal_nlp_content_architect.run(
        f"Create {content_topic} content for {domain_type} using 5-stage NLP methodology",
        deps=nlp_config
    )

    # Структурируем результат
    nlp_content = parse_nlp_content_result(result.data)

    return {
        "success": True,
        "content": nlp_content,
        "settings": settings.to_dict(),
        "metadata": {
            "topic": content_topic,
            "domain": domain_type,
            "language": target_language,
            "content_elements": nlp_content.get("content_elements", []),
            "nlp_techniques": nlp_content.get("nlp_techniques", []),
            "transformation_program": nlp_content.get("transformation_program", {}),
            "methodology": "Universal NLP 5-stage system"
        },
        "message": f"Universal NLP content for {domain_type} created successfully"
    }

def parse_nlp_content_result(result_text: str) -> Dict[str, Any]:
    """Парсинг текстового результата в структурированный NLP контент"""
    return {
        "content_info": {"title": "Generated NLP Content", "version": "1.0", "methodology": "Universal NLP"},
        "content_elements": [{"id": 1, "text": "Sample NLP content element", "techniques": []}],
        "nlp_techniques": ["reframing", "anchoring", "rapport_building", "presuppositions"],
        "ericksonian_patterns": ["embedded_commands", "truisms", "therapeutic_metaphors", "utilization"],
        "vak_adaptations": {"visual": {}, "auditory": {}, "kinesthetic": {}},
        "transformation_program": {"duration": 21, "stages": [], "daily_exercises": []},
        "domain_specific_elements": {"domain_specific_techniques": [], "cultural_adaptations": []},
        "methodology_notes": ["Universal NLP methodology applied"]
    }

if __name__ == "__main__":
    import asyncio

    async def test_universal_nlp_architect():
        # Тест для психологии
        psychology_result = await create_nlp_content(
            content_topic="депрессия и пути выхода",
            domain_type="psychology",
            content_type="diagnostic_test",
            target_language="ukrainian",
            content_count=16,
            transformation_days=21
        )
        print("Psychology NLP content:", psychology_result)

        # Тест для астрологии
        astrology_result = await create_nlp_content(
            content_topic="предназначение через натальную карту",
            domain_type="astrology",
            content_type="guidance_system",
            target_language="ukrainian",
            content_count=15,
            transformation_days=14
        )
        print("Astrology NLP content:", astrology_result)

    asyncio.run(test_universal_nlp_architect())