# -*- coding: utf-8 -*-
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–æ–ª–∏ Quality Guardian.

–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –ú–ù–ï (Claude) –∫–æ–≥–¥–∞ —è –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–æ–ª—å Quality Guardian.
–Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import re
from pathlib import Path
from typing import List, Dict, Tuple

from .checklists import (
    ROLE_SWITCHING_CHECKLIST,
    UNIVERSALITY_CHECKLIST,
    CODE_QUALITY_CHECKLIST,
    ARCHITECTURE_CHECKLIST,
    DOCUMENTATION_CHECKLIST,
    TESTING_CHECKLIST
)


def run_quality_audit(project_path: str) -> str:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞.

    –Ø –∏—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        –û—Ç—á–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    """
    project_path = Path(project_path)
    problems = []

    print("üîç –ù–∞—á–∏–Ω–∞—é –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–æ–ª–∏ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
    role_problems = check_role_switching(project_path)
    problems.extend(role_problems)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
    univ_problems = check_universality(project_path)
    problems.extend(univ_problems)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    code_problems = check_code_quality(project_path)
    problems.extend(code_problems)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    arch_problems = check_architecture(project_path)
    problems.extend(arch_problems)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    doc_problems = check_documentation(project_path)
    problems.extend(doc_problems)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
    test_problems = check_testing(project_path)
    problems.extend(test_problems)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = format_audit_report(problems)

    print(f"‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")

    return report


def check_role_switching(project_path: Path) -> List[Dict]:
    """
    üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–ª–∏.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []
    checklist = ROLE_SWITCHING_CHECKLIST

    print(f"üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞: {checklist['name']}...")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∞–≥–µ–Ω—Ç–æ–≤
    agent_files = list(project_path.glob("agents/*/agent.py"))

    for agent_file in agent_files:
        agent_name = agent_file.parent.name

        with open(agent_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —á–µ–∫–ª–∏—Å—Ç–∞
        for item in checklist['items']:
            if not re.search(item['what_to_find'], content, re.IGNORECASE):
                problems.append({
                    "file": str(agent_file),
                    "agent": agent_name,
                    "severity": item['severity'],
                    "check_id": item['id'],
                    "problem": f"{item['check']} - –ù–ï –ù–ê–ô–î–ï–ù–û",
                    "where": item['where']
                })

    return problems


def check_universality(project_path: Path) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ (0% –ø—Ä–æ–µ–∫—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞).

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []
    checklist = UNIVERSALITY_CHECKLIST

    print(f"üåê –ü—Ä–æ–≤–µ—Ä–∫–∞: {checklist['name']}...")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –∞–≥–µ–Ω—Ç–æ–≤
    python_files = list(project_path.glob("agents/**/*.py"))

    for py_file in python_files:
        with open(py_file, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        for line_num, line in enumerate(lines, 1):
            for forbidden_term in checklist['forbidden_terms']:
                if forbidden_term in line:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                    if '# –ü—Ä–∏–º–µ—Ä:' not in line and '# Example:' not in line:
                        problems.append({
                            "file": str(py_file),
                            "line": line_num,
                            "severity": "BLOCKER",
                            "check_id": "no_hardcoded_projects",
                            "problem": f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω: {forbidden_term}",
                            "where": f"–°—Ç—Ä–æ–∫–∞ {line_num}"
                        })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ examples/
    agents_dirs = [d for d in project_path.glob("agents/*") if d.is_dir()]
    for agent_dir in agents_dirs:
        examples_dir = agent_dir / "examples"
        if not examples_dir.exists():
            problems.append({
                "file": str(agent_dir),
                "severity": "MAJOR",
                "check_id": "examples_directory",
                "problem": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç examples/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
                "where": "agents/{}/examples/".format(agent_dir.name)
            })

    return problems


def check_code_quality(project_path: Path) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []

    print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞...")

    python_files = list(project_path.glob("agents/**/*.py"))

    for py_file in python_files:
        with open(py_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            line_count = len(lines)
            content = ''.join(lines)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (max 500 —Å—Ç—Ä–æ–∫)
        if line_count > 500:
            problems.append({
                "file": str(py_file),
                "severity": "MAJOR",
                "check_id": "file_size_limit",
                "problem": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {line_count} —Å—Ç—Ä–æ–∫ (max 500)",
                "where": "–í–µ—Å—å —Ñ–∞–π–ª"
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ docstrings
        functions = re.findall(r'^(async )?def (\w+)\(', content, re.MULTILINE)
        for is_async, func_name in functions:
            func_pattern = f"(async )?def {func_name}\\([^)]*\\):[\\s\\n]*\"\"\""
            if not re.search(func_pattern, content):
                problems.append({
                    "file": str(py_file),
                    "severity": "MINOR",
                    "check_id": "docstrings",
                    "problem": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docstring –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}",
                    "where": f"–§—É–Ω–∫—Ü–∏—è {func_name}"
                })

    return problems


def check_architecture(project_path: Path) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∞–≥–µ–Ω—Ç–æ–≤.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []
    checklist = ARCHITECTURE_CHECKLIST

    print("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞...")

    agents_dirs = [d for d in project_path.glob("agents/*") if d.is_dir()]

    for agent_dir in agents_dirs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        for required_file in checklist['required_files']:
            file_path = agent_dir / required_file
            if not file_path.exists():
                problems.append({
                    "file": str(agent_dir),
                    "severity": "CRITICAL",
                    "check_id": "required_files_exist",
                    "problem": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {required_file}",
                    "where": f"agents/{agent_dir.name}/{required_file}"
                })

    return problems


def check_documentation(project_path: Path) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []

    print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è...")

    agents_dirs = [d for d in project_path.glob("agents/*") if d.is_dir()]

    for agent_dir in agents_dirs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º README.md
        readme = agent_dir / "README.md"
        if not readme.exists():
            problems.append({
                "file": str(agent_dir),
                "severity": "MAJOR",
                "check_id": "readme_exists",
                "problem": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç README.md",
                "where": f"agents/{agent_dir.name}/README.md"
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge_dir = agent_dir / "knowledge"
        if not knowledge_dir.exists():
            problems.append({
                "file": str(agent_dir),
                "severity": "MAJOR",
                "check_id": "knowledge_base",
                "problem": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç knowledge/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
                "where": f"agents/{agent_dir.name}/knowledge/"
            })

    return problems


def check_testing(project_path: Path) -> List[Dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    problems = []

    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")

    agents_dirs = [d for d in project_path.glob("agents/*") if d.is_dir()]

    for agent_dir in agents_dirs:
        tests_dir = agent_dir / "tests"
        if not tests_dir.exists():
            problems.append({
                "file": str(agent_dir),
                "severity": "MAJOR",
                "check_id": "tests_directory",
                "problem": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tests/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
                "where": f"agents/{agent_dir.name}/tests/"
            })

    return problems


def format_audit_report(problems: List[Dict]) -> str:
    """
    –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞.

    Args:
        problems: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    if not problems:
        return "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    by_severity = {}
    for problem in problems:
        severity = problem.get('severity', 'INFO')
        if severity not in by_severity:
            by_severity[severity] = []
        by_severity[severity].append(problem)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = "üìä –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê –ö–ê–ß–ï–°–¢–í–ê\n"
    report += "=" * 80 + "\n\n"

    report += f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(problems)}\n\n"

    # –ü—Ä–æ–±–ª–µ–º—ã –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    severity_order = ["BLOCKER", "CRITICAL", "MAJOR", "MINOR", "INFO"]

    for severity in severity_order:
        if severity in by_severity:
            count = len(by_severity[severity])
            report += f"\n{'üö®' if severity == 'BLOCKER' else '‚ùå' if severity == 'CRITICAL' else '‚ö†Ô∏è'} {severity}: {count} –ø—Ä–æ–±–ª–µ–º\n"
            report += "-" * 80 + "\n"

            for i, problem in enumerate(by_severity[severity][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report += f"\n{i}. {problem.get('problem', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞')}\n"
                report += f"   üìÅ –§–∞–π–ª: {problem.get('file', 'N/A')}\n"
                if 'line' in problem:
                    report += f"   üìç –°—Ç—Ä–æ–∫–∞: {problem.get('line')}\n"
                report += f"   üìç –ì–¥–µ: {problem.get('where', 'N/A')}\n"

            if count > 10:
                report += f"\n... –∏ –µ—â–µ {count - 10} –ø—Ä–æ–±–ª–µ–º\n"

    return report


def create_archon_tasks_for_problems(problems: List[Dict], project_id: str) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Archon –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

    –Ø –∏—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞—É–¥–∏—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        problems: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ Archon

    Returns:
        –û—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    """
    print(f"üìã –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –≤ Archon –¥–ª—è {len(problems)} –ø—Ä–æ–±–ª–µ–º...")

    tasks_by_severity = {}
    for problem in problems:
        severity = problem.get('severity', 'INFO')
        if severity not in tasks_by_severity:
            tasks_by_severity[severity] = []
        tasks_by_severity[severity].append(problem)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìã –ó–ê–î–ê–ß–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –í ARCHON\n"
    report += "=" * 80 + "\n\n"

    severity_order = ["BLOCKER", "CRITICAL", "MAJOR", "MINOR"]
    task_count = 0

    for severity in severity_order:
        if severity not in tasks_by_severity:
            continue

        problems_list = tasks_by_severity[severity]
        report += f"\n{severity}: {len(problems_list)} –∑–∞–¥–∞—á\n"
        report += "-" * 80 + "\n"

        for problem in problems_list:
            task_count += 1
            report += f"\n–ó–∞–¥–∞—á–∞ {task_count}:\n"
            report += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {problem.get('problem')}\n"
            report += f"–§–∞–π–ª: {problem.get('file')}\n"
            report += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {severity}\n"
            report += f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞: Implementation Engineer\n"

    report += f"\n\n‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {task_count}\n"
    report += "\nüí° –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ò—Å–ø–æ–ª—å–∑—É–π mcp__archon__manage_task –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á –≤ Archon\n"

    return report
