"""
Git utilities –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º –æ push –≤ production –ø—Ä–æ–µ–∫—Ç–∞—Ö.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.
"""

import subprocess
from typing import Dict, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


async def remind_to_push(
    project_info: Optional[Dict],
    local_repo_path: str,
    show_warning: bool = True
) -> Dict[str, any]:
    """
    –ù–∞–ø–æ–º–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ push –¥–ª—è production –ø—Ä–æ–µ–∫—Ç–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç deployment_status –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤.
    –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç production –∏ –µ—Å—Ç—å –Ω–µ–ø—É—à–Ω—É—Ç—ã–µ –∫–æ–º–º–∏—Ç—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.

    Args:
        project_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ (title, description, github_repo)
        local_repo_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        show_warning: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–æ–≥–∞—Ö

    Returns:
        Dict: {
            "should_remind": bool,
            "unpushed_count": int,
            "deployment_status": str,
            "reminder_message": str
        }

    Examples:
        >>> # Production –ø—Ä–æ–µ–∫—Ç —Å –Ω–µ–ø—É—à–Ω—É—Ç—ã–º–∏ –∫–æ–º–º–∏—Ç–∞–º–∏
        >>> project = {"description": "Production AI Agent Factory"}
        >>> result = await remind_to_push(project, "/path/to/repo")
        >>> if result["should_remind"]:
        ...     print(result["reminder_message"])

        üö® –ö–†–ò–¢–ò–ß–ù–û: PRODUCTION –ø—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç 3 –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤!

        ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–ø–æ–ª–Ω–∏—Ç—å:
           git push origin main

        ‚ùå –ù–ï –ó–ê–í–ï–†–®–ê–ô –∑–∞–¥–∞—á—É –±–µ–∑ push!
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å deployment_status
    deployment_status = _detect_deployment_status(project_info)

    # –ï—Å–ª–∏ –Ω–µ production - –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
    if deployment_status != "production":
        return {
            "should_remind": False,
            "unpushed_count": 0,
            "deployment_status": deployment_status,
            "reminder_message": f"[{deployment_status.upper()}] –ü—Ä–æ–µ–∫—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ push"
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –Ω–µ–ø—É—à–Ω—É—Ç—ã–µ –∫–æ–º–º–∏—Ç—ã
    try:
        unpushed_count = _count_unpushed_commits(local_repo_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
        return {
            "should_remind": False,
            "unpushed_count": 0,
            "deployment_status": deployment_status,
            "reminder_message": f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–∏—Ç—ã: {str(e)}"
        }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ï—Å—Ç—å –ª–∏ –Ω–µ–ø—É—à–Ω—É—Ç—ã–µ –∫–æ–º–º–∏—Ç—ã?
    if unpushed_count > 0:
        reminder = f"""
[PRODUCTION] –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç {unpushed_count} –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤!

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–ø–æ–ª–Ω–∏—Ç—å:
   git push origin main

–ù–ï –ó–ê–í–ï–†–®–ê–ô –∑–∞–¥–∞—á—É –±–µ–∑ push!
"""

        if show_warning:
            logger.warning(reminder)

        return {
            "should_remind": True,
            "unpushed_count": unpushed_count,
            "deployment_status": "production",
            "reminder_message": reminder.strip()
        }

    # –í—Å–µ –∫–æ–º–º–∏—Ç—ã –∑–∞–ø—É—à–µ–Ω—ã
    return {
        "should_remind": False,
        "unpushed_count": 0,
        "deployment_status": "production",
        "reminder_message": "[OK] –í—Å–µ –∫–æ–º–º–∏—Ç—ã –∑–∞–ø—É—à–µ–Ω—ã –≤ production"
    }


async def check_production_status(
    project_info: Optional[Dict],
    local_repo_path: str
) -> Dict[str, any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å production –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω—É–∂–Ω–æ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.

    Args:
        project_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        local_repo_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é

    Returns:
        Dict: {
            "is_production": bool,
            "unpushed_count": int,
            "needs_push": bool,
            "status_message": str
        }

    Examples:
        >>> status = await check_production_status(project, "/path/to/repo")
        >>> print(f"Production: {status['is_production']}")
        >>> print(f"Unpushed: {status['unpushed_count']}")
        >>> if status['needs_push']:
        ...     print("–¢–†–ï–ë–£–ï–¢–°–Ø PUSH!")
    """

    deployment_status = _detect_deployment_status(project_info)
    is_production = deployment_status == "production"

    if not is_production:
        return {
            "is_production": False,
            "unpushed_count": 0,
            "needs_push": False,
            "status_message": f"[{deployment_status.upper()}] –ü—Ä–æ–µ–∫—Ç –Ω–µ production"
        }

    try:
        unpushed_count = _count_unpushed_commits(local_repo_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
        return {
            "is_production": True,
            "unpushed_count": 0,
            "needs_push": False,
            "status_message": f"[ERROR] {str(e)}"
        }

    needs_push = unpushed_count > 0

    if needs_push:
        status_message = f"[PRODUCTION] {unpushed_count} –∫–æ–º–º–∏—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç push"
    else:
        status_message = "[PRODUCTION] –í—Å–µ –∫–æ–º–º–∏—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"

    return {
        "is_production": True,
        "unpushed_count": unpushed_count,
        "needs_push": needs_push,
        "status_message": status_message
    }


def _detect_deployment_status(project_info: Optional[Dict]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å deployment_status –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ description.

    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:
    - production: "production", "prod", "deployed", "live"
    - staging: "staging", "stage", "pre-production"
    - local: –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

    Args:
        project_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ

    Returns:
        str: "production", "staging" –∏–ª–∏ "local"
    """
    if not project_info:
        return "local"

    description = project_info.get("description", "").lower()
    title = project_info.get("title", "").lower()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    text = f"{description} {title}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ staging (–ü–ï–†–í–´–ú, —á—Ç–æ–±—ã "pre-production" –Ω–µ –ø–æ–ø–∞–ª –≤ production!)
    staging_keywords = ["staging", "stage", "pre-production", "preprod"]
    if any(keyword in text for keyword in staging_keywords):
        return "staging"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ production (–í–¢–û–†–´–ú, –ø–æ—Å–ª–µ staging)
    production_keywords = ["production", "prod", "deployed", "live"]
    if any(keyword in text for keyword in production_keywords):
        return "production"

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - local
    return "local"


def _count_unpushed_commits(repo_path: str) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: git rev-list @{u}..HEAD --count

    Args:
        repo_path: –ü—É—Ç—å –∫ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—à–Ω—É—Ç—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤

    Raises:
        subprocess.CalledProcessError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ git –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
        ValueError: –ï—Å–ª–∏ upstream branch –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ upstream branch –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        check_upstream = subprocess.run(
            ["git", "rev-parse", "--abbrev-ref", "@{u}"],
            cwd=repo_path,
            capture_output=True,
            text=True,
            check=False
        )

        if check_upstream.returncode != 0:
            # Upstream –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            logger.warning(f"No upstream branch configured for {repo_path}")
            return 0

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –Ω–µ–ø—É—à–Ω—É—Ç—ã–µ –∫–æ–º–º–∏—Ç—ã
        result = subprocess.run(
            ["git", "rev-list", "@{u}..HEAD", "--count"],
            cwd=repo_path,
            capture_output=True,
            text=True,
            check=True
        )

        count = int(result.stdout.strip())
        return count

    except subprocess.CalledProcessError as e:
        logger.error(f"Git command failed: {e.stderr}")
        raise
    except ValueError as e:
        logger.error(f"Failed to parse commit count: {e}")
        return 0


async def create_commit_with_check(
    project_info: Optional[Dict],
    local_repo_path: str,
    commit_message: str,
    remind_about_push: bool = True
) -> Dict[str, any]:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ push –¥–ª—è production –ø—Ä–æ–µ–∫—Ç–∞.

    –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ git workflow –∞–≥–µ–Ω—Ç–æ–≤.
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ push.

    Args:
        project_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è deployment_status)
        local_repo_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        commit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        remind_about_push: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ push

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
            - commit_created: bool
            - commit_hash: str (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
            - deployment_status: str (production/staging/local)
            - needs_push: bool
            - reminder_message: str

    Examples:
        >>> result = await create_commit_with_check(
        ...     project_info={"description": "Production AI Factory"},
        ...     local_repo_path="/path/to/repo",
        ...     commit_message="feat: add new feature"
        ... )
        >>> print(f"Commit: {result['commit_hash'][:8]}")
        >>> if result['needs_push']:
        ...     print(result['reminder_message'])
    """

    result = {
        "commit_created": False,
        "commit_hash": None,
        "deployment_status": "local",
        "needs_push": False,
        "reminder_message": ""
    }

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å deployment_status
    result["deployment_status"] = _detect_deployment_status(project_info)

    try:
        # –®–ê–ì–û 1: –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç
        logger.info(f"[GIT] Creating commit: {commit_message[:50]}...")

        # –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        subprocess.run(
            ["git", "add", "."],
            cwd=local_repo_path,
            check=True,
            capture_output=True
        )

        # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        full_commit_message = f"""{commit_message}

Generated with Claude Code

Co-Authored-By: Claude <noreply@anthropic.com>"""

        commit_result = subprocess.run(
            ["git", "commit", "-m", full_commit_message],
            cwd=local_repo_path,
            capture_output=True,
            text=True,
            check=True
        )

        # –ü–æ–ª—É—á–∏—Ç—å hash –∫–æ–º–º–∏—Ç–∞
        hash_result = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            cwd=local_repo_path,
            capture_output=True,
            text=True,
            check=True
        )

        result["commit_created"] = True
        result["commit_hash"] = hash_result.stdout.strip()

        logger.info(f"[OK] Commit created: {result['commit_hash'][:8]}")

        # –®–ê–ì–û 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ push –¥–ª—è production
        if remind_about_push:
            reminder_result = await remind_to_push(
                project_info=project_info,
                local_repo_path=local_repo_path,
                show_warning=True
            )

            result["needs_push"] = reminder_result["should_remind"]
            result["reminder_message"] = reminder_result["reminder_message"]

        return result

    except subprocess.CalledProcessError as e:
        logger.error(f"[ERROR] Git operation failed: {e.stderr}")
        result["reminder_message"] = f"[ERROR] {e.stderr}"
        return result


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–≥–µ–Ω—Ç–∞—Ö
USAGE_EXAMPLES = """
# –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏

from common.git_utils import remind_to_push

# –í –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
result = await remind_to_push(
    project_info={"description": "Production AI Agent Factory"},
    local_repo_path="/path/to/repo"
)

if result["should_remind"]:
    print(result["reminder_message"])
    # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–ø—É—à–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    subprocess.run(["git", "push", "origin", "main"], cwd=repo_path)

# –ü—Ä–∏–º–µ—Ä 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

from common.git_utils import create_commit_with_check

result = await create_commit_with_check(
    project_info=project,
    local_repo_path="/path/to/repo",
    commit_message="feat: –¥–æ–±–∞–≤–ª–µ–Ω Payment Integration Agent"
)

print(f"[OK] Commit: {result['commit_hash'][:8]}")
print(f"[STATUS] Deployment: {result['deployment_status']}")

if result['needs_push']:
    print(result['reminder_message'])
    # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–ø–æ–ª–Ω–∏—Ç—å push –¥–ª—è production
    subprocess.run(["git", "push", "origin", "main"], cwd=repo_path)

# –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ production –ø—Ä–æ–µ–∫—Ç–∞

from common.git_utils import check_production_status

status = await check_production_status(project, "/path/to/repo")

if status['is_production'] and status['needs_push']:
    print(f"–í–ù–ò–ú–ê–ù–ò–ï: {status['unpushed_count']} –∫–æ–º–º–∏—Ç–æ–≤ –∂–¥—É—Ç push!")
    print("–í—ã–ø–æ–ª–Ω–∏: git push origin main")
"""
