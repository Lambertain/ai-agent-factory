"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –Ω–∏–º–∏
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º AI Agent Factory.
"""

from typing import Dict, Any, List, Optional
from dataclasses import dataclass


@dataclass
class TaskInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è."""
    id: str
    title: str
    assignee: str
    task_order: int
    feature: str = ""
    status: str = "todo"
    description: str = ""


class TaskCommunicationFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö."""

    @staticmethod
    def format_next_task_prompt(task: TaskInfo) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏.

        Args:
            task: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ task_order
        priority_level = TaskCommunicationFormatter._get_priority_level(task.task_order)

        return f"–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞: '{task.title}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_level}, {task.assignee}). –ü—Ä–∏—Å—Ç—É–ø–∞—Ç—å?"

    @staticmethod
    def format_task_list_summary(tasks: List[TaskInfo], limit: int = 5) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.

        Args:
            tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á
        """
        if not tasks:
            return "üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (task_order)
        sorted_tasks = sorted(tasks, key=lambda t: t.task_order, reverse=True)

        summary = "üìã **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n"

        for i, task in enumerate(sorted_tasks[:limit]):
            priority = TaskCommunicationFormatter._get_priority_level(task.task_order)
            status_emoji = TaskCommunicationFormatter._get_status_emoji(task.status)

            summary += f"{i+1}. {status_emoji} '{task.title}' ({priority}, {task.assignee})\n"

        if len(sorted_tasks) > limit:
            remaining = len(sorted_tasks) - limit
            summary += f"   ...–∏ –µ—â–µ {remaining} –∑–∞–¥–∞—á\n"

        return summary

    @staticmethod
    def format_task_transition_announcement(
        completed_task: TaskInfo,
        next_task: TaskInfo
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ.

        Args:
            completed_task: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            next_task: –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
        """
        completed_priority = TaskCommunicationFormatter._get_priority_level(completed_task.task_order)
        next_priority = TaskCommunicationFormatter._get_priority_level(next_task.task_order)

        return f"""‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞:** '{completed_task.title}' ({completed_priority})

{TaskCommunicationFormatter.format_next_task_prompt(next_task)}"""

    @staticmethod
    def format_delegation_announcement(
        current_task: TaskInfo,
        delegated_to_agent: str,
        delegation_reason: str
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.

        Args:
            current_task: –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
            delegated_to_agent: –ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è
            delegation_reason: –ü—Ä–∏—á–∏–Ω–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        priority = TaskCommunicationFormatter._get_priority_level(current_task.task_order)

        return f"""ü§ù **–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**

üìã –ó–∞–¥–∞—á–∞: '{current_task.title}' ({priority})
üë§ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞: {delegated_to_agent}
üí° –ü—Ä–∏—á–∏–Ω–∞: {delegation_reason}

–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""

    @staticmethod
    def format_microtask_progress_update(
        main_task: TaskInfo,
        microtask_number: int,
        microtask_description: str,
        status: str = "completed"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏.

        Args:
            main_task: –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
            microtask_number: –ù–æ–º–µ—Ä –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
            microtask_description: –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
            status: –°—Ç–∞—Ç—É—Å (started, in_progress, completed, blocked)

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        status_emoji = {
            "started": "üîÑ",
            "in_progress": "‚è≥",
            "completed": "‚úÖ",
            "blocked": "üö´"
        }.get(status, "üìù")

        return f"{status_emoji} **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ {microtask_number}** ({status}): {microtask_description}"

    @staticmethod
    def _get_priority_level(task_order: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ task_order.

        Args:
            task_order: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏

        Returns:
            –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ P[X]-[Level]
        """
        if task_order >= 90:
            return f"P0-Critical/task_order {task_order}"
        elif task_order >= 70:
            return f"P1-High/task_order {task_order}"
        elif task_order >= 50:
            return f"P2-Medium/task_order {task_order}"
        else:
            return f"P3-Low/task_order {task_order}"

    @staticmethod
    def _get_status_emoji(status: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.

        Args:
            status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏

        Returns:
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
        """
        status_emojis = {
            "todo": "üìã",
            "doing": "üîÑ",
            "review": "üëÄ",
            "done": "‚úÖ",
            "blocked": "üö´"
        }
        return status_emojis.get(status, "üìù")


def parse_archon_task_to_task_info(archon_task: Dict[str, Any]) -> TaskInfo:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ Archon –≤ TaskInfo –æ–±—ä–µ–∫—Ç.

    Args:
        archon_task: –ó–∞–¥–∞—á–∞ –∏–∑ Archon API

    Returns:
        TaskInfo –æ–±—ä–µ–∫—Ç
    """
    return TaskInfo(
        id=archon_task.get("id", ""),
        title=archon_task.get("title", ""),
        assignee=archon_task.get("assignee", "Unknown"),
        task_order=archon_task.get("task_order", 0),
        feature=archon_task.get("feature", ""),
        status=archon_task.get("status", "todo"),
        description=archon_task.get("description", "")
    )


def parse_archon_task_list_to_task_info_list(archon_tasks: List[Dict[str, Any]]) -> List[TaskInfo]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Archon –≤ —Å–ø–∏—Å–æ–∫ TaskInfo –æ–±—ä–µ–∫—Ç–æ–≤.

    Args:
        archon_tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Archon API

    Returns:
        –°–ø–∏—Å–æ–∫ TaskInfo –æ–±—ä–µ–∫—Ç–æ–≤
    """
    return [parse_archon_task_to_task_info(task) for task in archon_tasks]


def get_next_priority_task(archon_tasks: List[Dict[str, Any]], exclude_status: List[str] = None) -> Optional[TaskInfo]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ Archon.

    Args:
        archon_tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Archon API
        exclude_status: –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞–µ—Ç done, doing)

    Returns:
        TaskInfo —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
    """
    if exclude_status is None:
        exclude_status = ["done", "doing"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ edge case: –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    if not archon_tasks or not isinstance(archon_tasks, list):
        return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    available_tasks = []
    for task in archon_tasks:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(task, dict):
            continue

        task_status = task.get("status", "unknown")
        if task_status not in exclude_status:
            try:
                task_info = parse_archon_task_to_task_info(task)
                available_tasks.append(task_info)
            except Exception:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                continue

    if not available_tasks:
        return None

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (task_order –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_tasks = sorted(available_tasks, key=lambda t: t.task_order, reverse=True)

    return sorted_tasks[0]


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
USAGE_EXAMPLES = {
    "basic_next_task": {
        "description": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ",
        "code": """
task = TaskInfo(
    id="123",
    title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è Puppeteer MCP",
    assignee="Implementation Engineer",
    task_order=77
)

prompt = TaskCommunicationFormatter.format_next_task_prompt(task)
print(prompt)
# –í—ã–≤–æ–¥: "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è Puppeteer MCP' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç P1-High/task_order 77, Implementation Engineer). –ü—Ä–∏—Å—Ç—É–ø–∞—Ç—å?"
"""
    },

    "task_transition": {
        "description": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏",
        "code": """
completed = TaskInfo(id="1", title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Fetch MCP", assignee="Engineer", task_order=71)
next_task = TaskInfo(id="2", title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Puppeteer MCP", assignee="Engineer", task_order=77)

announcement = TaskCommunicationFormatter.format_task_transition_announcement(completed, next_task)
print(announcement)
"""
    },

    "archon_integration": {
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Archon –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏",
        "code": """
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Archon
archon_response = await mcp__archon__find_tasks(
    project_id="c75ef8e3-6f4d-4da2-9e81-8d38d04a341a",
    filter_by="status",
    filter_value="todo"
)

# –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
next_task = get_next_priority_task(archon_response["tasks"])

if next_task:
    prompt = TaskCommunicationFormatter.format_next_task_prompt(next_task)
    print(prompt)
else:
    print("üìã –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
"""
    },

    "microtask_progress": {
        "description": "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á",
        "code": """
main_task = TaskInfo(id="1", title="–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞", assignee="Engineer", task_order=80)

# –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
progress = TaskCommunicationFormatter.format_microtask_progress_update(
    main_task=main_task,
    microtask_number=1,
    microtask_description="–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
    status="completed"
)
print(progress)
# –í—ã–≤–æ–¥: "‚úÖ **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ 1** (completed): –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
"""
    }
}


def create_agent_task_communication_mixin():
    """
    –°–æ–∑–¥–∞–µ—Ç mixin –∫–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ AgentDependencies.

    Returns:
        –ö–ª–∞—Å—Å-–º–∏–∫—Å–∏–Ω —Å –º–µ—Ç–æ–¥–∞–º–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö
    """

    class TaskCommunicationMixin:
        """Mixin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –∞–≥–µ–Ω—Ç—ã."""

        async def get_next_task_formatted(self, project_id: str = None) -> str:
            """
            –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ.

            Args:
                project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ Archon

            Returns:
                –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á
            """
            try:
                if not project_id and hasattr(self, 'archon_project_id'):
                    project_id = self.archon_project_id

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Archon (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mcp__archon__find_tasks)
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MCP —Ñ—É–Ω–∫—Ü–∏–∏
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                return "üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Archon MCP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á"

            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: {e}"

        def format_microtask_completion(self, microtask_number: int, description: str) -> str:
            """
            –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏.

            Args:
                microtask_number: –ù–æ–º–µ—Ä –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
                description: –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏

            Returns:
                –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            """
            return f"‚úÖ **–ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ {microtask_number}** (completed): {description}"

    return TaskCommunicationMixin


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–≥–µ–Ω—Ç–∞—Ö
TASK_PRIORITY_THRESHOLDS = {
    "CRITICAL": 90,
    "HIGH": 70,
    "MEDIUM": 50,
    "LOW": 0
}

DEFAULT_EXCLUDE_STATUS = ["done", "doing", "archived"]

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEMPLATES = {
    "no_tasks": "üìã –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
    "task_blocked": "üö´ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: '{title}' ({reason})",
    "delegation_needed": "ü§ù –ó–∞–¥–∞—á–∞ '{title}' —Ç—Ä–µ–±—É–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç—É {agent_type}",
    "waiting_approval": "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ '{title}'",
    "archon_unavailable": "‚ùå Archon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."
}

# Fallback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Archon
class ArchonFallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ fallback —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Archon."""

    @staticmethod
    def get_fallback_message(context: str = "task_transition") -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Archon.

        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (task_transition, task_creation, etc.)

        Returns:
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        fallback_messages = {
            "task_transition": """
‚ùå **Archon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** - –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É.

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Archon –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:3737/
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MCP —Å–µ—Ä–≤–µ—Ä Archon –∑–∞–ø—É—â–µ–Ω
3. –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å TodoWrite

üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:** –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ —Å Archon.
""",
            "task_creation": """
‚ùå **Archon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** - –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ–µ–∫—Ç–µ.

üí° **–î–µ–π—Å—Ç–≤–∏—è:**
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Archon: http://localhost:3737/health
3. –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å Archon
""",
            "task_status": """
‚ùå **Archon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** - –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.

üìã **–õ–æ–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:** –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å Archon.
"""
        }

        return fallback_messages.get(context, MESSAGE_TEMPLATES["archon_unavailable"])

    @staticmethod
    def should_use_fallback(error_message: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback —Ä–µ–∂–∏–º.

        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–µ–Ω fallback —Ä–µ–∂–∏–º
        """
        fallback_indicators = [
            "connection",
            "network",
            "timeout",
            "unavailable",
            "refused",
            "archon"
        ]

        error_lower = error_message.lower()
        return any(indicator in error_lower for indicator in fallback_indicators)

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TaskCommunicationFormatter ===\n")

    # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏
    sample_task = TaskInfo(
        id="test-123",
        title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è Puppeteer MCP –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞",
        assignee="Implementation Engineer",
        task_order=77,
        feature="mcp-testing",
        status="todo"
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    next_prompt = TaskCommunicationFormatter.format_next_task_prompt(sample_task)
    print("üìã –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ:")
    print(next_prompt)
    print()

    # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    sample_tasks = [
        TaskInfo("1", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "Security Agent", 95),
        TaskInfo("2", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "Performance Agent", 75),
        TaskInfo("3", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "Docs Agent", 45),
    ]

    task_summary = TaskCommunicationFormatter.format_task_list_summary(sample_tasks)
    print("üìä –°–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á:")
    print(task_summary)
    print()

    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏
    progress = TaskCommunicationFormatter.format_microtask_progress_update(
        sample_task, 1, "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "completed"
    )
    print("‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–∫—Ä–æ–∑–∞–¥–∞—á–∏:")
    print(progress)